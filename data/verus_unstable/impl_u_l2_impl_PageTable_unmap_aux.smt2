(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) :qid prelude_fuel_defaults :skolemid skolem_prelude_fuel_defaults))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-fun REF (Type) Type)
(declare-fun MUT_REF (Type) Type)
(declare-fun BOX (Type) Type)
(declare-fun RC (Type) Type)
(declare-fun ARC (Type) Type)
(declare-fun GHOST (Type) Type)
(declare-fun TRACKED (Type) Type)
(declare-fun NEVER (Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (= i (const_int (CONST_INT i)))))
(assert (has_type (B true) BOOL))
(assert (has_type (B false) BOOL))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) :qid prelude_as_type :skolemid skolem_prelude_as_type)))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) :qid prelude_mk_fun :skolemid skolem_prelude_mk_fun)))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) :qid prelude_unbox_box_bool :skolemid skolem_prelude_unbox_box_bool)))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) :qid prelude_unbox_box_int :skolemid skolem_prelude_unbox_box_int)))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) :qid prelude_box_unbox_bool :skolemid skolem_prelude_box_unbox_bool)))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) :qid prelude_box_unbox_int :skolemid skolem_prelude_box_unbox_int)))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) :qid prelude_box_unbox_nat :skolemid skolem_prelude_box_unbox_nat)))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) :qid prelude_box_unbox_uint :skolemid skolem_prelude_box_unbox_uint)))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) :qid prelude_box_unbox_sint :skolemid skolem_prelude_box_unbox_sint)))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) :qid prelude_strlit_injective :skolemid skolem_prelude_strlit_injective)))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) :qid prelude_box_unbox_strslice :skolemid skolem_prelude_box_unbox_strslice)))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) :qid prelude_unbox_box_strslice :skolemid skolem_prelude_unbox_box_strslice)))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) :qid prelude_has_type_strslice :skolemid skolem_prelude_has_type_strslice)))
(declare-fun ext_eq (Bool Type Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (td Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t td x y)) :pattern ((ext_eq deep t td x y)) :qid prelude_ext_eq :skolemid skolem_prelude_ext_eq)))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) :qid prelude_nat_clip :skolemid skolem_prelude_nat_clip)))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) :qid prelude_u_clip :skolemid skolem_prelude_u_clip)))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) :qid prelude_i_clip :skolemid skolem_prelude_i_clip)))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) :qid prelude_u_inv :skolemid skolem_prelude_u_inv)))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) :qid prelude_i_inv :skolemid skolem_prelude_i_inv)))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) :qid prelude_has_type_int :skolemid skolem_prelude_has_type_int)))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) :qid prelude_has_type_nat :skolemid skolem_prelude_has_type_nat)))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) :qid prelude_has_type_uint :skolemid skolem_prelude_has_type_uint)))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) :qid prelude_has_type_sint :skolemid skolem_prelude_has_type_sint)))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) :qid prelude_unbox_int :skolemid skolem_prelude_unbox_int)))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) :qid prelude_unbox_uint :skolemid skolem_prelude_unbox_uint)))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) :qid prelude_unbox_sint :skolemid skolem_prelude_unbox_sint)))
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)) :qid prelude_mul :skolemid skolem_prelude_mul)))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)) :qid prelude_eucdiv :skolemid skolem_prelude_eucdiv)))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)) :qid prelude_eucmod :skolemid skolem_prelude_eucmod)))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) :qid prelude_box_unbox_char :skolemid skolem_prelude_box_unbox_char)))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) :qid prelude_unbox_box_char :skolemid skolem_prelude_unbox_box_char)))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) :qid prelude_has_type_char :skolemid skolem_prelude_has_type_char)))
(assert (forall ((x Int)) (! (= (char%to_unicode (char%from_unicode x)) x) :pattern ((char%from_unicode x)) :qid prelude_char_injective :skolemid skolem_prelude_char_injective)))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) :qid prelude_to_unicode_bounds :skolemid skolem_prelude_to_unicode_bounds)))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and ((_ partial-order 0) x y) (not (= x y)))) :pattern ((height_lt x y)) :qid prelude_height_lt :skolemid skolem_prelude_height_lt)))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) :qid prelude_check_decrease_int :skolemid skolem_prelude_check_decrease_int)))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) :qid prelude_check_decrease_height :skolemid skolem_prelude_check_decrease_height)))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun closure_req (Type Type Type Type Poly Poly) Bool)
(declare-fun closure_ens (Type Type Type Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'impl_u::l2_impl'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Err. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Err_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!map.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.check_argument_is_seq. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!set_lib.check_argument_is_set. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.inv. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.mappings_are_of_valid_size. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.mappings_are_aligned. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.mappings_dont_overlap. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.mappings_in_bounds. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.accepted_mapping. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.valid_mapping. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.map_frame. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.accepted_resolve. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.resolve. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.remove. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.accepted_unmap. FuelId)
(declare-const fuel%main!impl_u.l0.impl&%0.unmap. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.well_formed. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.entry_size. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.num_entries. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.empty. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.pages_match_entry_size. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.directories_are_in_next_layer. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.directories_obey_invariant. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.directories_match_arch. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.directories_are_nonempty. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.frames_aligned. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.inv. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.interp. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.upper_vaddr. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.index_for_vaddr. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.entry_base. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.entry_bounds. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.interp_of_entry. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.interp_aux. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.resolve. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.update. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.candidate_mapping_in_bounds. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.accepted_mapping. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.new_empty_dir. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.map_frame. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.accepted_unmap. FuelId)
(declare-const fuel%main!impl_u.l1.impl&%0.unmap. FuelId)
(declare-const fuel%main!impl_u.l1.result_map_ok. FuelId)
(declare-const fuel%main!impl_u.l1.result_map. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%0.view. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%0.addr_is_zero_padded. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%0.layer. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.well_formed. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.inv. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.entry_at_spec. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.view_at. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_matches_structure. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.empty_at. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.layer_in_range. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.inv_at. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.entry_addrs_are_zero_padded. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_pairwise_disjoint. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_region_notin_used_regions. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_rtrancl. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.interp_at. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.interp_at_entry. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.interp_at_aux. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.interp. FuelId)
(declare-const fuel%main!impl_u.l2_impl.impl&%1.accepted_mapping. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_FLAG_P. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_FLAG_RW. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_FLAG_US. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_FLAG_PWT. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_FLAG_PCD. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_FLAG_A. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_FLAG_XD. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_ADDR. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_PG_FLAG_D. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_PG_FLAG_G. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_PG_FLAG_PAT. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_L2_PG_FLAG_PS. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_L3_PG_FLAG_PAT. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_DIR_ADDR. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_L1_PG_ADDR. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_L2_PG_ADDR. FuelId)
(declare-const fuel%main!impl_u.l2_impl.MASK_L3_PG_ADDR. FuelId)
(declare-const fuel%main!impl_u.l2_impl.addr_is_zero_padded. FuelId)
(declare-const fuel%main!impl_u.indexing.index_from_offset. FuelId)
(declare-const fuel%main!impl_u.indexing.index_from_base_and_addr. FuelId)
(declare-const fuel%main!impl_u.indexing.entry_base_from_index. FuelId)
(declare-const fuel%main!impl_u.indexing.next_entry_base_from_index. FuelId)
(declare-const fuel%main!spec_t.mem.impl&%1.inv. FuelId)
(declare-const fuel%main!spec_t.mem.impl&%1.spec_read. FuelId)
(declare-const fuel%main!definitions_t.impl&%1.contains. FuelId)
(declare-const fuel%main!definitions_t.impl&%2.view. FuelId)
(declare-const fuel%main!definitions_t.impl&%3.view. FuelId)
(declare-const fuel%main!definitions_t.impl&%5.view. FuelId)
(declare-const fuel%main!definitions_t.impl&%6.view. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.entry_size. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.num_entries. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.upper_vaddr. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.inv. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.entry_size_is_next_layer_size. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.contains_entry_size_at_index_atleast. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.contains_entry_size. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.index_for_vaddr. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.entry_base. FuelId)
(declare-const fuel%main!definitions_t.impl&%7.next_entry_base. FuelId)
(declare-const fuel%main!definitions_t.X86_NUM_LAYERS. FuelId)
(declare-const fuel%main!definitions_t.X86_NUM_ENTRIES. FuelId)
(declare-const fuel%main!definitions_t.MAXPHYADDR_BITS. FuelId)
(declare-const fuel%main!definitions_t.MAXPHYADDR. FuelId)
(declare-const fuel%main!definitions_t.WORD_SIZE. FuelId)
(declare-const fuel%main!definitions_t.PAGE_SIZE. FuelId)
(declare-const fuel%main!definitions_t.X86_MAX_ENTRY_SIZE. FuelId)
(declare-const fuel%main!definitions_t.MAX_BASE. FuelId)
(declare-const fuel%main!definitions_t.L3_ENTRY_SIZE. FuelId)
(declare-const fuel%main!definitions_t.L2_ENTRY_SIZE. FuelId)
(declare-const fuel%main!definitions_t.L1_ENTRY_SIZE. FuelId)
(declare-const fuel%main!definitions_t.L0_ENTRY_SIZE. FuelId)
(declare-const fuel%main!definitions_t.aligned. FuelId)
(declare-const fuel%main!definitions_t.between. FuelId)
(declare-const fuel%main!definitions_t.new_seq. FuelId)
(declare-const fuel%main!definitions_t.overlap. FuelId)
(declare-const fuel%main!definitions_t.x86_arch_spec. FuelId)
(assert (distinct fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.result.impl&%0.is_Err. fuel%vstd!std_specs.result.impl&%0.get_Err_0. fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.impl&%0.contains_pair. fuel%vstd!map.impl&%0.union_prefer_right. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.check_argument_is_seq. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.choose. fuel%vstd!set_lib.check_argument_is_set. fuel%main!impl_u.l0.impl&%0.inv. fuel%main!impl_u.l0.impl&%0.mappings_are_of_valid_size. fuel%main!impl_u.l0.impl&%0.mappings_are_aligned. fuel%main!impl_u.l0.impl&%0.mappings_dont_overlap. fuel%main!impl_u.l0.impl&%0.candidate_mapping_in_bounds. fuel%main!impl_u.l0.impl&%0.mappings_in_bounds. fuel%main!impl_u.l0.impl&%0.accepted_mapping. fuel%main!impl_u.l0.impl&%0.valid_mapping. fuel%main!impl_u.l0.impl&%0.map_frame. fuel%main!impl_u.l0.impl&%0.accepted_resolve. fuel%main!impl_u.l0.impl&%0.resolve. fuel%main!impl_u.l0.impl&%0.remove. fuel%main!impl_u.l0.impl&%0.accepted_unmap. fuel%main!impl_u.l0.impl&%0.unmap. fuel%main!impl_u.l1.impl&%0.well_formed. fuel%main!impl_u.l1.impl&%0.entry_size. fuel%main!impl_u.l1.impl&%0.num_entries. fuel%main!impl_u.l1.impl&%0.empty. fuel%main!impl_u.l1.impl&%0.pages_match_entry_size. fuel%main!impl_u.l1.impl&%0.directories_are_in_next_layer. fuel%main!impl_u.l1.impl&%0.directories_obey_invariant. fuel%main!impl_u.l1.impl&%0.directories_match_arch. fuel%main!impl_u.l1.impl&%0.directories_are_nonempty. fuel%main!impl_u.l1.impl&%0.frames_aligned. fuel%main!impl_u.l1.impl&%0.inv. fuel%main!impl_u.l1.impl&%0.interp. fuel%main!impl_u.l1.impl&%0.upper_vaddr. fuel%main!impl_u.l1.impl&%0.index_for_vaddr. fuel%main!impl_u.l1.impl&%0.entry_base. fuel%main!impl_u.l1.impl&%0.entry_bounds. fuel%main!impl_u.l1.impl&%0.interp_of_entry. fuel%main!impl_u.l1.impl&%0.interp_aux. fuel%main!impl_u.l1.impl&%0.resolve. fuel%main!impl_u.l1.impl&%0.update. fuel%main!impl_u.l1.impl&%0.candidate_mapping_in_bounds. fuel%main!impl_u.l1.impl&%0.accepted_mapping. fuel%main!impl_u.l1.impl&%0.new_empty_dir. fuel%main!impl_u.l1.impl&%0.map_frame. fuel%main!impl_u.l1.impl&%0.accepted_unmap. fuel%main!impl_u.l1.impl&%0.unmap. fuel%main!impl_u.l1.result_map_ok. fuel%main!impl_u.l1.result_map. fuel%main!impl_u.l2_impl.impl&%0.view. fuel%main!impl_u.l2_impl.impl&%0.addr_is_zero_padded. fuel%main!impl_u.l2_impl.impl&%0.layer. fuel%main!impl_u.l2_impl.impl&%1.well_formed. fuel%main!impl_u.l2_impl.impl&%1.inv. fuel%main!impl_u.l2_impl.impl&%1.entry_at_spec. fuel%main!impl_u.l2_impl.impl&%1.view_at. fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_matches_structure. fuel%main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at. fuel%main!impl_u.l2_impl.impl&%1.empty_at. fuel%main!impl_u.l2_impl.impl&%1.layer_in_range. fuel%main!impl_u.l2_impl.impl&%1.inv_at. fuel%main!impl_u.l2_impl.impl&%1.entry_addrs_are_zero_padded. fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_pairwise_disjoint. fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_region_notin_used_regions. fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_rtrancl. fuel%main!impl_u.l2_impl.impl&%1.interp_at. fuel%main!impl_u.l2_impl.impl&%1.interp_at_entry. fuel%main!impl_u.l2_impl.impl&%1.interp_at_aux. fuel%main!impl_u.l2_impl.impl&%1.interp. fuel%main!impl_u.l2_impl.impl&%1.accepted_mapping. fuel%main!impl_u.l2_impl.MASK_FLAG_P. fuel%main!impl_u.l2_impl.MASK_FLAG_RW. fuel%main!impl_u.l2_impl.MASK_FLAG_US. fuel%main!impl_u.l2_impl.MASK_FLAG_PWT. fuel%main!impl_u.l2_impl.MASK_FLAG_PCD. fuel%main!impl_u.l2_impl.MASK_FLAG_A. fuel%main!impl_u.l2_impl.MASK_FLAG_XD. fuel%main!impl_u.l2_impl.MASK_ADDR. fuel%main!impl_u.l2_impl.MASK_PG_FLAG_D. fuel%main!impl_u.l2_impl.MASK_PG_FLAG_G. fuel%main!impl_u.l2_impl.MASK_PG_FLAG_PAT. fuel%main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS. fuel%main!impl_u.l2_impl.MASK_L2_PG_FLAG_PS. fuel%main!impl_u.l2_impl.MASK_L3_PG_FLAG_PAT. fuel%main!impl_u.l2_impl.MASK_DIR_ADDR. fuel%main!impl_u.l2_impl.MASK_L1_PG_ADDR. fuel%main!impl_u.l2_impl.MASK_L2_PG_ADDR. fuel%main!impl_u.l2_impl.MASK_L3_PG_ADDR. fuel%main!impl_u.l2_impl.addr_is_zero_padded. fuel%main!impl_u.indexing.index_from_offset. fuel%main!impl_u.indexing.index_from_base_and_addr. fuel%main!impl_u.indexing.entry_base_from_index. fuel%main!impl_u.indexing.next_entry_base_from_index. fuel%main!spec_t.mem.impl&%1.inv. fuel%main!spec_t.mem.impl&%1.spec_read. fuel%main!definitions_t.impl&%1.contains. fuel%main!definitions_t.impl&%2.view. fuel%main!definitions_t.impl&%3.view. fuel%main!definitions_t.impl&%5.view. fuel%main!definitions_t.impl&%6.view. fuel%main!definitions_t.impl&%7.entry_size. fuel%main!definitions_t.impl&%7.num_entries. fuel%main!definitions_t.impl&%7.upper_vaddr. fuel%main!definitions_t.impl&%7.inv. fuel%main!definitions_t.impl&%7.entry_size_is_next_layer_size. fuel%main!definitions_t.impl&%7.contains_entry_size_at_index_atleast. fuel%main!definitions_t.impl&%7.contains_entry_size. fuel%main!definitions_t.impl&%7.index_for_vaddr. fuel%main!definitions_t.impl&%7.entry_base. fuel%main!definitions_t.impl&%7.next_entry_base. fuel%main!definitions_t.X86_NUM_LAYERS. fuel%main!definitions_t.X86_NUM_ENTRIES. fuel%main!definitions_t.MAXPHYADDR_BITS. fuel%main!definitions_t.MAXPHYADDR. fuel%main!definitions_t.WORD_SIZE. fuel%main!definitions_t.PAGE_SIZE. fuel%main!definitions_t.X86_MAX_ENTRY_SIZE. fuel%main!definitions_t.MAX_BASE. fuel%main!definitions_t.L3_ENTRY_SIZE. fuel%main!definitions_t.L2_ENTRY_SIZE. fuel%main!definitions_t.L1_ENTRY_SIZE. fuel%main!definitions_t.L0_ENTRY_SIZE. fuel%main!definitions_t.aligned. fuel%main!definitions_t.between. fuel%main!definitions_t.new_seq. fuel%main!definitions_t.overlap. fuel%main!definitions_t.x86_arch_spec.))
(set-info :comment ";; Datatypes")
(declare-sort alloc!alloc.Global. 0)
(declare-sort alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. 0)
(declare-sort main!spec_t.mem.PageTableMemory. 0)
(declare-sort vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. 0)
(declare-sort vstd!seq.Seq<main!definitions_t.ArchLayer.>. 0)
(declare-sort vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. 0)
(declare-sort vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<main!definitions_t.MemRegion.>. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (main!impl_u.l0.PageTableContents. 0) (main!impl_u.l1.Directory. 0) (main!impl_u.l1.NodeEntry. 0) (main!impl_u.l2_impl.PageDirectoryEntry. 0) (main!impl_u.l2_impl.PTDir. 0) (main!impl_u.l2_impl.PageTable. 0) (main!impl_u.l2_impl.GhostPageDirectoryEntry. 0) (main!definitions_t.MemRegion. 0) (main!definitions_t.MemRegionExec. 0) (main!definitions_t.Flags. 0) (main!definitions_t.PageTableEntry. 0) (main!definitions_t.PageTableEntryExec. 0) (main!definitions_t.ArchLayerExec. 0) (main!definitions_t.ArchExec. 0) (main!definitions_t.ArchLayer. 0) (main!definitions_t.Arch. 0) (main!definitions_t.MapResult. 0) (main!definitions_t.UnmapResult. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?_0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?_0 Poly)) (core!result.Result./Err (core!result.Result./Err/?_0 Poly))) ((main!impl_u.l0.PageTableContents./PageTableContents (main!impl_u.l0.PageTableContents./PageTableContents/?map vstd!map.Map<nat./main!definitions_t.PageTableEntry.>.) (main!impl_u.l0.PageTableContents./PageTableContents/?arch main!definitions_t.Arch.) (main!impl_u.l0.PageTableContents./PageTableContents/?lower Int) (main!impl_u.l0.PageTableContents./PageTableContents/?upper Int))) ((main!impl_u.l1.Directory./Directory (main!impl_u.l1.Directory./Directory/?entries vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (main!impl_u.l1.Directory./Directory/?layer Int) (main!impl_u.l1.Directory./Directory/?base_vaddr Int) (main!impl_u.l1.Directory./Directory/?arch main!definitions_t.Arch.))) ((main!impl_u.l1.NodeEntry./Directory (main!impl_u.l1.NodeEntry./Directory/?_0 main!impl_u.l1.Directory.)) (main!impl_u.l1.NodeEntry./Page (main!impl_u.l1.NodeEntry./Page/?_0 main!definitions_t.PageTableEntry.)) (main!impl_u.l1.NodeEntry./Empty )) ((main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/?entry Int) (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/?layer Int))) ((main!impl_u.l2_impl.PTDir./PTDir (main!impl_u.l2_impl.PTDir./PTDir/?region main!definitions_t.MemRegion.) (main!impl_u.l2_impl.PTDir./PTDir/?entries vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>.) (main!impl_u.l2_impl.PTDir./PTDir/?used_regions vstd!set.Set<main!definitions_t.MemRegion.>.))) ((main!impl_u.l2_impl.PageTable./PageTable (main!impl_u.l2_impl.PageTable./PageTable/?memory main!spec_t.mem.PageTableMemory.) (main!impl_u.l2_impl.PageTable./PageTable/?ghost_pt main!impl_u.l2_impl.PTDir.))) ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?addr Int) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_P Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_RW Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_US Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_PWT Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_PCD Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_A Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_XD Bool)) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?addr Int) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_P Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_RW Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_US Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_PWT Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_PCD Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_A Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_D Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_G Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_PAT Bool) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_XD Bool)) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty )) ((main!definitions_t.MemRegion./MemRegion (main!definitions_t.MemRegion./MemRegion/?base Int) (main!definitions_t.MemRegion./MemRegion/?size Int))) ((main!definitions_t.MemRegionExec./MemRegionExec (main!definitions_t.MemRegionExec./MemRegionExec/?base Int) (main!definitions_t.MemRegionExec./MemRegionExec/?size Int))) ((main!definitions_t.Flags./Flags (main!definitions_t.Flags./Flags/?is_writable Bool) (main!definitions_t.Flags./Flags/?is_supervisor Bool) (main!definitions_t.Flags./Flags/?disable_execute Bool))) ((main!definitions_t.PageTableEntry./PageTableEntry (main!definitions_t.PageTableEntry./PageTableEntry/?frame main!definitions_t.MemRegion.) (main!definitions_t.PageTableEntry./PageTableEntry/?flags main!definitions_t.Flags.))) ((main!definitions_t.PageTableEntryExec./PageTableEntryExec (main!definitions_t.PageTableEntryExec./PageTableEntryExec/?frame main!definitions_t.MemRegionExec.) (main!definitions_t.PageTableEntryExec./PageTableEntryExec/?flags main!definitions_t.Flags.))) ((main!definitions_t.ArchLayerExec./ArchLayerExec (main!definitions_t.ArchLayerExec./ArchLayerExec/?entry_size Int) (main!definitions_t.ArchLayerExec./ArchLayerExec/?num_entries Int))) ((main!definitions_t.ArchExec./ArchExec (main!definitions_t.ArchExec./ArchExec/?layers alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>.))) ((main!definitions_t.ArchLayer./ArchLayer (main!definitions_t.ArchLayer./ArchLayer/?entry_size Int) (main!definitions_t.ArchLayer./ArchLayer/?num_entries Int))) ((main!definitions_t.Arch./Arch (main!definitions_t.Arch./Arch/?layers vstd!seq.Seq<main!definitions_t.ArchLayer.>.))) ((main!definitions_t.MapResult./ErrOverlap ) (main!definitions_t.MapResult./Ok )) ((main!definitions_t.UnmapResult./ErrNoSuchMapping ) (main!definitions_t.UnmapResult./Ok )) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?field%0 Poly) (tuple%2./tuple%2/?field%1 Poly)))))
(declare-fun core!option.Option./Some/_0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/_0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/_0 (core!result.Result.) Poly)
(declare-fun main!impl_u.l0.PageTableContents./PageTableContents/map (main!impl_u.l0.PageTableContents.) vstd!map.Map<nat./main!definitions_t.PageTableEntry.>.)
(declare-fun main!impl_u.l0.PageTableContents./PageTableContents/arch (main!impl_u.l0.PageTableContents.) main!definitions_t.Arch.)
(declare-fun main!impl_u.l0.PageTableContents./PageTableContents/lower (main!impl_u.l0.PageTableContents.) Int)
(declare-fun main!impl_u.l0.PageTableContents./PageTableContents/upper (main!impl_u.l0.PageTableContents.) Int)
(declare-fun main!impl_u.l1.Directory./Directory/entries (main!impl_u.l1.Directory.) vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-fun main!impl_u.l1.Directory./Directory/layer (main!impl_u.l1.Directory.) Int)
(declare-fun main!impl_u.l1.Directory./Directory/base_vaddr (main!impl_u.l1.Directory.) Int)
(declare-fun main!impl_u.l1.Directory./Directory/arch (main!impl_u.l1.Directory.) main!definitions_t.Arch.)
(declare-fun main!impl_u.l1.NodeEntry./Directory/_0 (main!impl_u.l1.NodeEntry.) main!impl_u.l1.Directory.)
(declare-fun main!impl_u.l1.NodeEntry./Page/_0 (main!impl_u.l1.NodeEntry.) main!definitions_t.PageTableEntry.)
(declare-fun main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (main!impl_u.l2_impl.PageDirectoryEntry.) Int)
(declare-fun main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (main!impl_u.l2_impl.PageDirectoryEntry.) Int)
(declare-fun main!impl_u.l2_impl.PTDir./PTDir/region (main!impl_u.l2_impl.PTDir.) main!definitions_t.MemRegion.)
(declare-fun main!impl_u.l2_impl.PTDir./PTDir/entries (main!impl_u.l2_impl.PTDir.) vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>.)
(declare-fun main!impl_u.l2_impl.PTDir./PTDir/used_regions (main!impl_u.l2_impl.PTDir.) vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-fun main!impl_u.l2_impl.PageTable./PageTable/memory (main!impl_u.l2_impl.PageTable.) main!spec_t.mem.PageTableMemory.)
(declare-fun main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (main!impl_u.l2_impl.PageTable.) main!impl_u.l2_impl.PTDir.)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Int)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_P (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_RW (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_US (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PWT (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PCD (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_A (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_XD (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Int)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_P (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_RW (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_US (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PWT (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PCD (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_A (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_D (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_G (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PAT (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_XD (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Bool)
(declare-fun main!definitions_t.MemRegion./MemRegion/base (main!definitions_t.MemRegion.) Int)
(declare-fun main!definitions_t.MemRegion./MemRegion/size (main!definitions_t.MemRegion.) Int)
(declare-fun main!definitions_t.MemRegionExec./MemRegionExec/base (main!definitions_t.MemRegionExec.) Int)
(declare-fun main!definitions_t.MemRegionExec./MemRegionExec/size (main!definitions_t.MemRegionExec.) Int)
(declare-fun main!definitions_t.Flags./Flags/is_writable (main!definitions_t.Flags.) Bool)
(declare-fun main!definitions_t.Flags./Flags/is_supervisor (main!definitions_t.Flags.) Bool)
(declare-fun main!definitions_t.Flags./Flags/disable_execute (main!definitions_t.Flags.) Bool)
(declare-fun main!definitions_t.PageTableEntry./PageTableEntry/frame (main!definitions_t.PageTableEntry.) main!definitions_t.MemRegion.)
(declare-fun main!definitions_t.PageTableEntry./PageTableEntry/flags (main!definitions_t.PageTableEntry.) main!definitions_t.Flags.)
(declare-fun main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (main!definitions_t.PageTableEntryExec.) main!definitions_t.MemRegionExec.)
(declare-fun main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (main!definitions_t.PageTableEntryExec.) main!definitions_t.Flags.)
(declare-fun main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (main!definitions_t.ArchLayerExec.) Int)
(declare-fun main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (main!definitions_t.ArchLayerExec.) Int)
(declare-fun main!definitions_t.ArchExec./ArchExec/layers (main!definitions_t.ArchExec.) alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>.)
(declare-fun main!definitions_t.ArchLayer./ArchLayer/entry_size (main!definitions_t.ArchLayer.) Int)
(declare-fun main!definitions_t.ArchLayer./ArchLayer/num_entries (main!definitions_t.ArchLayer.) Int)
(declare-fun main!definitions_t.Arch./Arch/layers (main!definitions_t.Arch.) vstd!seq.Seq<main!definitions_t.ArchLayer.>.)
(declare-fun tuple%2./tuple%2/field%0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/field%1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Type Type) Type)
(declare-fun TYPE%fun%2. (Type Type Type) Type)
(declare-fun TYPE%core!option.Option. (Type) Type)
(declare-fun TYPE%core!result.Result. (Type Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Type Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-fun TYPE%vstd!map.Map. (Type Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Type) Type)
(declare-fun TYPE%vstd!set.Set. (Type) Type)
(declare-const TYPE%main!impl_u.l0.PageTableContents. Type)
(declare-const TYPE%main!impl_u.l1.Directory. Type)
(declare-const TYPE%main!impl_u.l1.NodeEntry. Type)
(declare-const TYPE%main!impl_u.l2_impl.PageDirectoryEntry. Type)
(declare-const TYPE%main!impl_u.l2_impl.PTDir. Type)
(declare-const TYPE%main!impl_u.l2_impl.PageTable. Type)
(declare-const TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry. Type)
(declare-const TYPE%main!spec_t.mem.PageTableMemory. Type)
(declare-const TYPE%main!definitions_t.MemRegion. Type)
(declare-const TYPE%main!definitions_t.MemRegionExec. Type)
(declare-const TYPE%main!definitions_t.Flags. Type)
(declare-const TYPE%main!definitions_t.PageTableEntry. Type)
(declare-const TYPE%main!definitions_t.PageTableEntryExec. Type)
(declare-const TYPE%main!definitions_t.ArchLayerExec. Type)
(declare-const TYPE%main!definitions_t.ArchExec. Type)
(declare-const TYPE%main!definitions_t.ArchLayer. Type)
(declare-const TYPE%main!definitions_t.Arch. Type)
(declare-const TYPE%main!definitions_t.MapResult. Type)
(declare-const TYPE%main!definitions_t.UnmapResult. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Type Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. (alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>.)
(declare-fun Poly%main!spec_t.mem.PageTableMemory. (main!spec_t.mem.PageTableMemory.) Poly)
(declare-fun %Poly%main!spec_t.mem.PageTableMemory. (Poly) main!spec_t.mem.PageTableMemory.)
(declare-fun Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (vstd!map.Map<nat./main!definitions_t.PageTableEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (Poly) vstd!map.Map<nat./main!definitions_t.PageTableEntry.>.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (Poly) vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>.)
(declare-fun Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (vstd!seq.Seq<main!definitions_t.ArchLayer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (Poly) vstd!seq.Seq<main!definitions_t.ArchLayer.>.)
(declare-fun Poly%vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. (vstd!seq.Seq<main!definitions_t.ArchLayerExec.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. (Poly) vstd!seq.Seq<main!definitions_t.ArchLayerExec.>.)
(declare-fun Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (Poly) vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.Set<main!definitions_t.MemRegion.>.) Poly)
(declare-fun %Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (Poly) vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l0.PageTableContents.) Poly)
(declare-fun %Poly%main!impl_u.l0.PageTableContents. (Poly) main!impl_u.l0.PageTableContents.)
(declare-fun Poly%main!impl_u.l1.Directory. (main!impl_u.l1.Directory.) Poly)
(declare-fun %Poly%main!impl_u.l1.Directory. (Poly) main!impl_u.l1.Directory.)
(declare-fun Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry.) Poly)
(declare-fun %Poly%main!impl_u.l1.NodeEntry. (Poly) main!impl_u.l1.NodeEntry.)
(declare-fun Poly%main!impl_u.l2_impl.PageDirectoryEntry. (main!impl_u.l2_impl.PageDirectoryEntry.) Poly)
(declare-fun %Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly) main!impl_u.l2_impl.PageDirectoryEntry.)
(declare-fun Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PTDir.) Poly)
(declare-fun %Poly%main!impl_u.l2_impl.PTDir. (Poly) main!impl_u.l2_impl.PTDir.)
(declare-fun Poly%main!impl_u.l2_impl.PageTable. (main!impl_u.l2_impl.PageTable.) Poly)
(declare-fun %Poly%main!impl_u.l2_impl.PageTable. (Poly) main!impl_u.l2_impl.PageTable.)
(declare-fun Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.GhostPageDirectoryEntry.) Poly)
(declare-fun %Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly) main!impl_u.l2_impl.GhostPageDirectoryEntry.)
(declare-fun Poly%main!definitions_t.MemRegion. (main!definitions_t.MemRegion.) Poly)
(declare-fun %Poly%main!definitions_t.MemRegion. (Poly) main!definitions_t.MemRegion.)
(declare-fun Poly%main!definitions_t.MemRegionExec. (main!definitions_t.MemRegionExec.) Poly)
(declare-fun %Poly%main!definitions_t.MemRegionExec. (Poly) main!definitions_t.MemRegionExec.)
(declare-fun Poly%main!definitions_t.Flags. (main!definitions_t.Flags.) Poly)
(declare-fun %Poly%main!definitions_t.Flags. (Poly) main!definitions_t.Flags.)
(declare-fun Poly%main!definitions_t.PageTableEntry. (main!definitions_t.PageTableEntry.) Poly)
(declare-fun %Poly%main!definitions_t.PageTableEntry. (Poly) main!definitions_t.PageTableEntry.)
(declare-fun Poly%main!definitions_t.PageTableEntryExec. (main!definitions_t.PageTableEntryExec.) Poly)
(declare-fun %Poly%main!definitions_t.PageTableEntryExec. (Poly) main!definitions_t.PageTableEntryExec.)
(declare-fun Poly%main!definitions_t.ArchLayerExec. (main!definitions_t.ArchLayerExec.) Poly)
(declare-fun %Poly%main!definitions_t.ArchLayerExec. (Poly) main!definitions_t.ArchLayerExec.)
(declare-fun Poly%main!definitions_t.ArchExec. (main!definitions_t.ArchExec.) Poly)
(declare-fun %Poly%main!definitions_t.ArchExec. (Poly) main!definitions_t.ArchExec.)
(declare-fun Poly%main!definitions_t.ArchLayer. (main!definitions_t.ArchLayer.) Poly)
(declare-fun %Poly%main!definitions_t.ArchLayer. (Poly) main!definitions_t.ArchLayer.)
(declare-fun Poly%main!definitions_t.Arch. (main!definitions_t.Arch.) Poly)
(declare-fun %Poly%main!definitions_t.Arch. (Poly) main!definitions_t.Arch.)
(declare-fun Poly%main!definitions_t.MapResult. (main!definitions_t.MapResult.) Poly)
(declare-fun %Poly%main!definitions_t.MapResult. (Poly) main!definitions_t.MapResult.)
(declare-fun Poly%main!definitions_t.UnmapResult. (main!definitions_t.UnmapResult.) Poly)
(declare-fun %Poly%main!definitions_t.UnmapResult. (Poly) main!definitions_t.UnmapResult.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x@ %%Function%%)) (! (= x@ (%Poly%fun%1. (Poly%fun%1. x@))) :pattern ((Poly%fun%1. x@)) :qid internal_crate__fun__1_box_axiom_definition :skolemid skolem_internal_crate__fun__1_box_axiom_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%fun%1. T%0& T%1&)) (= x@ (Poly%fun%1. (%Poly%fun%1. x@)))) :pattern ((has_type x@ (TYPE%fun%1. T%0& T%1&))) :qid internal_crate__fun__1_unbox_axiom_definition :skolemid skolem_internal_crate__fun__1_unbox_axiom_definition)))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0& Type) (T%1& Type) (x@ %%Function%%)) (! (=> (forall ((T%0@ Poly)) (! (=> (has_type T%0@ T%0&) (has_type (%%apply%%0 x@ T%0@) T%1&)) :pattern ((has_type (%%apply%%0 x@ T%0@) T%1&)) :qid internal_crate__fun__1_constructor_inner_definition :skolemid skolem_internal_crate__fun__1_constructor_inner_definition)) (has_type (Poly%fun%1. (mk_fun x@)) (TYPE%fun%1. T%0& T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x@)) (TYPE%fun%1. T%0& T%1&))) :qid internal_crate__fun__1_constructor_definition :skolemid skolem_internal_crate__fun__1_constructor_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (T%0@ Poly) (x@ %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x@) (TYPE%fun%1. T%0& T%1&)) (has_type T%0@ T%0&)) (has_type (%%apply%%0 x@ T%0@) T%1&)) :pattern ((%%apply%%0 x@ T%0@) (has_type (Poly%fun%1. x@) (TYPE%fun%1. T%0& T%1&))) :qid internal_crate__fun__1_apply_definition :skolemid skolem_internal_crate__fun__1_apply_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (T%0@ Poly) (x@ %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x@) (TYPE%fun%1. T%0& T%1&)) (has_type T%0@ T%0&)) (height_lt (height (%%apply%%0 x@ T%0@)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x@)))))) :pattern ((height (%%apply%%0 x@ T%0@)) (has_type (Poly%fun%1. x@) (TYPE%fun%1. T%0& T%1&))) :qid internal_crate__fun__1_height_apply_definition :skolemid skolem_internal_crate__fun__1_height_apply_definition)))
(assert (forall ((T%0& Type) (T%0&. Type) (T%1& Type) (T%1&. Type) (deep@ Bool) (x@ Poly) (y@ Poly)) (! (=> (and (has_type x@ (TYPE%fun%1. T%0& T%1&)) (has_type y@ (TYPE%fun%1. T%0& T%1&)) (forall ((T%0@ Poly)) (! (=> (has_type T%0@ T%0&) (ext_eq deep@ T%1& T%1&. (%%apply%%0 (%Poly%fun%1. x@) T%0@) (%%apply%%0 (%Poly%fun%1. y@) T%0@))) :pattern ((ext_eq deep@ T%1& T%1&. (%%apply%%0 (%Poly%fun%1. x@) T%0@) (%%apply%%0 (%Poly%fun%1. y@) T%0@))) :qid internal_crate__fun__1_inner_ext_equal_definition :skolemid skolem_internal_crate__fun__1_inner_ext_equal_definition))) (ext_eq deep@ (TYPE%fun%1. T%0& T%1&) (TYPE%fun%1. T%0&. T%1&.) x@ y@)) :pattern ((ext_eq deep@ (TYPE%fun%1. T%0& T%1&) (TYPE%fun%1. T%0&. T%1&.) x@ y@)) :qid internal_crate__fun__1_ext_equal_definition :skolemid skolem_internal_crate__fun__1_ext_equal_definition)))
(assert (forall ((x@ %%Function%%)) (! (= x@ (%Poly%fun%2. (Poly%fun%2. x@))) :pattern ((Poly%fun%2. x@)) :qid internal_crate__fun__2_box_axiom_definition :skolemid skolem_internal_crate__fun__2_box_axiom_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (T%2& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%fun%2. T%0& T%1& T%2&)) (= x@ (Poly%fun%2. (%Poly%fun%2. x@)))) :pattern ((has_type x@ (TYPE%fun%2. T%0& T%1& T%2&))) :qid internal_crate__fun__2_unbox_axiom_definition :skolemid skolem_internal_crate__fun__2_unbox_axiom_definition)))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0& Type) (T%1& Type) (T%2& Type) (x@ %%Function%%)) (! (=> (forall ((T%0@ Poly) (T%1@ Poly)) (! (=> (and (has_type T%0@ T%0&) (has_type T%1@ T%1&)) (has_type (%%apply%%1 x@ T%0@ T%1@) T%2&)) :pattern ((has_type (%%apply%%1 x@ T%0@ T%1@) T%2&)) :qid internal_crate__fun__2_constructor_inner_definition :skolemid skolem_internal_crate__fun__2_constructor_inner_definition)) (has_type (Poly%fun%2. (mk_fun x@)) (TYPE%fun%2. T%0& T%1& T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x@)) (TYPE%fun%2. T%0& T%1& T%2&))) :qid internal_crate__fun__2_constructor_definition :skolemid skolem_internal_crate__fun__2_constructor_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (T%2& Type) (T%0@ Poly) (T%1@ Poly) (x@ %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x@) (TYPE%fun%2. T%0& T%1& T%2&)) (has_type T%0@ T%0&) (has_type T%1@ T%1&)) (has_type (%%apply%%1 x@ T%0@ T%1@) T%2&)) :pattern ((%%apply%%1 x@ T%0@ T%1@) (has_type (Poly%fun%2. x@) (TYPE%fun%2. T%0& T%1& T%2&))) :qid internal_crate__fun__2_apply_definition :skolemid skolem_internal_crate__fun__2_apply_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (T%2& Type) (T%0@ Poly) (T%1@ Poly) (x@ %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x@) (TYPE%fun%2. T%0& T%1& T%2&)) (has_type T%0@ T%0&) (has_type T%1@ T%1&)) (height_lt (height (%%apply%%1 x@ T%0@ T%1@)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x@)))))) :pattern ((height (%%apply%%1 x@ T%0@ T%1@)) (has_type (Poly%fun%2. x@) (TYPE%fun%2. T%0& T%1& T%2&))) :qid internal_crate__fun__2_height_apply_definition :skolemid skolem_internal_crate__fun__2_height_apply_definition)))
(assert (forall ((T%0& Type) (T%0&. Type) (T%1& Type) (T%1&. Type) (T%2& Type) (T%2&. Type) (deep@ Bool) (x@ Poly) (y@ Poly)) (! (=> (and (has_type x@ (TYPE%fun%2. T%0& T%1& T%2&)) (has_type y@ (TYPE%fun%2. T%0& T%1& T%2&)) (forall ((T%0@ Poly) (T%1@ Poly)) (! (=> (and (has_type T%0@ T%0&) (has_type T%1@ T%1&)) (ext_eq deep@ T%2& T%2&. (%%apply%%1 (%Poly%fun%2. x@) T%0@ T%1@) (%%apply%%1 (%Poly%fun%2. y@) T%0@ T%1@))) :pattern ((ext_eq deep@ T%2& T%2&. (%%apply%%1 (%Poly%fun%2. x@) T%0@ T%1@) (%%apply%%1 (%Poly%fun%2. y@) T%0@ T%1@))) :qid internal_crate__fun__2_inner_ext_equal_definition :skolemid skolem_internal_crate__fun__2_inner_ext_equal_definition))) (ext_eq deep@ (TYPE%fun%2. T%0& T%1& T%2&) (TYPE%fun%2. T%0&. T%1&. T%2&.) x@ y@)) :pattern ((ext_eq deep@ (TYPE%fun%2. T%0& T%1& T%2&) (TYPE%fun%2. T%0&. T%1&. T%2&.) x@ y@)) :qid internal_crate__fun__2_ext_equal_definition :skolemid skolem_internal_crate__fun__2_ext_equal_definition)))
(assert (forall ((x@ alloc!alloc.Global.)) (! (= x@ (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x@))) :pattern ((Poly%alloc!alloc.Global. x@)) :qid internal_alloc__alloc__Global_box_axiom_definition :skolemid skolem_internal_alloc__alloc__Global_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%alloc!alloc.Global.) (= x@ (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x@)))) :pattern ((has_type x@ TYPE%alloc!alloc.Global.)) :qid internal_alloc__alloc__Global_unbox_axiom_definition :skolemid skolem_internal_alloc__alloc__Global_unbox_axiom_definition)))
(assert (forall ((x@ alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x@) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x@) TYPE%alloc!alloc.Global.)) :qid internal_alloc__alloc__Global_has_type_always_definition :skolemid skolem_internal_alloc__alloc__Global_has_type_always_definition)))
(assert (forall ((x@ alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>.)) (! (= x@ (%Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. x@))) :pattern ((Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. x@)) :qid internal_alloc__vec__Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>_box_axiom_definition :skolemid skolem_internal_alloc__vec__Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ (TYPE%alloc!vec.Vec. TYPE%main!definitions_t.ArchLayerExec. TYPE%alloc!alloc.Global.)) (= x@ (Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. x@)))) :pattern ((has_type x@ (TYPE%alloc!vec.Vec. TYPE%main!definitions_t.ArchLayerExec. TYPE%alloc!alloc.Global.))) :qid internal_alloc__vec__Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>_unbox_axiom_definition :skolemid skolem_internal_alloc__vec__Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>_unbox_axiom_definition)))
(assert (forall ((x@ alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. x@) (TYPE%alloc!vec.Vec. TYPE%main!definitions_t.ArchLayerExec. TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. x@) (TYPE%alloc!vec.Vec. TYPE%main!definitions_t.ArchLayerExec. TYPE%alloc!alloc.Global.))) :qid internal_alloc__vec__Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>_has_type_always_definition :skolemid skolem_internal_alloc__vec__Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>_has_type_always_definition)))
(assert (forall ((x@ main!spec_t.mem.PageTableMemory.)) (! (= x@ (%Poly%main!spec_t.mem.PageTableMemory. (Poly%main!spec_t.mem.PageTableMemory. x@))) :pattern ((Poly%main!spec_t.mem.PageTableMemory. x@)) :qid internal_main__spec_t__mem__PageTableMemory_box_axiom_definition :skolemid skolem_internal_main__spec_t__mem__PageTableMemory_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!spec_t.mem.PageTableMemory.) (= x@ (Poly%main!spec_t.mem.PageTableMemory. (%Poly%main!spec_t.mem.PageTableMemory. x@)))) :pattern ((has_type x@ TYPE%main!spec_t.mem.PageTableMemory.)) :qid internal_main__spec_t__mem__PageTableMemory_unbox_axiom_definition :skolemid skolem_internal_main__spec_t__mem__PageTableMemory_unbox_axiom_definition)))
(assert (forall ((x@ main!spec_t.mem.PageTableMemory.)) (! (has_type (Poly%main!spec_t.mem.PageTableMemory. x@) TYPE%main!spec_t.mem.PageTableMemory.) :pattern ((has_type (Poly%main!spec_t.mem.PageTableMemory. x@) TYPE%main!spec_t.mem.PageTableMemory.)) :qid internal_main__spec_t__mem__PageTableMemory_has_type_always_definition :skolemid skolem_internal_main__spec_t__mem__PageTableMemory_has_type_always_definition)))
(assert (forall ((x@ vstd!map.Map<nat./main!definitions_t.PageTableEntry.>.)) (! (= x@ (%Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. x@))) :pattern ((Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. x@)) :qid internal_vstd__map__Map<nat./main!definitions_t.PageTableEntry.>_box_axiom_definition :skolemid skolem_internal_vstd__map__Map<nat./main!definitions_t.PageTableEntry.>_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ (TYPE%vstd!map.Map. NAT TYPE%main!definitions_t.PageTableEntry.)) (= x@ (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (%Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. x@)))) :pattern ((has_type x@ (TYPE%vstd!map.Map. NAT TYPE%main!definitions_t.PageTableEntry.))) :qid internal_vstd__map__Map<nat./main!definitions_t.PageTableEntry.>_unbox_axiom_definition :skolemid skolem_internal_vstd__map__Map<nat./main!definitions_t.PageTableEntry.>_unbox_axiom_definition)))
(assert (forall ((x@ vstd!map.Map<nat./main!definitions_t.PageTableEntry.>.)) (! (has_type (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. x@) (TYPE%vstd!map.Map. NAT TYPE%main!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. x@) (TYPE%vstd!map.Map. NAT TYPE%main!definitions_t.PageTableEntry.))) :qid internal_vstd__map__Map<nat./main!definitions_t.PageTableEntry.>_has_type_always_definition :skolemid skolem_internal_vstd__map__Map<nat./main!definitions_t.PageTableEntry.>_has_type_always_definition)))
(assert (forall ((x@ vstd!seq.Seq<u64.>.)) (! (= x@ (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x@))) :pattern ((Poly%vstd!seq.Seq<u64.>. x@)) :qid internal_vstd__seq__Seq<u64.>_box_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<u64.>_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ (TYPE%vstd!seq.Seq. (UINT 64))) (= x@ (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x@)))) :pattern ((has_type x@ (TYPE%vstd!seq.Seq. (UINT 64)))) :qid internal_vstd__seq__Seq<u64.>_unbox_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<u64.>_unbox_axiom_definition)))
(assert (forall ((x@ vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x@) (TYPE%vstd!seq.Seq. (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x@) (TYPE%vstd!seq.Seq. (UINT 64)))) :qid internal_vstd__seq__Seq<u64.>_has_type_always_definition :skolemid skolem_internal_vstd__seq__Seq<u64.>_has_type_always_definition)))
(assert (forall ((x@ vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>.)) (! (= x@ (%Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. x@))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. x@)) :qid internal_vstd__seq__Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>_box_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ (TYPE%vstd!seq.Seq. (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.))) (= x@ (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (%Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. x@)))) :pattern ((has_type x@ (TYPE%vstd!seq.Seq. (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.)))) :qid internal_vstd__seq__Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>_unbox_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>_unbox_axiom_definition)))
(assert (forall ((x@ vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. x@) (TYPE%vstd!seq.Seq. (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. x@) (TYPE%vstd!seq.Seq. (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.)))) :qid internal_vstd__seq__Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>_has_type_always_definition :skolemid skolem_internal_vstd__seq__Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>_has_type_always_definition)))
(assert (forall ((x@ vstd!seq.Seq<main!definitions_t.ArchLayer.>.)) (! (= x@ (%Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. x@))) :pattern ((Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. x@)) :qid internal_vstd__seq__Seq<main!definitions_t.ArchLayer.>_box_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<main!definitions_t.ArchLayer.>_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ (TYPE%vstd!seq.Seq. TYPE%main!definitions_t.ArchLayer.)) (= x@ (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (%Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. x@)))) :pattern ((has_type x@ (TYPE%vstd!seq.Seq. TYPE%main!definitions_t.ArchLayer.))) :qid internal_vstd__seq__Seq<main!definitions_t.ArchLayer.>_unbox_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<main!definitions_t.ArchLayer.>_unbox_axiom_definition)))
(assert (forall ((x@ vstd!seq.Seq<main!definitions_t.ArchLayer.>.)) (! (has_type (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. x@) (TYPE%vstd!seq.Seq. TYPE%main!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. x@) (TYPE%vstd!seq.Seq. TYPE%main!definitions_t.ArchLayer.))) :qid internal_vstd__seq__Seq<main!definitions_t.ArchLayer.>_has_type_always_definition :skolemid skolem_internal_vstd__seq__Seq<main!definitions_t.ArchLayer.>_has_type_always_definition)))
(assert (forall ((x@ vstd!seq.Seq<main!definitions_t.ArchLayerExec.>.)) (! (= x@ (%Poly%vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. x@))) :pattern ((Poly%vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. x@)) :qid internal_vstd__seq__Seq<main!definitions_t.ArchLayerExec.>_box_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<main!definitions_t.ArchLayerExec.>_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ (TYPE%vstd!seq.Seq. TYPE%main!definitions_t.ArchLayerExec.)) (= x@ (Poly%vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. (%Poly%vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. x@)))) :pattern ((has_type x@ (TYPE%vstd!seq.Seq. TYPE%main!definitions_t.ArchLayerExec.))) :qid internal_vstd__seq__Seq<main!definitions_t.ArchLayerExec.>_unbox_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<main!definitions_t.ArchLayerExec.>_unbox_axiom_definition)))
(assert (forall ((x@ vstd!seq.Seq<main!definitions_t.ArchLayerExec.>.)) (! (has_type (Poly%vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. x@) (TYPE%vstd!seq.Seq. TYPE%main!definitions_t.ArchLayerExec.)) :pattern ((has_type (Poly%vstd!seq.Seq<main!definitions_t.ArchLayerExec.>. x@) (TYPE%vstd!seq.Seq. TYPE%main!definitions_t.ArchLayerExec.))) :qid internal_vstd__seq__Seq<main!definitions_t.ArchLayerExec.>_has_type_always_definition :skolemid skolem_internal_vstd__seq__Seq<main!definitions_t.ArchLayerExec.>_has_type_always_definition)))
(assert (forall ((x@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)) (! (= x@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. x@))) :pattern ((Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. x@)) :qid internal_vstd__seq__Seq<main!impl_u.l1.NodeEntry.>_box_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<main!impl_u.l1.NodeEntry.>_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.)) (= x@ (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. x@)))) :pattern ((has_type x@ (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.))) :qid internal_vstd__seq__Seq<main!impl_u.l1.NodeEntry.>_unbox_axiom_definition :skolemid skolem_internal_vstd__seq__Seq<main!impl_u.l1.NodeEntry.>_unbox_axiom_definition)))
(assert (forall ((x@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)) (! (has_type (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. x@) (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. x@) (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.))) :qid internal_vstd__seq__Seq<main!impl_u.l1.NodeEntry.>_has_type_always_definition :skolemid skolem_internal_vstd__seq__Seq<main!impl_u.l1.NodeEntry.>_has_type_always_definition)))
(assert (forall ((x@ vstd!set.Set<nat.>.)) (! (= x@ (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x@))) :pattern ((Poly%vstd!set.Set<nat.>. x@)) :qid internal_vstd__set__Set<nat.>_box_axiom_definition :skolemid skolem_internal_vstd__set__Set<nat.>_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ (TYPE%vstd!set.Set. NAT)) (= x@ (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x@)))) :pattern ((has_type x@ (TYPE%vstd!set.Set. NAT))) :qid internal_vstd__set__Set<nat.>_unbox_axiom_definition :skolemid skolem_internal_vstd__set__Set<nat.>_unbox_axiom_definition)))
(assert (forall ((x@ vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x@) (TYPE%vstd!set.Set. NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x@) (TYPE%vstd!set.Set. NAT))) :qid internal_vstd__set__Set<nat.>_has_type_always_definition :skolemid skolem_internal_vstd__set__Set<nat.>_has_type_always_definition)))
(assert (forall ((x@ vstd!set.Set<main!definitions_t.MemRegion.>.)) (! (= x@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. x@))) :pattern ((Poly%vstd!set.Set<main!definitions_t.MemRegion.>. x@)) :qid internal_vstd__set__Set<main!definitions_t.MemRegion.>_box_axiom_definition :skolemid skolem_internal_vstd__set__Set<main!definitions_t.MemRegion.>_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.)) (= x@ (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. x@)))) :pattern ((has_type x@ (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.))) :qid internal_vstd__set__Set<main!definitions_t.MemRegion.>_unbox_axiom_definition :skolemid skolem_internal_vstd__set__Set<main!definitions_t.MemRegion.>_unbox_axiom_definition)))
(assert (forall ((x@ vstd!set.Set<main!definitions_t.MemRegion.>.)) (! (has_type (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. x@) (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.)) :pattern ((has_type (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. x@) (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.))) :qid internal_vstd__set__Set<main!definitions_t.MemRegion.>_has_type_always_definition :skolemid skolem_internal_vstd__set__Set<main!definitions_t.MemRegion.>_has_type_always_definition)))
(assert (forall ((x@ core!option.Option.)) (! (= x@ (%Poly%core!option.Option. (Poly%core!option.Option. x@))) :pattern ((Poly%core!option.Option. x@)) :qid internal_core__option__Option_box_axiom_definition :skolemid skolem_internal_core__option__Option_box_axiom_definition)))
(assert (forall ((V& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%core!option.Option. V&)) (= x@ (Poly%core!option.Option. (%Poly%core!option.Option. x@)))) :pattern ((has_type x@ (TYPE%core!option.Option. V&))) :qid internal_core__option__Option_unbox_axiom_definition :skolemid skolem_internal_core__option__Option_unbox_axiom_definition)))
(assert (forall ((V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&))) :qid internal_core!option.Option./None_constructor_definition :skolemid skolem_internal_core!option.Option./None_constructor_definition)))
(assert (forall ((V& Type) (_0@ Poly)) (! (=> (has_type _0@ V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0@)) (TYPE%core!option.Option. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0@)) (TYPE%core!option.Option. V&))) :qid internal_core!option.Option./Some_constructor_definition :skolemid skolem_internal_core!option.Option./Some_constructor_definition)))
(assert (forall ((x@ core!option.Option.)) (! (= (core!option.Option./Some/_0 x@) (core!option.Option./Some/?_0 x@)) :pattern ((core!option.Option./Some/_0 x@)) :qid internal_core!option.Option./Some/_0_accessor_definition :skolemid skolem_internal_core!option.Option./Some/_0_accessor_definition)))
(assert (forall ((V& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%core!option.Option. V&)) (has_type (core!option.Option./Some/_0 (%Poly%core!option.Option. x@)) V&)) :pattern ((core!option.Option./Some/_0 (%Poly%core!option.Option. x@)) (has_type x@ (TYPE%core!option.Option. V&))) :qid internal_core!option.Option./Some/_0_invariant_definition :skolemid skolem_internal_core!option.Option./Some/_0_invariant_definition)))
(assert (forall ((x core!option.Option.)) (! (=> ((_ is core!option.Option./Some) x) (height_lt (height (core!option.Option./Some/_0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/_0 x))) :qid prelude_datatype_height :skolemid skolem_prelude_datatype_height)))
(assert (forall ((x@ core!result.Result.)) (! (= x@ (%Poly%core!result.Result. (Poly%core!result.Result. x@))) :pattern ((Poly%core!result.Result. x@)) :qid internal_core__result__Result_box_axiom_definition :skolemid skolem_internal_core__result__Result_box_axiom_definition)))
(assert (forall ((T& Type) (E& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%core!result.Result. T& E&)) (= x@ (Poly%core!result.Result. (%Poly%core!result.Result. x@)))) :pattern ((has_type x@ (TYPE%core!result.Result. T& E&))) :qid internal_core__result__Result_unbox_axiom_definition :skolemid skolem_internal_core__result__Result_unbox_axiom_definition)))
(assert (forall ((T& Type) (E& Type) (_0@ Poly)) (! (=> (has_type _0@ T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0@)) (TYPE%core!result.Result. T& E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0@)) (TYPE%core!result.Result. T& E&))) :qid internal_core!result.Result./Ok_constructor_definition :skolemid skolem_internal_core!result.Result./Ok_constructor_definition)))
(assert (forall ((x@ core!result.Result.)) (! (= (core!result.Result./Ok/_0 x@) (core!result.Result./Ok/?_0 x@)) :pattern ((core!result.Result./Ok/_0 x@)) :qid internal_core!result.Result./Ok/_0_accessor_definition :skolemid skolem_internal_core!result.Result./Ok/_0_accessor_definition)))
(assert (forall ((T& Type) (E& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%core!result.Result. T& E&)) (has_type (core!result.Result./Ok/_0 (%Poly%core!result.Result. x@)) T&)) :pattern ((core!result.Result./Ok/_0 (%Poly%core!result.Result. x@)) (has_type x@ (TYPE%core!result.Result. T& E&))) :qid internal_core!result.Result./Ok/_0_invariant_definition :skolemid skolem_internal_core!result.Result./Ok/_0_invariant_definition)))
(assert (forall ((T& Type) (E& Type) (_0@ Poly)) (! (=> (has_type _0@ E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0@)) (TYPE%core!result.Result. T& E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0@)) (TYPE%core!result.Result. T& E&))) :qid internal_core!result.Result./Err_constructor_definition :skolemid skolem_internal_core!result.Result./Err_constructor_definition)))
(assert (forall ((x@ core!result.Result.)) (! (= (core!result.Result./Err/_0 x@) (core!result.Result./Err/?_0 x@)) :pattern ((core!result.Result./Err/_0 x@)) :qid internal_core!result.Result./Err/_0_accessor_definition :skolemid skolem_internal_core!result.Result./Err/_0_accessor_definition)))
(assert (forall ((T& Type) (E& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%core!result.Result. T& E&)) (has_type (core!result.Result./Err/_0 (%Poly%core!result.Result. x@)) E&)) :pattern ((core!result.Result./Err/_0 (%Poly%core!result.Result. x@)) (has_type x@ (TYPE%core!result.Result. T& E&))) :qid internal_core!result.Result./Err/_0_invariant_definition :skolemid skolem_internal_core!result.Result./Err/_0_invariant_definition)))
(assert (forall ((x core!result.Result.)) (! (=> ((_ is core!result.Result./Ok) x) (height_lt (height (core!result.Result./Ok/_0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/_0 x))) :qid prelude_datatype_height :skolemid skolem_prelude_datatype_height)))
(assert (forall ((x core!result.Result.)) (! (=> ((_ is core!result.Result./Err) x) (height_lt (height (core!result.Result./Err/_0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/_0 x))) :qid prelude_datatype_height :skolemid skolem_prelude_datatype_height)))
(assert (forall ((x@ main!impl_u.l0.PageTableContents.)) (! (= x@ (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. x@))) :pattern ((Poly%main!impl_u.l0.PageTableContents. x@)) :qid internal_main__impl_u__l0__PageTableContents_box_axiom_definition :skolemid skolem_internal_main__impl_u__l0__PageTableContents_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l0.PageTableContents.) (= x@ (Poly%main!impl_u.l0.PageTableContents. (%Poly%main!impl_u.l0.PageTableContents. x@)))) :pattern ((has_type x@ TYPE%main!impl_u.l0.PageTableContents.)) :qid internal_main__impl_u__l0__PageTableContents_unbox_axiom_definition :skolemid skolem_internal_main__impl_u__l0__PageTableContents_unbox_axiom_definition)))
(assert (forall ((map@ vstd!map.Map<nat./main!definitions_t.PageTableEntry.>.) (arch@ main!definitions_t.Arch.) (lower@ Int) (upper@ Int)) (! (=> (and (<= 0 lower@) (<= 0 upper@)) (has_type (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l0.PageTableContents./PageTableContents map@ arch@ lower@ upper@)) TYPE%main!impl_u.l0.PageTableContents.)) :pattern ((has_type (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l0.PageTableContents./PageTableContents map@ arch@ lower@ upper@)) TYPE%main!impl_u.l0.PageTableContents.)) :qid internal_main!impl_u.l0.PageTableContents./PageTableContents_constructor_definition :skolemid skolem_internal_main!impl_u.l0.PageTableContents./PageTableContents_constructor_definition)))
(assert (forall ((x@ main!impl_u.l0.PageTableContents.)) (! (= (main!impl_u.l0.PageTableContents./PageTableContents/map x@) (main!impl_u.l0.PageTableContents./PageTableContents/?map x@)) :pattern ((main!impl_u.l0.PageTableContents./PageTableContents/map x@)) :qid internal_main!impl_u.l0.PageTableContents./PageTableContents/map_accessor_definition :skolemid skolem_internal_main!impl_u.l0.PageTableContents./PageTableContents/map_accessor_definition)))
(assert (forall ((x@ main!impl_u.l0.PageTableContents.)) (! (= (main!impl_u.l0.PageTableContents./PageTableContents/arch x@) (main!impl_u.l0.PageTableContents./PageTableContents/?arch x@)) :pattern ((main!impl_u.l0.PageTableContents./PageTableContents/arch x@)) :qid internal_main!impl_u.l0.PageTableContents./PageTableContents/arch_accessor_definition :skolemid skolem_internal_main!impl_u.l0.PageTableContents./PageTableContents/arch_accessor_definition)))
(assert (forall ((x@ main!impl_u.l0.PageTableContents.)) (! (= (main!impl_u.l0.PageTableContents./PageTableContents/lower x@) (main!impl_u.l0.PageTableContents./PageTableContents/?lower x@)) :pattern ((main!impl_u.l0.PageTableContents./PageTableContents/lower x@)) :qid internal_main!impl_u.l0.PageTableContents./PageTableContents/lower_accessor_definition :skolemid skolem_internal_main!impl_u.l0.PageTableContents./PageTableContents/lower_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l0.PageTableContents.) (<= 0 (main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. x@)))) :pattern ((main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. x@)) (has_type x@ TYPE%main!impl_u.l0.PageTableContents.)) :qid internal_main!impl_u.l0.PageTableContents./PageTableContents/lower_invariant_definition :skolemid skolem_internal_main!impl_u.l0.PageTableContents./PageTableContents/lower_invariant_definition)))
(assert (forall ((x@ main!impl_u.l0.PageTableContents.)) (! (= (main!impl_u.l0.PageTableContents./PageTableContents/upper x@) (main!impl_u.l0.PageTableContents./PageTableContents/?upper x@)) :pattern ((main!impl_u.l0.PageTableContents./PageTableContents/upper x@)) :qid internal_main!impl_u.l0.PageTableContents./PageTableContents/upper_accessor_definition :skolemid skolem_internal_main!impl_u.l0.PageTableContents./PageTableContents/upper_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l0.PageTableContents.) (<= 0 (main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. x@)))) :pattern ((main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. x@)) (has_type x@ TYPE%main!impl_u.l0.PageTableContents.)) :qid internal_main!impl_u.l0.PageTableContents./PageTableContents/upper_invariant_definition :skolemid skolem_internal_main!impl_u.l0.PageTableContents./PageTableContents/upper_invariant_definition)))
(assert (forall ((x@ main!impl_u.l1.Directory.)) (! (= x@ (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. x@))) :pattern ((Poly%main!impl_u.l1.Directory. x@)) :qid internal_main__impl_u__l1__Directory_box_axiom_definition :skolemid skolem_internal_main__impl_u__l1__Directory_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l1.Directory.) (= x@ (Poly%main!impl_u.l1.Directory. (%Poly%main!impl_u.l1.Directory. x@)))) :pattern ((has_type x@ TYPE%main!impl_u.l1.Directory.)) :qid internal_main__impl_u__l1__Directory_unbox_axiom_definition :skolemid skolem_internal_main__impl_u__l1__Directory_unbox_axiom_definition)))
(assert (forall ((entries@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (layer@ Int) (base_vaddr@ Int) (arch@ main!definitions_t.Arch.)) (! (=> (and (<= 0 layer@) (<= 0 base_vaddr@)) (has_type (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.Directory./Directory entries@ layer@ base_vaddr@ arch@)) TYPE%main!impl_u.l1.Directory.)) :pattern ((has_type (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.Directory./Directory entries@ layer@ base_vaddr@ arch@)) TYPE%main!impl_u.l1.Directory.)) :qid internal_main!impl_u.l1.Directory./Directory_constructor_definition :skolemid skolem_internal_main!impl_u.l1.Directory./Directory_constructor_definition)))
(assert (forall ((x@ main!impl_u.l1.Directory.)) (! (= (main!impl_u.l1.Directory./Directory/entries x@) (main!impl_u.l1.Directory./Directory/?entries x@)) :pattern ((main!impl_u.l1.Directory./Directory/entries x@)) :qid internal_main!impl_u.l1.Directory./Directory/entries_accessor_definition :skolemid skolem_internal_main!impl_u.l1.Directory./Directory/entries_accessor_definition)))
(assert (forall ((x@ main!impl_u.l1.Directory.)) (! (= (main!impl_u.l1.Directory./Directory/layer x@) (main!impl_u.l1.Directory./Directory/?layer x@)) :pattern ((main!impl_u.l1.Directory./Directory/layer x@)) :qid internal_main!impl_u.l1.Directory./Directory/layer_accessor_definition :skolemid skolem_internal_main!impl_u.l1.Directory./Directory/layer_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l1.Directory.) (<= 0 (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. x@)))) :pattern ((main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. x@)) (has_type x@ TYPE%main!impl_u.l1.Directory.)) :qid internal_main!impl_u.l1.Directory./Directory/layer_invariant_definition :skolemid skolem_internal_main!impl_u.l1.Directory./Directory/layer_invariant_definition)))
(assert (forall ((x@ main!impl_u.l1.Directory.)) (! (= (main!impl_u.l1.Directory./Directory/base_vaddr x@) (main!impl_u.l1.Directory./Directory/?base_vaddr x@)) :pattern ((main!impl_u.l1.Directory./Directory/base_vaddr x@)) :qid internal_main!impl_u.l1.Directory./Directory/base_vaddr_accessor_definition :skolemid skolem_internal_main!impl_u.l1.Directory./Directory/base_vaddr_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l1.Directory.) (<= 0 (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. x@)))) :pattern ((main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. x@)) (has_type x@ TYPE%main!impl_u.l1.Directory.)) :qid internal_main!impl_u.l1.Directory./Directory/base_vaddr_invariant_definition :skolemid skolem_internal_main!impl_u.l1.Directory./Directory/base_vaddr_invariant_definition)))
(assert (forall ((x@ main!impl_u.l1.Directory.)) (! (= (main!impl_u.l1.Directory./Directory/arch x@) (main!impl_u.l1.Directory./Directory/?arch x@)) :pattern ((main!impl_u.l1.Directory./Directory/arch x@)) :qid internal_main!impl_u.l1.Directory./Directory/arch_accessor_definition :skolemid skolem_internal_main!impl_u.l1.Directory./Directory/arch_accessor_definition)))
(assert (forall ((x main!impl_u.l1.Directory.)) (! (=> ((_ is main!impl_u.l1.Directory./Directory) x) (height_lt (height (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries x))) (height (Poly%main!impl_u.l1.Directory. x)))) :pattern ((height (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries x)))) :qid prelude_datatype_height :skolemid skolem_prelude_datatype_height)))
(assert (forall ((x@ main!impl_u.l1.NodeEntry.)) (! (= x@ (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. x@))) :pattern ((Poly%main!impl_u.l1.NodeEntry. x@)) :qid internal_main__impl_u__l1__NodeEntry_box_axiom_definition :skolemid skolem_internal_main__impl_u__l1__NodeEntry_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l1.NodeEntry.) (= x@ (Poly%main!impl_u.l1.NodeEntry. (%Poly%main!impl_u.l1.NodeEntry. x@)))) :pattern ((has_type x@ TYPE%main!impl_u.l1.NodeEntry.)) :qid internal_main__impl_u__l1__NodeEntry_unbox_axiom_definition :skolemid skolem_internal_main__impl_u__l1__NodeEntry_unbox_axiom_definition)))
(assert (forall ((_0@ main!impl_u.l1.Directory.)) (! (=> (has_type (Poly%main!impl_u.l1.Directory. _0@) TYPE%main!impl_u.l1.Directory.) (has_type (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry./Directory _0@)) TYPE%main!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry./Directory _0@)) TYPE%main!impl_u.l1.NodeEntry.)) :qid internal_main!impl_u.l1.NodeEntry./Directory_constructor_definition :skolemid skolem_internal_main!impl_u.l1.NodeEntry./Directory_constructor_definition)))
(assert (forall ((x@ main!impl_u.l1.NodeEntry.)) (! (= (main!impl_u.l1.NodeEntry./Directory/_0 x@) (main!impl_u.l1.NodeEntry./Directory/?_0 x@)) :pattern ((main!impl_u.l1.NodeEntry./Directory/_0 x@)) :qid internal_main!impl_u.l1.NodeEntry./Directory/_0_accessor_definition :skolemid skolem_internal_main!impl_u.l1.NodeEntry./Directory/_0_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l1.NodeEntry.) (has_type (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. x@))) TYPE%main!impl_u.l1.Directory.)) :pattern ((main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. x@)) (has_type x@ TYPE%main!impl_u.l1.NodeEntry.)) :qid internal_main!impl_u.l1.NodeEntry./Directory/_0_invariant_definition :skolemid skolem_internal_main!impl_u.l1.NodeEntry./Directory/_0_invariant_definition)))
(assert (forall ((_0@ main!definitions_t.PageTableEntry.)) (! (=> (has_type (Poly%main!definitions_t.PageTableEntry. _0@) TYPE%main!definitions_t.PageTableEntry.) (has_type (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry./Page _0@)) TYPE%main!impl_u.l1.NodeEntry.)) :pattern ((has_type (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry./Page _0@)) TYPE%main!impl_u.l1.NodeEntry.)) :qid internal_main!impl_u.l1.NodeEntry./Page_constructor_definition :skolemid skolem_internal_main!impl_u.l1.NodeEntry./Page_constructor_definition)))
(assert (forall ((x@ main!impl_u.l1.NodeEntry.)) (! (= (main!impl_u.l1.NodeEntry./Page/_0 x@) (main!impl_u.l1.NodeEntry./Page/?_0 x@)) :pattern ((main!impl_u.l1.NodeEntry./Page/_0 x@)) :qid internal_main!impl_u.l1.NodeEntry./Page/_0_accessor_definition :skolemid skolem_internal_main!impl_u.l1.NodeEntry./Page/_0_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l1.NodeEntry.) (has_type (Poly%main!definitions_t.PageTableEntry. (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. x@))) TYPE%main!definitions_t.PageTableEntry.)) :pattern ((main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. x@)) (has_type x@ TYPE%main!impl_u.l1.NodeEntry.)) :qid internal_main!impl_u.l1.NodeEntry./Page/_0_invariant_definition :skolemid skolem_internal_main!impl_u.l1.NodeEntry./Page/_0_invariant_definition)))
(assert (has_type (Poly%main!impl_u.l1.NodeEntry. main!impl_u.l1.NodeEntry./Empty) TYPE%main!impl_u.l1.NodeEntry.))
(assert (forall ((x main!impl_u.l1.NodeEntry.)) (! (=> ((_ is main!impl_u.l1.NodeEntry./Directory) x) (height_lt (height (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.NodeEntry./Directory/_0 x))) (height (Poly%main!impl_u.l1.NodeEntry. x)))) :pattern ((height (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.NodeEntry./Directory/_0 x)))) :qid prelude_datatype_height :skolemid skolem_prelude_datatype_height)))
(assert (forall ((x@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= x@ (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. x@))) :pattern ((Poly%main!impl_u.l2_impl.PageDirectoryEntry. x@)) :qid internal_main__impl_u__l2_impl__PageDirectoryEntry_box_axiom_definition :skolemid skolem_internal_main__impl_u__l2_impl__PageDirectoryEntry_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.PageDirectoryEntry.) (= x@ (Poly%main!impl_u.l2_impl.PageDirectoryEntry. (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. x@)))) :pattern ((has_type x@ TYPE%main!impl_u.l2_impl.PageDirectoryEntry.)) :qid internal_main__impl_u__l2_impl__PageDirectoryEntry_unbox_axiom_definition :skolemid skolem_internal_main__impl_u__l2_impl__PageDirectoryEntry_unbox_axiom_definition)))
(assert (forall ((entry@ Int) (layer@ Int)) (! (=> (and (uInv 64 entry@) (<= 0 layer@)) (has_type (Poly%main!impl_u.l2_impl.PageDirectoryEntry. (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry entry@ layer@)) TYPE%main!impl_u.l2_impl.PageDirectoryEntry.)) :pattern ((has_type (Poly%main!impl_u.l2_impl.PageDirectoryEntry. (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry entry@ layer@)) TYPE%main!impl_u.l2_impl.PageDirectoryEntry.)) :qid internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry_constructor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry_constructor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry x@) (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/?entry x@)) :pattern ((main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry x@)) :qid internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.PageDirectoryEntry.) (uInv 64 (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. x@)))) :pattern ((main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. x@)) (has_type x@ TYPE%main!impl_u.l2_impl.PageDirectoryEntry.)) :qid internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry_invariant_definition :skolemid skolem_internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry_invariant_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer x@) (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/?layer x@)) :pattern ((main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer x@)) :qid internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.PageDirectoryEntry.) (<= 0 (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. x@)))) :pattern ((main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. x@)) (has_type x@ TYPE%main!impl_u.l2_impl.PageDirectoryEntry.)) :qid internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer_invariant_definition :skolemid skolem_internal_main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer_invariant_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.PTDir.)) (! (= x@ (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. x@))) :pattern ((Poly%main!impl_u.l2_impl.PTDir. x@)) :qid internal_main__impl_u__l2_impl__PTDir_box_axiom_definition :skolemid skolem_internal_main__impl_u__l2_impl__PTDir_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.PTDir.) (= x@ (Poly%main!impl_u.l2_impl.PTDir. (%Poly%main!impl_u.l2_impl.PTDir. x@)))) :pattern ((has_type x@ TYPE%main!impl_u.l2_impl.PTDir.)) :qid internal_main__impl_u__l2_impl__PTDir_unbox_axiom_definition :skolemid skolem_internal_main__impl_u__l2_impl__PTDir_unbox_axiom_definition)))
(assert (forall ((region@ main!definitions_t.MemRegion.) (entries@ vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>.) (used_regions@ vstd!set.Set<main!definitions_t.MemRegion.>.)) (! (=> (has_type (Poly%main!definitions_t.MemRegion. region@) TYPE%main!definitions_t.MemRegion.) (has_type (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PTDir./PTDir region@ entries@ used_regions@)) TYPE%main!impl_u.l2_impl.PTDir.)) :pattern ((has_type (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PTDir./PTDir region@ entries@ used_regions@)) TYPE%main!impl_u.l2_impl.PTDir.)) :qid internal_main!impl_u.l2_impl.PTDir./PTDir_constructor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PTDir./PTDir_constructor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.PTDir.)) (! (= (main!impl_u.l2_impl.PTDir./PTDir/region x@) (main!impl_u.l2_impl.PTDir./PTDir/?region x@)) :pattern ((main!impl_u.l2_impl.PTDir./PTDir/region x@)) :qid internal_main!impl_u.l2_impl.PTDir./PTDir/region_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PTDir./PTDir/region_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.PTDir.) (has_type (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. x@))) TYPE%main!definitions_t.MemRegion.)) :pattern ((main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. x@)) (has_type x@ TYPE%main!impl_u.l2_impl.PTDir.)) :qid internal_main!impl_u.l2_impl.PTDir./PTDir/region_invariant_definition :skolemid skolem_internal_main!impl_u.l2_impl.PTDir./PTDir/region_invariant_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.PTDir.)) (! (= (main!impl_u.l2_impl.PTDir./PTDir/entries x@) (main!impl_u.l2_impl.PTDir./PTDir/?entries x@)) :pattern ((main!impl_u.l2_impl.PTDir./PTDir/entries x@)) :qid internal_main!impl_u.l2_impl.PTDir./PTDir/entries_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PTDir./PTDir/entries_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.PTDir.)) (! (= (main!impl_u.l2_impl.PTDir./PTDir/used_regions x@) (main!impl_u.l2_impl.PTDir./PTDir/?used_regions x@)) :pattern ((main!impl_u.l2_impl.PTDir./PTDir/used_regions x@)) :qid internal_main!impl_u.l2_impl.PTDir./PTDir/used_regions_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PTDir./PTDir/used_regions_accessor_definition)))
(assert (forall ((x main!impl_u.l2_impl.PTDir.)) (! (=> ((_ is main!impl_u.l2_impl.PTDir./PTDir) x) (height_lt (height (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries x))) (height (Poly%main!impl_u.l2_impl.PTDir. x)))) :pattern ((height (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries x)))) :qid prelude_datatype_height :skolemid skolem_prelude_datatype_height)))
(assert (forall ((x@ main!impl_u.l2_impl.PageTable.)) (! (= x@ (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. x@))) :pattern ((Poly%main!impl_u.l2_impl.PageTable. x@)) :qid internal_main__impl_u__l2_impl__PageTable_box_axiom_definition :skolemid skolem_internal_main__impl_u__l2_impl__PageTable_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.PageTable.) (= x@ (Poly%main!impl_u.l2_impl.PageTable. (%Poly%main!impl_u.l2_impl.PageTable. x@)))) :pattern ((has_type x@ TYPE%main!impl_u.l2_impl.PageTable.)) :qid internal_main__impl_u__l2_impl__PageTable_unbox_axiom_definition :skolemid skolem_internal_main__impl_u__l2_impl__PageTable_unbox_axiom_definition)))
(assert (forall ((memory@ main!spec_t.mem.PageTableMemory.) (ghost_pt@ main!impl_u.l2_impl.PTDir.)) (! (=> (has_type (Poly%main!impl_u.l2_impl.PTDir. ghost_pt@) TYPE%main!impl_u.l2_impl.PTDir.) (has_type (Poly%main!impl_u.l2_impl.PageTable. (main!impl_u.l2_impl.PageTable./PageTable memory@ ghost_pt@)) TYPE%main!impl_u.l2_impl.PageTable.)) :pattern ((has_type (Poly%main!impl_u.l2_impl.PageTable. (main!impl_u.l2_impl.PageTable./PageTable memory@ ghost_pt@)) TYPE%main!impl_u.l2_impl.PageTable.)) :qid internal_main!impl_u.l2_impl.PageTable./PageTable_constructor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PageTable./PageTable_constructor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.PageTable.)) (! (= (main!impl_u.l2_impl.PageTable./PageTable/memory x@) (main!impl_u.l2_impl.PageTable./PageTable/?memory x@)) :pattern ((main!impl_u.l2_impl.PageTable./PageTable/memory x@)) :qid internal_main!impl_u.l2_impl.PageTable./PageTable/memory_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PageTable./PageTable/memory_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.PageTable.)) (! (= (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt x@) (main!impl_u.l2_impl.PageTable./PageTable/?ghost_pt x@)) :pattern ((main!impl_u.l2_impl.PageTable./PageTable/ghost_pt x@)) :qid internal_main!impl_u.l2_impl.PageTable./PageTable/ghost_pt_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.PageTable./PageTable/ghost_pt_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.PageTable.) (has_type (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (%Poly%main!impl_u.l2_impl.PageTable. x@))) TYPE%main!impl_u.l2_impl.PTDir.)) :pattern ((main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (%Poly%main!impl_u.l2_impl.PageTable. x@)) (has_type x@ TYPE%main!impl_u.l2_impl.PageTable.)) :qid internal_main!impl_u.l2_impl.PageTable./PageTable/ghost_pt_invariant_definition :skolemid skolem_internal_main!impl_u.l2_impl.PageTable./PageTable/ghost_pt_invariant_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= x@ (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. x@))) :pattern ((Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. x@)) :qid internal_main__impl_u__l2_impl__GhostPageDirectoryEntry_box_axiom_definition :skolemid skolem_internal_main__impl_u__l2_impl__GhostPageDirectoryEntry_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.) (= x@ (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. x@)))) :pattern ((has_type x@ TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)) :qid internal_main__impl_u__l2_impl__GhostPageDirectoryEntry_unbox_axiom_definition :skolemid skolem_internal_main__impl_u__l2_impl__GhostPageDirectoryEntry_unbox_axiom_definition)))
(assert (forall ((addr@ Int) (flag_P@ Bool) (flag_RW@ Bool) (flag_US@ Bool) (flag_PWT@ Bool) (flag_PCD@ Bool) (flag_A@ Bool) (flag_XD@ Bool)) (! (=> (uInv SZ addr@) (has_type (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory addr@ flag_P@ flag_RW@ flag_US@ flag_PWT@ flag_PCD@ flag_A@ flag_XD@)) TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory addr@ flag_P@ flag_RW@ flag_US@ flag_PWT@ flag_PCD@ flag_A@ flag_XD@)) TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory_constructor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory_constructor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?addr x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.) (uInv SZ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. x@)))) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. x@)) (has_type x@ TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr_invariant_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr_invariant_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_P x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_P x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_P x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_P_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_P_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_RW x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_RW x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_RW x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_RW_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_RW_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_US x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_US x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_US x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_US_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_US_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PWT x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_PWT x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PWT x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PWT_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PWT_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PCD x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_PCD x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PCD x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PCD_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_PCD_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_A x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_A x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_A x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_A_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_A_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_XD x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/?flag_XD x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_XD x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_XD_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/flag_XD_accessor_definition)))
(assert (forall ((addr@ Int) (flag_P@ Bool) (flag_RW@ Bool) (flag_US@ Bool) (flag_PWT@ Bool) (flag_PCD@ Bool) (flag_A@ Bool) (flag_D@ Bool) (flag_G@ Bool) (flag_PAT@ Bool) (flag_XD@ Bool)) (! (=> (uInv SZ addr@) (has_type (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page addr@ flag_P@ flag_RW@ flag_US@ flag_PWT@ flag_PCD@ flag_A@ flag_D@ flag_G@ flag_PAT@ flag_XD@)) TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)) :pattern ((has_type (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page addr@ flag_P@ flag_RW@ flag_US@ flag_PWT@ flag_PCD@ flag_A@ flag_D@ flag_G@ flag_PAT@ flag_XD@)) TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page_constructor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page_constructor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?addr x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.) (uInv SZ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. x@)))) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. x@)) (has_type x@ TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr_invariant_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr_invariant_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_P x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_P x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_P x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_P_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_P_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_RW x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_RW x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_RW x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_RW_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_RW_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_US x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_US x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_US x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_US_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_US_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PWT x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_PWT x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PWT x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PWT_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PWT_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PCD x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_PCD x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PCD x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PCD_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PCD_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_A x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_A x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_A x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_A_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_A_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_D x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_D x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_D x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_D_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_D_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_G x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_G x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_G x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_G_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_G_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PAT x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_PAT x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PAT x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PAT_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_PAT_accessor_definition)))
(assert (forall ((x@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)) (! (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_XD x@) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/?flag_XD x@)) :pattern ((main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_XD x@)) :qid internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_XD_accessor_definition :skolemid skolem_internal_main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_XD_accessor_definition)))
(assert (has_type (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty) TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.))
(assert (forall ((x@ main!definitions_t.MemRegion.)) (! (= x@ (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. x@))) :pattern ((Poly%main!definitions_t.MemRegion. x@)) :qid internal_main__definitions_t__MemRegion_box_axiom_definition :skolemid skolem_internal_main__definitions_t__MemRegion_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.MemRegion.) (= x@ (Poly%main!definitions_t.MemRegion. (%Poly%main!definitions_t.MemRegion. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.MemRegion.)) :qid internal_main__definitions_t__MemRegion_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__MemRegion_unbox_axiom_definition)))
(assert (forall ((base@ Int) (size@ Int)) (! (=> (and (<= 0 base@) (<= 0 size@)) (has_type (Poly%main!definitions_t.MemRegion. (main!definitions_t.MemRegion./MemRegion base@ size@)) TYPE%main!definitions_t.MemRegion.)) :pattern ((has_type (Poly%main!definitions_t.MemRegion. (main!definitions_t.MemRegion./MemRegion base@ size@)) TYPE%main!definitions_t.MemRegion.)) :qid internal_main!definitions_t.MemRegion./MemRegion_constructor_definition :skolemid skolem_internal_main!definitions_t.MemRegion./MemRegion_constructor_definition)))
(assert (forall ((x@ main!definitions_t.MemRegion.)) (! (= (main!definitions_t.MemRegion./MemRegion/base x@) (main!definitions_t.MemRegion./MemRegion/?base x@)) :pattern ((main!definitions_t.MemRegion./MemRegion/base x@)) :qid internal_main!definitions_t.MemRegion./MemRegion/base_accessor_definition :skolemid skolem_internal_main!definitions_t.MemRegion./MemRegion/base_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.MemRegion.) (<= 0 (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. x@)))) :pattern ((main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. x@)) (has_type x@ TYPE%main!definitions_t.MemRegion.)) :qid internal_main!definitions_t.MemRegion./MemRegion/base_invariant_definition :skolemid skolem_internal_main!definitions_t.MemRegion./MemRegion/base_invariant_definition)))
(assert (forall ((x@ main!definitions_t.MemRegion.)) (! (= (main!definitions_t.MemRegion./MemRegion/size x@) (main!definitions_t.MemRegion./MemRegion/?size x@)) :pattern ((main!definitions_t.MemRegion./MemRegion/size x@)) :qid internal_main!definitions_t.MemRegion./MemRegion/size_accessor_definition :skolemid skolem_internal_main!definitions_t.MemRegion./MemRegion/size_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.MemRegion.) (<= 0 (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. x@)))) :pattern ((main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. x@)) (has_type x@ TYPE%main!definitions_t.MemRegion.)) :qid internal_main!definitions_t.MemRegion./MemRegion/size_invariant_definition :skolemid skolem_internal_main!definitions_t.MemRegion./MemRegion/size_invariant_definition)))
(assert (forall ((x@ main!definitions_t.MemRegionExec.)) (! (= x@ (%Poly%main!definitions_t.MemRegionExec. (Poly%main!definitions_t.MemRegionExec. x@))) :pattern ((Poly%main!definitions_t.MemRegionExec. x@)) :qid internal_main__definitions_t__MemRegionExec_box_axiom_definition :skolemid skolem_internal_main__definitions_t__MemRegionExec_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.MemRegionExec.) (= x@ (Poly%main!definitions_t.MemRegionExec. (%Poly%main!definitions_t.MemRegionExec. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.MemRegionExec.)) :qid internal_main__definitions_t__MemRegionExec_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__MemRegionExec_unbox_axiom_definition)))
(assert (forall ((base@ Int) (size@ Int)) (! (=> (and (uInv SZ base@) (uInv SZ size@)) (has_type (Poly%main!definitions_t.MemRegionExec. (main!definitions_t.MemRegionExec./MemRegionExec base@ size@)) TYPE%main!definitions_t.MemRegionExec.)) :pattern ((has_type (Poly%main!definitions_t.MemRegionExec. (main!definitions_t.MemRegionExec./MemRegionExec base@ size@)) TYPE%main!definitions_t.MemRegionExec.)) :qid internal_main!definitions_t.MemRegionExec./MemRegionExec_constructor_definition :skolemid skolem_internal_main!definitions_t.MemRegionExec./MemRegionExec_constructor_definition)))
(assert (forall ((x@ main!definitions_t.MemRegionExec.)) (! (= (main!definitions_t.MemRegionExec./MemRegionExec/base x@) (main!definitions_t.MemRegionExec./MemRegionExec/?base x@)) :pattern ((main!definitions_t.MemRegionExec./MemRegionExec/base x@)) :qid internal_main!definitions_t.MemRegionExec./MemRegionExec/base_accessor_definition :skolemid skolem_internal_main!definitions_t.MemRegionExec./MemRegionExec/base_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.MemRegionExec.) (uInv SZ (main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. x@)))) :pattern ((main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. x@)) (has_type x@ TYPE%main!definitions_t.MemRegionExec.)) :qid internal_main!definitions_t.MemRegionExec./MemRegionExec/base_invariant_definition :skolemid skolem_internal_main!definitions_t.MemRegionExec./MemRegionExec/base_invariant_definition)))
(assert (forall ((x@ main!definitions_t.MemRegionExec.)) (! (= (main!definitions_t.MemRegionExec./MemRegionExec/size x@) (main!definitions_t.MemRegionExec./MemRegionExec/?size x@)) :pattern ((main!definitions_t.MemRegionExec./MemRegionExec/size x@)) :qid internal_main!definitions_t.MemRegionExec./MemRegionExec/size_accessor_definition :skolemid skolem_internal_main!definitions_t.MemRegionExec./MemRegionExec/size_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.MemRegionExec.) (uInv SZ (main!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%main!definitions_t.MemRegionExec. x@)))) :pattern ((main!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%main!definitions_t.MemRegionExec. x@)) (has_type x@ TYPE%main!definitions_t.MemRegionExec.)) :qid internal_main!definitions_t.MemRegionExec./MemRegionExec/size_invariant_definition :skolemid skolem_internal_main!definitions_t.MemRegionExec./MemRegionExec/size_invariant_definition)))
(assert (forall ((x@ main!definitions_t.Flags.)) (! (= x@ (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. x@))) :pattern ((Poly%main!definitions_t.Flags. x@)) :qid internal_main__definitions_t__Flags_box_axiom_definition :skolemid skolem_internal_main__definitions_t__Flags_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.Flags.) (= x@ (Poly%main!definitions_t.Flags. (%Poly%main!definitions_t.Flags. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.Flags.)) :qid internal_main__definitions_t__Flags_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__Flags_unbox_axiom_definition)))
(assert (forall ((x@ main!definitions_t.Flags.)) (! (= (main!definitions_t.Flags./Flags/is_writable x@) (main!definitions_t.Flags./Flags/?is_writable x@)) :pattern ((main!definitions_t.Flags./Flags/is_writable x@)) :qid internal_main!definitions_t.Flags./Flags/is_writable_accessor_definition :skolemid skolem_internal_main!definitions_t.Flags./Flags/is_writable_accessor_definition)))
(assert (forall ((x@ main!definitions_t.Flags.)) (! (= (main!definitions_t.Flags./Flags/is_supervisor x@) (main!definitions_t.Flags./Flags/?is_supervisor x@)) :pattern ((main!definitions_t.Flags./Flags/is_supervisor x@)) :qid internal_main!definitions_t.Flags./Flags/is_supervisor_accessor_definition :skolemid skolem_internal_main!definitions_t.Flags./Flags/is_supervisor_accessor_definition)))
(assert (forall ((x@ main!definitions_t.Flags.)) (! (= (main!definitions_t.Flags./Flags/disable_execute x@) (main!definitions_t.Flags./Flags/?disable_execute x@)) :pattern ((main!definitions_t.Flags./Flags/disable_execute x@)) :qid internal_main!definitions_t.Flags./Flags/disable_execute_accessor_definition :skolemid skolem_internal_main!definitions_t.Flags./Flags/disable_execute_accessor_definition)))
(assert (forall ((x@ main!definitions_t.Flags.)) (! (has_type (Poly%main!definitions_t.Flags. x@) TYPE%main!definitions_t.Flags.) :pattern ((has_type (Poly%main!definitions_t.Flags. x@) TYPE%main!definitions_t.Flags.)) :qid internal_main__definitions_t__Flags_has_type_always_definition :skolemid skolem_internal_main__definitions_t__Flags_has_type_always_definition)))
(assert (forall ((x@ main!definitions_t.PageTableEntry.)) (! (= x@ (%Poly%main!definitions_t.PageTableEntry. (Poly%main!definitions_t.PageTableEntry. x@))) :pattern ((Poly%main!definitions_t.PageTableEntry. x@)) :qid internal_main__definitions_t__PageTableEntry_box_axiom_definition :skolemid skolem_internal_main__definitions_t__PageTableEntry_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.PageTableEntry.) (= x@ (Poly%main!definitions_t.PageTableEntry. (%Poly%main!definitions_t.PageTableEntry. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.PageTableEntry.)) :qid internal_main__definitions_t__PageTableEntry_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__PageTableEntry_unbox_axiom_definition)))
(assert (forall ((frame@ main!definitions_t.MemRegion.) (flags@ main!definitions_t.Flags.)) (! (=> (has_type (Poly%main!definitions_t.MemRegion. frame@) TYPE%main!definitions_t.MemRegion.) (has_type (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.PageTableEntry./PageTableEntry frame@ flags@)) TYPE%main!definitions_t.PageTableEntry.)) :pattern ((has_type (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.PageTableEntry./PageTableEntry frame@ flags@)) TYPE%main!definitions_t.PageTableEntry.)) :qid internal_main!definitions_t.PageTableEntry./PageTableEntry_constructor_definition :skolemid skolem_internal_main!definitions_t.PageTableEntry./PageTableEntry_constructor_definition)))
(assert (forall ((x@ main!definitions_t.PageTableEntry.)) (! (= (main!definitions_t.PageTableEntry./PageTableEntry/frame x@) (main!definitions_t.PageTableEntry./PageTableEntry/?frame x@)) :pattern ((main!definitions_t.PageTableEntry./PageTableEntry/frame x@)) :qid internal_main!definitions_t.PageTableEntry./PageTableEntry/frame_accessor_definition :skolemid skolem_internal_main!definitions_t.PageTableEntry./PageTableEntry/frame_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.PageTableEntry.) (has_type (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. x@))) TYPE%main!definitions_t.MemRegion.)) :pattern ((main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. x@)) (has_type x@ TYPE%main!definitions_t.PageTableEntry.)) :qid internal_main!definitions_t.PageTableEntry./PageTableEntry/frame_invariant_definition :skolemid skolem_internal_main!definitions_t.PageTableEntry./PageTableEntry/frame_invariant_definition)))
(assert (forall ((x@ main!definitions_t.PageTableEntry.)) (! (= (main!definitions_t.PageTableEntry./PageTableEntry/flags x@) (main!definitions_t.PageTableEntry./PageTableEntry/?flags x@)) :pattern ((main!definitions_t.PageTableEntry./PageTableEntry/flags x@)) :qid internal_main!definitions_t.PageTableEntry./PageTableEntry/flags_accessor_definition :skolemid skolem_internal_main!definitions_t.PageTableEntry./PageTableEntry/flags_accessor_definition)))
(assert (forall ((x@ main!definitions_t.PageTableEntryExec.)) (! (= x@ (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. x@))) :pattern ((Poly%main!definitions_t.PageTableEntryExec. x@)) :qid internal_main__definitions_t__PageTableEntryExec_box_axiom_definition :skolemid skolem_internal_main__definitions_t__PageTableEntryExec_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.PageTableEntryExec.) (= x@ (Poly%main!definitions_t.PageTableEntryExec. (%Poly%main!definitions_t.PageTableEntryExec. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.PageTableEntryExec.)) :qid internal_main__definitions_t__PageTableEntryExec_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__PageTableEntryExec_unbox_axiom_definition)))
(assert (forall ((frame@ main!definitions_t.MemRegionExec.) (flags@ main!definitions_t.Flags.)) (! (=> (has_type (Poly%main!definitions_t.MemRegionExec. frame@) TYPE%main!definitions_t.MemRegionExec.) (has_type (Poly%main!definitions_t.PageTableEntryExec. (main!definitions_t.PageTableEntryExec./PageTableEntryExec frame@ flags@)) TYPE%main!definitions_t.PageTableEntryExec.)) :pattern ((has_type (Poly%main!definitions_t.PageTableEntryExec. (main!definitions_t.PageTableEntryExec./PageTableEntryExec frame@ flags@)) TYPE%main!definitions_t.PageTableEntryExec.)) :qid internal_main!definitions_t.PageTableEntryExec./PageTableEntryExec_constructor_definition :skolemid skolem_internal_main!definitions_t.PageTableEntryExec./PageTableEntryExec_constructor_definition)))
(assert (forall ((x@ main!definitions_t.PageTableEntryExec.)) (! (= (main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame x@) (main!definitions_t.PageTableEntryExec./PageTableEntryExec/?frame x@)) :pattern ((main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame x@)) :qid internal_main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame_accessor_definition :skolemid skolem_internal_main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.PageTableEntryExec.) (has_type (Poly%main!definitions_t.MemRegionExec. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%main!definitions_t.PageTableEntryExec. x@))) TYPE%main!definitions_t.MemRegionExec.)) :pattern ((main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%main!definitions_t.PageTableEntryExec. x@)) (has_type x@ TYPE%main!definitions_t.PageTableEntryExec.)) :qid internal_main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame_invariant_definition :skolemid skolem_internal_main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame_invariant_definition)))
(assert (forall ((x@ main!definitions_t.PageTableEntryExec.)) (! (= (main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags x@) (main!definitions_t.PageTableEntryExec./PageTableEntryExec/?flags x@)) :pattern ((main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags x@)) :qid internal_main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags_accessor_definition :skolemid skolem_internal_main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags_accessor_definition)))
(assert (forall ((x@ main!definitions_t.ArchLayerExec.)) (! (= x@ (%Poly%main!definitions_t.ArchLayerExec. (Poly%main!definitions_t.ArchLayerExec. x@))) :pattern ((Poly%main!definitions_t.ArchLayerExec. x@)) :qid internal_main__definitions_t__ArchLayerExec_box_axiom_definition :skolemid skolem_internal_main__definitions_t__ArchLayerExec_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.ArchLayerExec.) (= x@ (Poly%main!definitions_t.ArchLayerExec. (%Poly%main!definitions_t.ArchLayerExec. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.ArchLayerExec.)) :qid internal_main__definitions_t__ArchLayerExec_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__ArchLayerExec_unbox_axiom_definition)))
(assert (forall ((entry_size@ Int) (num_entries@ Int)) (! (=> (and (uInv SZ entry_size@) (uInv SZ num_entries@)) (has_type (Poly%main!definitions_t.ArchLayerExec. (main!definitions_t.ArchLayerExec./ArchLayerExec entry_size@ num_entries@)) TYPE%main!definitions_t.ArchLayerExec.)) :pattern ((has_type (Poly%main!definitions_t.ArchLayerExec. (main!definitions_t.ArchLayerExec./ArchLayerExec entry_size@ num_entries@)) TYPE%main!definitions_t.ArchLayerExec.)) :qid internal_main!definitions_t.ArchLayerExec./ArchLayerExec_constructor_definition :skolemid skolem_internal_main!definitions_t.ArchLayerExec./ArchLayerExec_constructor_definition)))
(assert (forall ((x@ main!definitions_t.ArchLayerExec.)) (! (= (main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size x@) (main!definitions_t.ArchLayerExec./ArchLayerExec/?entry_size x@)) :pattern ((main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size x@)) :qid internal_main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size_accessor_definition :skolemid skolem_internal_main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.ArchLayerExec.) (uInv SZ (main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%main!definitions_t.ArchLayerExec. x@)))) :pattern ((main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%main!definitions_t.ArchLayerExec. x@)) (has_type x@ TYPE%main!definitions_t.ArchLayerExec.)) :qid internal_main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size_invariant_definition :skolemid skolem_internal_main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size_invariant_definition)))
(assert (forall ((x@ main!definitions_t.ArchLayerExec.)) (! (= (main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries x@) (main!definitions_t.ArchLayerExec./ArchLayerExec/?num_entries x@)) :pattern ((main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries x@)) :qid internal_main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries_accessor_definition :skolemid skolem_internal_main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.ArchLayerExec.) (uInv SZ (main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%main!definitions_t.ArchLayerExec. x@)))) :pattern ((main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%main!definitions_t.ArchLayerExec. x@)) (has_type x@ TYPE%main!definitions_t.ArchLayerExec.)) :qid internal_main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries_invariant_definition :skolemid skolem_internal_main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries_invariant_definition)))
(assert (forall ((x@ main!definitions_t.ArchExec.)) (! (= x@ (%Poly%main!definitions_t.ArchExec. (Poly%main!definitions_t.ArchExec. x@))) :pattern ((Poly%main!definitions_t.ArchExec. x@)) :qid internal_main__definitions_t__ArchExec_box_axiom_definition :skolemid skolem_internal_main__definitions_t__ArchExec_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.ArchExec.) (= x@ (Poly%main!definitions_t.ArchExec. (%Poly%main!definitions_t.ArchExec. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.ArchExec.)) :qid internal_main__definitions_t__ArchExec_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__ArchExec_unbox_axiom_definition)))
(assert (forall ((x@ main!definitions_t.ArchExec.)) (! (= (main!definitions_t.ArchExec./ArchExec/layers x@) (main!definitions_t.ArchExec./ArchExec/?layers x@)) :pattern ((main!definitions_t.ArchExec./ArchExec/layers x@)) :qid internal_main!definitions_t.ArchExec./ArchExec/layers_accessor_definition :skolemid skolem_internal_main!definitions_t.ArchExec./ArchExec/layers_accessor_definition)))
(assert (forall ((x@ main!definitions_t.ArchExec.)) (! (has_type (Poly%main!definitions_t.ArchExec. x@) TYPE%main!definitions_t.ArchExec.) :pattern ((has_type (Poly%main!definitions_t.ArchExec. x@) TYPE%main!definitions_t.ArchExec.)) :qid internal_main__definitions_t__ArchExec_has_type_always_definition :skolemid skolem_internal_main__definitions_t__ArchExec_has_type_always_definition)))
(assert (forall ((x@ main!definitions_t.ArchLayer.)) (! (= x@ (%Poly%main!definitions_t.ArchLayer. (Poly%main!definitions_t.ArchLayer. x@))) :pattern ((Poly%main!definitions_t.ArchLayer. x@)) :qid internal_main__definitions_t__ArchLayer_box_axiom_definition :skolemid skolem_internal_main__definitions_t__ArchLayer_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.ArchLayer.) (= x@ (Poly%main!definitions_t.ArchLayer. (%Poly%main!definitions_t.ArchLayer. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.ArchLayer.)) :qid internal_main__definitions_t__ArchLayer_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__ArchLayer_unbox_axiom_definition)))
(assert (forall ((entry_size@ Int) (num_entries@ Int)) (! (=> (and (<= 0 entry_size@) (<= 0 num_entries@)) (has_type (Poly%main!definitions_t.ArchLayer. (main!definitions_t.ArchLayer./ArchLayer entry_size@ num_entries@)) TYPE%main!definitions_t.ArchLayer.)) :pattern ((has_type (Poly%main!definitions_t.ArchLayer. (main!definitions_t.ArchLayer./ArchLayer entry_size@ num_entries@)) TYPE%main!definitions_t.ArchLayer.)) :qid internal_main!definitions_t.ArchLayer./ArchLayer_constructor_definition :skolemid skolem_internal_main!definitions_t.ArchLayer./ArchLayer_constructor_definition)))
(assert (forall ((x@ main!definitions_t.ArchLayer.)) (! (= (main!definitions_t.ArchLayer./ArchLayer/entry_size x@) (main!definitions_t.ArchLayer./ArchLayer/?entry_size x@)) :pattern ((main!definitions_t.ArchLayer./ArchLayer/entry_size x@)) :qid internal_main!definitions_t.ArchLayer./ArchLayer/entry_size_accessor_definition :skolemid skolem_internal_main!definitions_t.ArchLayer./ArchLayer/entry_size_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.ArchLayer.) (<= 0 (main!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%main!definitions_t.ArchLayer. x@)))) :pattern ((main!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%main!definitions_t.ArchLayer. x@)) (has_type x@ TYPE%main!definitions_t.ArchLayer.)) :qid internal_main!definitions_t.ArchLayer./ArchLayer/entry_size_invariant_definition :skolemid skolem_internal_main!definitions_t.ArchLayer./ArchLayer/entry_size_invariant_definition)))
(assert (forall ((x@ main!definitions_t.ArchLayer.)) (! (= (main!definitions_t.ArchLayer./ArchLayer/num_entries x@) (main!definitions_t.ArchLayer./ArchLayer/?num_entries x@)) :pattern ((main!definitions_t.ArchLayer./ArchLayer/num_entries x@)) :qid internal_main!definitions_t.ArchLayer./ArchLayer/num_entries_accessor_definition :skolemid skolem_internal_main!definitions_t.ArchLayer./ArchLayer/num_entries_accessor_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.ArchLayer.) (<= 0 (main!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%main!definitions_t.ArchLayer. x@)))) :pattern ((main!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%main!definitions_t.ArchLayer. x@)) (has_type x@ TYPE%main!definitions_t.ArchLayer.)) :qid internal_main!definitions_t.ArchLayer./ArchLayer/num_entries_invariant_definition :skolemid skolem_internal_main!definitions_t.ArchLayer./ArchLayer/num_entries_invariant_definition)))
(assert (forall ((x@ main!definitions_t.Arch.)) (! (= x@ (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. x@))) :pattern ((Poly%main!definitions_t.Arch. x@)) :qid internal_main__definitions_t__Arch_box_axiom_definition :skolemid skolem_internal_main__definitions_t__Arch_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.Arch.) (= x@ (Poly%main!definitions_t.Arch. (%Poly%main!definitions_t.Arch. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.Arch.)) :qid internal_main__definitions_t__Arch_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__Arch_unbox_axiom_definition)))
(assert (forall ((x@ main!definitions_t.Arch.)) (! (= (main!definitions_t.Arch./Arch/layers x@) (main!definitions_t.Arch./Arch/?layers x@)) :pattern ((main!definitions_t.Arch./Arch/layers x@)) :qid internal_main!definitions_t.Arch./Arch/layers_accessor_definition :skolemid skolem_internal_main!definitions_t.Arch./Arch/layers_accessor_definition)))
(assert (forall ((x@ main!definitions_t.Arch.)) (! (has_type (Poly%main!definitions_t.Arch. x@) TYPE%main!definitions_t.Arch.) :pattern ((has_type (Poly%main!definitions_t.Arch. x@) TYPE%main!definitions_t.Arch.)) :qid internal_main__definitions_t__Arch_has_type_always_definition :skolemid skolem_internal_main__definitions_t__Arch_has_type_always_definition)))
(assert (forall ((x@ main!definitions_t.MapResult.)) (! (= x@ (%Poly%main!definitions_t.MapResult. (Poly%main!definitions_t.MapResult. x@))) :pattern ((Poly%main!definitions_t.MapResult. x@)) :qid internal_main__definitions_t__MapResult_box_axiom_definition :skolemid skolem_internal_main__definitions_t__MapResult_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.MapResult.) (= x@ (Poly%main!definitions_t.MapResult. (%Poly%main!definitions_t.MapResult. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.MapResult.)) :qid internal_main__definitions_t__MapResult_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__MapResult_unbox_axiom_definition)))
(assert (forall ((x@ main!definitions_t.MapResult.)) (! (has_type (Poly%main!definitions_t.MapResult. x@) TYPE%main!definitions_t.MapResult.) :pattern ((has_type (Poly%main!definitions_t.MapResult. x@) TYPE%main!definitions_t.MapResult.)) :qid internal_main__definitions_t__MapResult_has_type_always_definition :skolemid skolem_internal_main__definitions_t__MapResult_has_type_always_definition)))
(assert (forall ((x@ main!definitions_t.UnmapResult.)) (! (= x@ (%Poly%main!definitions_t.UnmapResult. (Poly%main!definitions_t.UnmapResult. x@))) :pattern ((Poly%main!definitions_t.UnmapResult. x@)) :qid internal_main__definitions_t__UnmapResult_box_axiom_definition :skolemid skolem_internal_main__definitions_t__UnmapResult_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%main!definitions_t.UnmapResult.) (= x@ (Poly%main!definitions_t.UnmapResult. (%Poly%main!definitions_t.UnmapResult. x@)))) :pattern ((has_type x@ TYPE%main!definitions_t.UnmapResult.)) :qid internal_main__definitions_t__UnmapResult_unbox_axiom_definition :skolemid skolem_internal_main__definitions_t__UnmapResult_unbox_axiom_definition)))
(assert (forall ((x@ main!definitions_t.UnmapResult.)) (! (has_type (Poly%main!definitions_t.UnmapResult. x@) TYPE%main!definitions_t.UnmapResult.) :pattern ((has_type (Poly%main!definitions_t.UnmapResult. x@) TYPE%main!definitions_t.UnmapResult.)) :qid internal_main__definitions_t__UnmapResult_has_type_always_definition :skolemid skolem_internal_main__definitions_t__UnmapResult_has_type_always_definition)))
(assert (forall ((x@ tuple%0.)) (! (= x@ (%Poly%tuple%0. (Poly%tuple%0. x@))) :pattern ((Poly%tuple%0. x@)) :qid internal_crate__tuple__0_box_axiom_definition :skolemid skolem_internal_crate__tuple__0_box_axiom_definition)))
(assert (forall ((x@ Poly)) (! (=> (has_type x@ TYPE%tuple%0.) (= x@ (Poly%tuple%0. (%Poly%tuple%0. x@)))) :pattern ((has_type x@ TYPE%tuple%0.)) :qid internal_crate__tuple__0_unbox_axiom_definition :skolemid skolem_internal_crate__tuple__0_unbox_axiom_definition)))
(assert (forall ((x@ tuple%0.)) (! (has_type (Poly%tuple%0. x@) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x@) TYPE%tuple%0.)) :qid internal_crate__tuple__0_has_type_always_definition :skolemid skolem_internal_crate__tuple__0_has_type_always_definition)))
(assert (forall ((x@ tuple%2.)) (! (= x@ (%Poly%tuple%2. (Poly%tuple%2. x@))) :pattern ((Poly%tuple%2. x@)) :qid internal_crate__tuple__2_box_axiom_definition :skolemid skolem_internal_crate__tuple__2_box_axiom_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%tuple%2. T%0& T%1&)) (= x@ (Poly%tuple%2. (%Poly%tuple%2. x@)))) :pattern ((has_type x@ (TYPE%tuple%2. T%0& T%1&))) :qid internal_crate__tuple__2_unbox_axiom_definition :skolemid skolem_internal_crate__tuple__2_unbox_axiom_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (field%0@ Poly) (field%1@ Poly)) (! (=> (and (has_type field%0@ T%0&) (has_type field%1@ T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 field%0@ field%1@)) (TYPE%tuple%2. T%0& T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 field%0@ field%1@)) (TYPE%tuple%2. T%0& T%1&))) :qid internal_tuple__2./tuple__2_constructor_definition :skolemid skolem_internal_tuple__2./tuple__2_constructor_definition)))
(assert (forall ((x@ tuple%2.)) (! (= (tuple%2./tuple%2/field%0 x@) (tuple%2./tuple%2/?field%0 x@)) :pattern ((tuple%2./tuple%2/field%0 x@)) :qid internal_tuple__2./tuple__2/field__0_accessor_definition :skolemid skolem_internal_tuple__2./tuple__2/field__0_accessor_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%tuple%2. T%0& T%1&)) (has_type (tuple%2./tuple%2/field%0 (%Poly%tuple%2. x@)) T%0&)) :pattern ((tuple%2./tuple%2/field%0 (%Poly%tuple%2. x@)) (has_type x@ (TYPE%tuple%2. T%0& T%1&))) :qid internal_tuple__2./tuple__2/field__0_invariant_definition :skolemid skolem_internal_tuple__2./tuple__2/field__0_invariant_definition)))
(assert (forall ((x@ tuple%2.)) (! (= (tuple%2./tuple%2/field%1 x@) (tuple%2./tuple%2/?field%1 x@)) :pattern ((tuple%2./tuple%2/field%1 x@)) :qid internal_tuple__2./tuple__2/field__1_accessor_definition :skolemid skolem_internal_tuple__2./tuple__2/field__1_accessor_definition)))
(assert (forall ((T%0& Type) (T%1& Type) (x@ Poly)) (! (=> (has_type x@ (TYPE%tuple%2. T%0& T%1&)) (has_type (tuple%2./tuple%2/field%1 (%Poly%tuple%2. x@)) T%1&)) :pattern ((tuple%2./tuple%2/field%1 (%Poly%tuple%2. x@)) (has_type x@ (TYPE%tuple%2. T%0& T%1&))) :qid internal_tuple__2./tuple__2/field__1_invariant_definition :skolemid skolem_internal_tuple__2./tuple__2/field__1_invariant_definition)))
(assert (forall ((x tuple%2.)) (! (=> ((_ is tuple%2./tuple%2) x) (height_lt (height (tuple%2./tuple%2/field%0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/field%0 x))) :qid prelude_datatype_height :skolemid skolem_prelude_datatype_height)))
(assert (forall ((x tuple%2.)) (! (=> ((_ is tuple%2./tuple%2) x) (height_lt (height (tuple%2./tuple%2/field%1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/field%1 x))) :qid prelude_datatype_height :skolemid skolem_prelude_datatype_height)))
(assert (forall ((T%0& Type) (T%0&. Type) (T%1& Type) (T%1&. Type) (deep@ Bool) (x@ Poly) (y@ Poly)) (! (=> (and (has_type x@ (TYPE%tuple%2. T%0& T%1&)) (has_type y@ (TYPE%tuple%2. T%0& T%1&)) (ext_eq deep@ T%0& T%0&. (tuple%2./tuple%2/field%0 (%Poly%tuple%2. x@)) (tuple%2./tuple%2/field%0 (%Poly%tuple%2. y@))) (ext_eq deep@ T%1& T%1&. (tuple%2./tuple%2/field%1 (%Poly%tuple%2. x@)) (tuple%2./tuple%2/field%1 (%Poly%tuple%2. y@)))) (ext_eq deep@ (TYPE%tuple%2. T%0& T%1&) (TYPE%tuple%2. T%0&. T%1&.) x@ y@)) :pattern ((ext_eq deep@ (TYPE%tuple%2. T%0& T%1&) (TYPE%tuple%2. T%0&. T%1&.) x@ y@)) :qid internal_tuple__2./tuple__2_ext_equal_definition :skolemid skolem_internal_tuple__2./tuple__2_ext_equal_definition)))
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Type Type Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Type Type Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Err")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? (Type Type Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Err_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? (Type Type Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::view")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.view.? (Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Type Type Type Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Type Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Type Type Type Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Type Type Type Type Type Type Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Type Type Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Type Type Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Type Type Type Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Type Type Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::contains_pair")
(declare-fun vstd!map.impl&%0.contains_pair.? (Type Type Type Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::union_prefer_right")
(declare-fun vstd!map.impl&%0.union_prefer_right.? (Type Type Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Type Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Type Type Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Type Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Type Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Type Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Type Type Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::filter")
(declare-fun vstd!seq_lib.impl&%0.filter.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Type Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::check_argument_is_seq")
(declare-fun vstd!seq_lib.check_argument_is_seq.? (Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Type Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Type Type Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Type Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Type Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Type Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Type Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Type Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Type Type Type Type Type Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::check_argument_is_set")
(declare-fun vstd!set_lib.check_argument_is_set.? (Type Type Poly) Poly)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::inv")
(declare-fun main!impl_u.l0.impl&%0.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::mappings_are_of_valid_size")
(declare-fun main!impl_u.l0.impl&%0.mappings_are_of_valid_size.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::mappings_are_aligned")
(declare-fun main!impl_u.l0.impl&%0.mappings_are_aligned.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::mappings_dont_overlap")
(declare-fun main!impl_u.l0.impl&%0.mappings_dont_overlap.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::candidate_mapping_in_bounds")
(declare-fun main!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::mappings_in_bounds")
(declare-fun main!impl_u.l0.impl&%0.mappings_in_bounds.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::accepted_mapping")
(declare-fun main!impl_u.l0.impl&%0.accepted_mapping.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::valid_mapping")
(declare-fun main!impl_u.l0.impl&%0.valid_mapping.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::map_frame")
(declare-fun main!impl_u.l0.impl&%0.map_frame.? (Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::accepted_resolve")
(declare-fun main!impl_u.l0.impl&%0.accepted_resolve.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::resolve")
(declare-fun main!impl_u.l0.impl&%0.resolve.? (Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::remove")
(declare-fun main!impl_u.l0.impl&%0.remove.? (Poly Poly) main!impl_u.l0.PageTableContents.)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::accepted_unmap")
(declare-fun main!impl_u.l0.impl&%0.accepted_unmap.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l0::PageTableContents::unmap")
(declare-fun main!impl_u.l0.impl&%0.unmap.? (Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::well_formed")
(declare-fun main!impl_u.l1.impl&%0.well_formed.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::entry_size")
(declare-fun main!impl_u.l1.impl&%0.entry_size.? (Poly) Int)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::num_entries")
(declare-fun main!impl_u.l1.impl&%0.num_entries.? (Poly) Int)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::empty")
(declare-fun main!impl_u.l1.impl&%0.empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::pages_match_entry_size")
(declare-fun main!impl_u.l1.impl&%0.pages_match_entry_size.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::directories_are_in_next_layer")
(declare-fun main!impl_u.l1.impl&%0.directories_are_in_next_layer.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::directories_obey_invariant")
(declare-fun main!impl_u.l1.impl&%0.directories_obey_invariant.? (Poly) Bool)
(declare-fun main!impl_u.l1.impl&%0.rec%directories_obey_invariant.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::directories_match_arch")
(declare-fun main!impl_u.l1.impl&%0.directories_match_arch.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::directories_are_nonempty")
(declare-fun main!impl_u.l1.impl&%0.directories_are_nonempty.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::frames_aligned")
(declare-fun main!impl_u.l1.impl&%0.frames_aligned.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::inv")
(declare-fun main!impl_u.l1.impl&%0.inv.? (Poly) Bool)
(declare-fun main!impl_u.l1.impl&%0.rec%inv.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::interp")
(declare-fun main!impl_u.l1.impl&%0.interp.? (Poly) main!impl_u.l0.PageTableContents.)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::upper_vaddr")
(declare-fun main!impl_u.l1.impl&%0.upper_vaddr.? (Poly) Int)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::index_for_vaddr")
(declare-fun main!impl_u.l1.impl&%0.index_for_vaddr.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::entry_base")
(declare-fun main!impl_u.l1.impl&%0.entry_base.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::entry_bounds")
(declare-fun main!impl_u.l1.impl&%0.entry_bounds.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::interp_of_entry")
(declare-fun main!impl_u.l1.impl&%0.interp_of_entry.? (Poly Poly) main!impl_u.l0.PageTableContents.)
(declare-fun main!impl_u.l1.impl&%0.rec%interp_of_entry.? (Poly Poly Fuel) main!impl_u.l0.PageTableContents.)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::interp_aux")
(declare-fun main!impl_u.l1.impl&%0.interp_aux.? (Poly Poly) main!impl_u.l0.PageTableContents.)
(declare-fun main!impl_u.l1.impl&%0.rec%interp_aux.? (Poly Poly Fuel) main!impl_u.l0.PageTableContents.)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::resolve")
(declare-fun main!impl_u.l1.impl&%0.resolve.? (Poly Poly) core!result.Result.)
(declare-fun main!impl_u.l1.impl&%0.rec%resolve.? (Poly Poly Fuel) core!result.Result.)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::update")
(declare-fun main!impl_u.l1.impl&%0.update.? (Poly Poly Poly) main!impl_u.l1.Directory.)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::candidate_mapping_in_bounds")
(declare-fun main!impl_u.l1.impl&%0.candidate_mapping_in_bounds.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::accepted_mapping")
(declare-fun main!impl_u.l1.impl&%0.accepted_mapping.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::new_empty_dir")
(declare-fun main!impl_u.l1.impl&%0.new_empty_dir.? (Poly Poly) main!impl_u.l1.Directory.)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::map_frame")
(declare-fun main!impl_u.l1.impl&%0.map_frame.? (Poly Poly Poly) core!result.Result.)
(declare-fun main!impl_u.l1.impl&%0.rec%map_frame.? (Poly Poly Poly Fuel) core!result.Result.)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::accepted_unmap")
(declare-fun main!impl_u.l1.impl&%0.accepted_unmap.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l1::Directory::unmap")
(declare-fun main!impl_u.l1.impl&%0.unmap.? (Poly Poly) core!result.Result.)
(declare-fun main!impl_u.l1.impl&%0.rec%unmap.? (Poly Poly Fuel) core!result.Result.)
(set-info :comment ";; Function-Decl main::impl_u::l1::result_map_ok")
(declare-fun main!impl_u.l1.result_map_ok.? (Type Type Type Type Type Type Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl main::impl_u::l1::result_map")
(declare-fun main!impl_u.l1.result_map.? (Type Type Type Type Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageDirectoryEntry::view")
(declare-fun main!impl_u.l2_impl.impl&%0.view.? (Poly) main!impl_u.l2_impl.GhostPageDirectoryEntry.)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageDirectoryEntry::addr_is_zero_padded")
(declare-fun main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageDirectoryEntry::layer")
(declare-fun main!impl_u.l2_impl.impl&%0.layer.? (Poly) Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::well_formed")
(declare-fun main!impl_u.l2_impl.impl&%1.well_formed.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::inv")
(declare-fun main!impl_u.l2_impl.impl&%1.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::entry_at_spec")
(declare-fun main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly Poly Poly Poly Poly) main!impl_u.l2_impl.PageDirectoryEntry.)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::view_at")
(declare-fun main!impl_u.l2_impl.impl&%1.view_at.? (Poly Poly Poly Poly Poly) main!impl_u.l2_impl.GhostPageDirectoryEntry.)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::ghost_pt_matches_structure")
(declare-fun main!impl_u.l2_impl.impl&%1.ghost_pt_matches_structure.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::directories_obey_invariant_at")
(declare-fun main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? (Poly Poly Poly Poly) Bool)
(declare-fun main!impl_u.l2_impl.impl&%1.rec%directories_obey_invariant_at.? (Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::empty_at")
(declare-fun main!impl_u.l2_impl.impl&%1.empty_at.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::layer_in_range")
(declare-fun main!impl_u.l2_impl.impl&%1.layer_in_range.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::inv_at")
(declare-fun main!impl_u.l2_impl.impl&%1.inv_at.? (Poly Poly Poly Poly) Bool)
(declare-fun main!impl_u.l2_impl.impl&%1.rec%inv_at.? (Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::entry_addrs_are_zero_padded")
(declare-fun main!impl_u.l2_impl.impl&%1.entry_addrs_are_zero_padded.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::ghost_pt_used_regions_pairwise_disjoint")
(declare-fun main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_pairwise_disjoint.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::ghost_pt_region_notin_used_regions")
(declare-fun main!impl_u.l2_impl.impl&%1.ghost_pt_region_notin_used_regions.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::ghost_pt_used_regions_rtrancl")
(declare-fun main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_rtrancl.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::interp_at")
(declare-fun main!impl_u.l2_impl.impl&%1.interp_at.? (Poly Poly Poly Poly Poly) main!impl_u.l1.Directory.)
(declare-fun main!impl_u.l2_impl.impl&%1.rec%interp_at.? (Poly Poly Poly Poly Poly Fuel) main!impl_u.l1.Directory.)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::interp_at_entry")
(declare-fun main!impl_u.l2_impl.impl&%1.interp_at_entry.? (Poly Poly Poly Poly Poly Poly) main!impl_u.l1.NodeEntry.)
(declare-fun main!impl_u.l2_impl.impl&%1.rec%interp_at_entry.? (Poly Poly Poly Poly Poly Poly Fuel) main!impl_u.l1.NodeEntry.)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::interp_at_aux")
(declare-fun main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly Poly Poly Poly Poly Poly) vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-fun main!impl_u.l2_impl.impl&%1.rec%interp_at_aux.? (Poly Poly Poly Poly Poly Poly Fuel) vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::interp")
(declare-fun main!impl_u.l2_impl.impl&%1.interp.? (Poly) main!impl_u.l1.Directory.)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::PageTable::accepted_mapping")
(declare-fun main!impl_u.l2_impl.impl&%1.accepted_mapping.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_FLAG_P")
(declare-fun main!impl_u.l2_impl.MASK_FLAG_P.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_FLAG_RW")
(declare-fun main!impl_u.l2_impl.MASK_FLAG_RW.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_FLAG_US")
(declare-fun main!impl_u.l2_impl.MASK_FLAG_US.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_FLAG_PWT")
(declare-fun main!impl_u.l2_impl.MASK_FLAG_PWT.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_FLAG_PCD")
(declare-fun main!impl_u.l2_impl.MASK_FLAG_PCD.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_FLAG_A")
(declare-fun main!impl_u.l2_impl.MASK_FLAG_A.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_FLAG_XD")
(declare-fun main!impl_u.l2_impl.MASK_FLAG_XD.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_ADDR")
(declare-fun main!impl_u.l2_impl.MASK_ADDR.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_PG_FLAG_D")
(declare-fun main!impl_u.l2_impl.MASK_PG_FLAG_D.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_PG_FLAG_G")
(declare-fun main!impl_u.l2_impl.MASK_PG_FLAG_G.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_PG_FLAG_PAT")
(declare-fun main!impl_u.l2_impl.MASK_PG_FLAG_PAT.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_L1_PG_FLAG_PS")
(declare-fun main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_L2_PG_FLAG_PS")
(declare-fun main!impl_u.l2_impl.MASK_L2_PG_FLAG_PS.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_L3_PG_FLAG_PAT")
(declare-fun main!impl_u.l2_impl.MASK_L3_PG_FLAG_PAT.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_DIR_ADDR")
(declare-fun main!impl_u.l2_impl.MASK_DIR_ADDR.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_L1_PG_ADDR")
(declare-fun main!impl_u.l2_impl.MASK_L1_PG_ADDR.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_L2_PG_ADDR")
(declare-fun main!impl_u.l2_impl.MASK_L2_PG_ADDR.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::MASK_L3_PG_ADDR")
(declare-fun main!impl_u.l2_impl.MASK_L3_PG_ADDR.? () Int)
(set-info :comment ";; Function-Decl main::impl_u::l2_impl::addr_is_zero_padded")
(declare-fun main!impl_u.l2_impl.addr_is_zero_padded.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::impl_u::indexing::index_from_offset")
(declare-fun main!impl_u.indexing.index_from_offset.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl main::impl_u::indexing::index_from_base_and_addr")
(declare-fun main!impl_u.indexing.index_from_base_and_addr.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::impl_u::indexing::entry_base_from_index")
(declare-fun main!impl_u.indexing.entry_base_from_index.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::impl_u::indexing::next_entry_base_from_index")
(declare-fun main!impl_u.indexing.next_entry_base_from_index.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::spec_t::mem::PageTableMemory::alloc_available_pages")
(declare-fun main!spec_t.mem.impl&%1.alloc_available_pages.? (Poly) Int)
(set-info :comment ";; Function-Decl main::spec_t::mem::PageTableMemory::regions")
(declare-fun main!spec_t.mem.impl&%1.regions.? (Poly) vstd!set.Set<main!definitions_t.MemRegion.>.)
(set-info :comment ";; Function-Decl main::spec_t::mem::PageTableMemory::region_view")
(declare-fun main!spec_t.mem.impl&%1.region_view.? (Poly Poly) vstd!seq.Seq<u64.>.)
(set-info :comment ";; Function-Decl main::spec_t::mem::PageTableMemory::inv")
(declare-fun main!spec_t.mem.impl&%1.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::spec_t::mem::PageTableMemory::cr3_spec")
(declare-fun main!spec_t.mem.impl&%1.cr3_spec.? (Poly) main!definitions_t.MemRegionExec.)
(set-info :comment ";; Function-Decl main::spec_t::mem::PageTableMemory::spec_read")
(declare-fun main!spec_t.mem.impl&%1.spec_read.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::spec_t::mem::PageTableMemory::phys_mem_ref_as_usize_spec")
(declare-fun main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl main::definitions_t::MemRegion::contains")
(declare-fun main!definitions_t.impl&%1.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::definitions_t::MemRegionExec::view")
(declare-fun main!definitions_t.impl&%2.view.? (Poly) main!definitions_t.MemRegion.)
(set-info :comment ";; Function-Decl main::definitions_t::PageTableEntryExec::view")
(declare-fun main!definitions_t.impl&%3.view.? (Poly) main!definitions_t.PageTableEntry.)
(set-info :comment ";; Function-Decl main::definitions_t::ArchLayerExec::view")
(declare-fun main!definitions_t.impl&%5.view.? (Poly) main!definitions_t.ArchLayer.)
(set-info :comment ";; Function-Decl main::definitions_t::ArchExec::view")
(declare-fun main!definitions_t.impl&%6.view.? (Poly) main!definitions_t.Arch.)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::entry_size")
(declare-fun main!definitions_t.impl&%7.entry_size.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::num_entries")
(declare-fun main!definitions_t.impl&%7.num_entries.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::upper_vaddr")
(declare-fun main!definitions_t.impl&%7.upper_vaddr.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::inv")
(declare-fun main!definitions_t.impl&%7.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun main!definitions_t.impl&%7.entry_size_is_next_layer_size.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::contains_entry_size_at_index_atleast")
(declare-fun main!definitions_t.impl&%7.contains_entry_size_at_index_atleast.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::contains_entry_size")
(declare-fun main!definitions_t.impl&%7.contains_entry_size.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::index_for_vaddr")
(declare-fun main!definitions_t.impl&%7.index_for_vaddr.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::entry_base")
(declare-fun main!definitions_t.impl&%7.entry_base.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::definitions_t::Arch::next_entry_base")
(declare-fun main!definitions_t.impl&%7.next_entry_base.? (Poly Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl main::definitions_t::X86_NUM_LAYERS")
(declare-fun main!definitions_t.X86_NUM_LAYERS.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::X86_NUM_ENTRIES")
(declare-fun main!definitions_t.X86_NUM_ENTRIES.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::MAXPHYADDR_BITS")
(declare-fun main!definitions_t.MAXPHYADDR_BITS.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::MAXPHYADDR")
(declare-fun main!definitions_t.MAXPHYADDR.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::WORD_SIZE")
(declare-fun main!definitions_t.WORD_SIZE.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::PAGE_SIZE")
(declare-fun main!definitions_t.PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::X86_MAX_ENTRY_SIZE")
(declare-fun main!definitions_t.X86_MAX_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::MAX_BASE")
(declare-fun main!definitions_t.MAX_BASE.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::L3_ENTRY_SIZE")
(declare-fun main!definitions_t.L3_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::L2_ENTRY_SIZE")
(declare-fun main!definitions_t.L2_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::L1_ENTRY_SIZE")
(declare-fun main!definitions_t.L1_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::L0_ENTRY_SIZE")
(declare-fun main!definitions_t.L0_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl main::definitions_t::aligned")
(declare-fun main!definitions_t.aligned.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::definitions_t::between")
(declare-fun main!definitions_t.between.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::definitions_t::new_seq")
(declare-fun main!definitions_t.new_seq.? (Type Type Poly Poly) Poly)
(declare-fun main!definitions_t.rec%new_seq.? (Type Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl main::definitions_t::overlap")
(declare-fun main!definitions_t.overlap.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl main::definitions_t::x86_arch_exec_spec")
(declare-fun main!definitions_t.x86_arch_exec_spec.? (Poly) main!definitions_t.ArchExec.)
(set-info :comment ";; Function-Decl main::definitions_t::x86_arch_spec")
(declare-fun main!definitions_t.x86_arch_spec.? () main!definitions_t.Arch.)
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(assert (forall ((Self%& Type) (Self%&. Type) (T& Type) (T&. Type) (E& Type) (E&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%& Self%&. T& T&. E& E&. self~2@) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%& Self%&. T& T&. E& E&. self~2@)) :qid internal_vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.?_pre_post_definition :skolemid skolem_internal_vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(assert (forall ((Self%& Type) (Self%&. Type) (T& Type) (T&. Type) (E& Type) (E&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%& Self%&. T& T&. E& E&. self~2@) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%& Self%&. T& T&. E& E&. self~2@)) :qid internal_vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.?_pre_post_definition :skolemid skolem_internal_vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Err")
(assert (forall ((Self%& Type) (Self%&. Type) (T& Type) (T&. Type) (E& Type) (E&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%& Self%&. T& T&. E& E&. self~2@) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? Self%& Self%&. T& T&. E& E&. self~2@)) :qid internal_vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.?_pre_post_definition :skolemid skolem_internal_vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Err_0")
(assert (forall ((Self%& Type) (Self%&. Type) (T& Type) (T&. Type) (E& Type) (E&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%& Self%&. T& T&. E& E&. self~2@) E&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? Self%& Self%&. T& T&. E& E&. self~2@)) :qid internal_vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.?_pre_post_definition :skolemid skolem_internal_vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T& Type) (T&. Type) (E& Type) (E&. Type) (self~2@ Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (TYPE%core!result.Result. T& E&) (TYPE%core!result.Result. T&. E&.) T& T&. E& E&. self~2@) (B ((_ is core!result.Result./Ok) (%Poly%core!result.Result. self~2@)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (TYPE%core!result.Result. T& E&) (TYPE%core!result.Result. T&. E&.) T& T&. E& E&. self~2@)) :qid internal_vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.?_definition :skolemid skolem_internal_vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.?_definition))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Ok_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T& Type) (T&. Type) (E& Type) (E&. Type) (self~2@ Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (TYPE%core!result.Result. T& E&) (TYPE%core!result.Result. T&. E&.) T& T&. E& E&. self~2@) (core!result.Result./Ok/_0 (%Poly%core!result.Result. self~2@))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (TYPE%core!result.Result. T& E&) (TYPE%core!result.Result. T&. E&.) T& T&. E& E&. self~2@)) :qid internal_vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.?_definition :skolemid skolem_internal_vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.?_definition))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Err")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Err.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Err.) (forall ((T& Type) (T&. Type) (E& Type) (E&. Type) (self~2@ Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? (TYPE%core!result.Result. T& E&) (TYPE%core!result.Result. T&. E&.) T& T&. E& E&. self~2@) (B ((_ is core!result.Result./Err) (%Poly%core!result.Result. self~2@)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.? (TYPE%core!result.Result. T& E&) (TYPE%core!result.Result. T&. E&.) T& T&. E& E&. self~2@)) :qid internal_vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.?_definition :skolemid skolem_internal_vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.?_definition))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Err_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Err_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Err_0.) (forall ((T& Type) (T&. Type) (E& Type) (E&. Type) (self~2@ Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? (TYPE%core!result.Result. T& E&) (TYPE%core!result.Result. T&. E&.) T& T&. E& E&. self~2@) (core!result.Result./Err/_0 (%Poly%core!result.Result. self~2@))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.? (TYPE%core!result.Result. T& E&) (TYPE%core!result.Result. T&. E&.) T& T&. E& E&. self~2@)) :qid internal_vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.?_definition :skolemid skolem_internal_vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.?_definition))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%& Type) (Self%&. Type) (T& Type) (T&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%& Self%&. T& T&. self~2@) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%& Self%&. T& T&. self~2@)) :qid internal_vstd!std_specs.option.OptionAdditionalFns.is_Some.?_pre_post_definition :skolemid skolem_internal_vstd!std_specs.option.OptionAdditionalFns.is_Some.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%& Type) (Self%&. Type) (T& Type) (T&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%& Self%&. T& T&. self~2@) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%& Self%&. T& T&. self~2@)) :qid internal_vstd!std_specs.option.OptionAdditionalFns.get_Some_0.?_pre_post_definition :skolemid skolem_internal_vstd!std_specs.option.OptionAdditionalFns.get_Some_0.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%& Type) (Self%&. Type) (T& Type) (T&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%& Self%&. T& T&. self~2@) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%& Self%&. T& T&. self~2@)) :qid internal_vstd!std_specs.option.OptionAdditionalFns.is_None.?_pre_post_definition :skolemid skolem_internal_vstd!std_specs.option.OptionAdditionalFns.is_None.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T& Type) (T&. Type) (self~2@ Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? (TYPE%core!option.Option. T&) (TYPE%core!option.Option. T&.) T& T&. self~2@) (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. self~2@)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? (TYPE%core!option.Option. T&) (TYPE%core!option.Option. T&.) T& T&. self~2@)) :qid internal_vstd!std_specs.option.OptionAdditionalFns.is_Some.?_definition :skolemid skolem_internal_vstd!std_specs.option.OptionAdditionalFns.is_Some.?_definition))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T& Type) (T&. Type) (self~2@ Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (TYPE%core!option.Option. T&) (TYPE%core!option.Option. T&.) T& T&. self~2@) (core!option.Option./Some/_0 (%Poly%core!option.Option. self~2@))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (TYPE%core!option.Option. T&) (TYPE%core!option.Option. T&.) T& T&. self~2@)) :qid internal_vstd!std_specs.option.OptionAdditionalFns.get_Some_0.?_definition :skolemid skolem_internal_vstd!std_specs.option.OptionAdditionalFns.get_Some_0.?_definition))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T& Type) (T&. Type) (self~2@ Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? (TYPE%core!option.Option. T&) (TYPE%core!option.Option. T&.) T& T&. self~2@) (B ((_ is core!option.Option./None) (%Poly%core!option.Option. self~2@)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? (TYPE%core!option.Option. T&) (TYPE%core!option.Option. T&.) T& T&. self~2@)) :qid internal_vstd!std_specs.option.OptionAdditionalFns.is_None.?_definition :skolemid skolem_internal_vstd!std_specs.option.OptionAdditionalFns.is_None.?_definition))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::view")
(assert (forall ((Self%& Type) (Self%&. Type) (T& Type) (T&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ Self%&) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.view.? Self%& Self%&. T& T&. self~2@) (TYPE%vstd!seq.Seq. T&))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.view.? Self%& Self%&. T& T&. self~2@)) :qid internal_vstd!std_specs.vec.VecAdditionalSpecFns.view.?_pre_post_definition :skolemid skolem_internal_vstd!std_specs.vec.VecAdditionalSpecFns.view.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (<= 0 (vstd!seq.Seq.len.? A& A&. self~2@))) :pattern ((vstd!seq.Seq.len.? A& A&. self~2@)) :qid internal_vstd!seq.Seq.len.?_pre_post_definition :skolemid skolem_internal_vstd!seq.Seq.len.?_pre_post_definition)))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (i~4@ Poly)) (! (= (req%vstd!seq.Seq.index. A& A&. self~2@ i~4@) (=> %%global_location_label%%0 (and (<= 0 (%I i~4@)) (< (%I i~4@) (vstd!seq.Seq.len.? A& A&. self~2@))))) :pattern ((req%vstd!seq.Seq.index. A& A&. self~2@ i~4@)) :qid internal_req__vstd!seq.Seq.index._definition :skolemid skolem_internal_req__vstd!seq.Seq.index._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (i~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type i~4@ INT)) (has_type (vstd!seq.Seq.index.? A& A&. self~2@ i~4@) A&)) :pattern ((vstd!seq.Seq.index.? A& A&. self~2@ i~4@)) :qid internal_vstd!seq.Seq.index.?_pre_post_definition :skolemid skolem_internal_vstd!seq.Seq.index.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T& Type) (T&. Type) (A& Type) (A&. Type) (v~2@ Poly)) (! (=> (has_type v~2@ (TYPE%alloc!vec.Vec. T& A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T& T&. A& A&. v~2@))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T& T&. A& A&. v~2@)) :qid internal_vstd!std_specs.vec.spec_vec_len.?_pre_post_definition :skolemid skolem_internal_vstd!std_specs.vec.spec_vec_len.?_pre_post_definition)))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Type Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (i~4@ Poly) (a~6@ Poly)) (! (= (req%vstd!seq.Seq.update. A& A&. self~2@ i~4@ a~6@) (=> %%global_location_label%%1 (and (<= 0 (%I i~4@)) (< (%I i~4@) (vstd!seq.Seq.len.? A& A&. self~2@))))) :pattern ((req%vstd!seq.Seq.update. A& A&. self~2@ i~4@ a~6@)) :qid internal_req__vstd!seq.Seq.update._definition :skolemid skolem_internal_req__vstd!seq.Seq.update._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (i~4@ Poly) (a~6@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type i~4@ INT) (has_type a~6@ A&)) (has_type (vstd!seq.Seq.update.? A& A&. self~2@ i~4@ a~6@) (TYPE%vstd!seq.Seq. A&))) :pattern ((vstd!seq.Seq.update.? A& A&. self~2@ i~4@ a~6@)) :qid internal_vstd!seq.Seq.update.?_pre_post_definition :skolemid skolem_internal_vstd!seq.Seq.update.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::axiom_spec_len")
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Type Type Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (v~2@ Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A& A&. v~2@) (= (vstd!std_specs.vec.spec_vec_len.? A& A&. TYPE%alloc!alloc.Global. TYPE%alloc!alloc.Global. v~2@) (vstd!seq.Seq.len.? A& A&. (vstd!std_specs.vec.VecAdditionalSpecFns.view.? (TYPE%alloc!vec.Vec. A& TYPE%alloc!alloc.Global.) (TYPE%alloc!vec.Vec. A&. TYPE%alloc!alloc.Global.) A& A&. v~2@)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A& A&. v~2@)) :qid internal_ens__vstd!std_specs.vec.axiom_spec_len._definition :skolemid skolem_internal_ens__vstd!std_specs.vec.axiom_spec_len._definition)))
(assert (forall ((A& Type) (A&. Type) (v~2$ Poly)) (! (=> (has_type v~2$ (TYPE%alloc!vec.Vec. A& TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A& A&. TYPE%alloc!alloc.Global. TYPE%alloc!alloc.Global. v~2$) (vstd!seq.Seq.len.? A& A&. (vstd!std_specs.vec.VecAdditionalSpecFns.view.? (TYPE%alloc!vec.Vec. A& TYPE%alloc!alloc.Global.) (TYPE%alloc!vec.Vec. A&. TYPE%alloc!alloc.Global.) A& A&. v~2$)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A& A&. TYPE%alloc!alloc.Global. TYPE%alloc!alloc.Global. v~2$)) :qid user_vstd__std_specs__vec__axiom_spec_len_0 :skolemid skolem_user_vstd__std_specs__vec__axiom_spec_len_0)))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A& Type) (A&. Type)) (! (has_type (vstd!seq.Seq.empty.? A& A&.) (TYPE%vstd!seq.Seq. A&)) :pattern ((vstd!seq.Seq.empty.? A& A&.)) :qid internal_vstd!seq.Seq.empty.?_pre_post_definition :skolemid skolem_internal_vstd!seq.Seq.empty.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (a~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type a~4@ A&)) (has_type (vstd!seq.Seq.push.? A& A&. self~2@ a~4@) (TYPE%vstd!seq.Seq. A&))) :pattern ((vstd!seq.Seq.push.? A& A&. self~2@ a~4@)) :qid internal_vstd!seq.Seq.push.?_pre_post_definition :skolemid skolem_internal_vstd!seq.Seq.push.?_pre_post_definition)))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (i~4@ Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A& A&. self~2@ i~4@) (=> %%global_location_label%%2 (and (<= 0 (%I i~4@)) (< (%I i~4@) (vstd!seq.Seq.len.? A& A&. self~2@))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A& A&. self~2@ i~4@)) :qid internal_req__vstd!seq.impl&__0.spec_index._definition :skolemid skolem_internal_req__vstd!seq.impl&__0.spec_index._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A& Type) (A&. Type) (self~2@ Poly) (i~4@ Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A& A&. self~2@ i~4@) (vstd!seq.Seq.index.? A& A&. self~2@ i~4@)) :pattern ((vstd!seq.impl&%0.spec_index.? A& A&. self~2@ i~4@)) :qid internal_vstd!seq.impl&__0.spec_index.?_definition :skolemid skolem_internal_vstd!seq.impl&__0.spec_index.?_definition))))
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (i~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type i~4@ INT)) (has_type (vstd!seq.impl&%0.spec_index.? A& A&. self~2@ i~4@) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A& A&. self~2@ i~4@)) :qid internal_vstd!seq.impl&__0.spec_index.?_pre_post_definition :skolemid skolem_internal_vstd!seq.impl&__0.spec_index.?_pre_post_definition)))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Type Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (start_inclusive~4@ Poly) (end_exclusive~6@ Poly)) (! (= (req%vstd!seq.Seq.subrange. A& A&. self~2@ start_inclusive~4@ end_exclusive~6@) (=> %%global_location_label%%3 (and (and (<= 0 (%I start_inclusive~4@)) (<= (%I start_inclusive~4@) (%I end_exclusive~6@))) (<= (%I end_exclusive~6@) (vstd!seq.Seq.len.? A& A&. self~2@))))) :pattern ((req%vstd!seq.Seq.subrange. A& A&. self~2@ start_inclusive~4@ end_exclusive~6@)) :qid internal_req__vstd!seq.Seq.subrange._definition :skolemid skolem_internal_req__vstd!seq.Seq.subrange._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (start_inclusive~4@ Poly) (end_exclusive~6@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type start_inclusive~4@ INT) (has_type end_exclusive~6@ INT)) (has_type (vstd!seq.Seq.subrange.? A& A&. self~2@ start_inclusive~4@ end_exclusive~6@) (TYPE%vstd!seq.Seq. A&))) :pattern ((vstd!seq.Seq.subrange.? A& A&. self~2@ start_inclusive~4@ end_exclusive~6@)) :qid internal_vstd!seq.Seq.subrange.?_pre_post_definition :skolemid skolem_internal_vstd!seq.Seq.subrange.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (rhs~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type rhs~4@ (TYPE%vstd!seq.Seq. A&))) (has_type (vstd!seq.Seq.add.? A& A&. self~2@ rhs~4@) (TYPE%vstd!seq.Seq. A&))) :pattern ((vstd!seq.Seq.add.? A& A&. self~2@ rhs~4@)) :qid internal_vstd!seq.Seq.add.?_pre_post_definition :skolemid skolem_internal_vstd!seq.Seq.add.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A& Type) (A&. Type) (self~2@ Poly) (rhs~4@ Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A& A&. self~2@ rhs~4@) (vstd!seq.Seq.add.? A& A&. self~2@ rhs~4@)) :pattern ((vstd!seq.impl&%0.spec_add.? A& A&. self~2@ rhs~4@)) :qid internal_vstd!seq.impl&__0.spec_add.?_definition :skolemid skolem_internal_vstd!seq.impl&__0.spec_add.?_definition))))
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (rhs~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type rhs~4@ (TYPE%vstd!seq.Seq. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A& A&. self~2@ rhs~4@) (TYPE%vstd!seq.Seq. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A& A&. self~2@ rhs~4@)) :qid internal_vstd!seq.impl&__0.spec_add.?_pre_post_definition :skolemid skolem_internal_vstd!seq.impl&__0.spec_add.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A& Type) (A&. Type)) (! (has_type (vstd!pervasive.arbitrary.? A& A&.) A&) :pattern ((vstd!pervasive.arbitrary.? A& A&.)) :qid internal_vstd!pervasive.arbitrary.?_pre_post_definition :skolemid skolem_internal_vstd!pervasive.arbitrary.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::seq_lib::check_argument_is_seq")
(assert (fuel_bool_default fuel%vstd!seq_lib.check_argument_is_seq.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.check_argument_is_seq.) (forall ((A& Type) (A&. Type) (s~2@ Poly)) (! (= (vstd!seq_lib.check_argument_is_seq.? A& A&. s~2@) s~2@) :pattern ((vstd!seq_lib.check_argument_is_seq.? A& A&. s~2@)) :qid internal_vstd!seq_lib.check_argument_is_seq.?_definition :skolemid skolem_internal_vstd!seq_lib.check_argument_is_seq.?_definition))))
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly)) (! (=> (has_type s~2@ (TYPE%vstd!seq.Seq. A&)) (has_type (vstd!seq_lib.check_argument_is_seq.? A& A&. s~2@) (TYPE%vstd!seq.Seq. A&))) :pattern ((vstd!seq_lib.check_argument_is_seq.? A& A&. s~2@)) :qid internal_vstd!seq_lib.check_argument_is_seq.?_pre_post_definition :skolemid skolem_internal_vstd!seq_lib.check_argument_is_seq.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type)) (! (has_type (vstd!map.impl&%0.empty.? K& K&. V& V&.) (TYPE%vstd!map.Map. K& V&)) :pattern ((vstd!map.impl&%0.empty.? K& K&. V& V&.)) :qid internal_vstd!map.impl&__0.empty.?_pre_post_definition :skolemid skolem_internal_vstd!map.impl&__0.empty.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A& Type) (A&. Type) (V& Type) (V&. Type) (F& Type) (F&. Type) (self~2@ Poly) (f~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!set.Set. A&)) (has_type f~4@ F&)) (has_type (vstd!set.impl&%0.mk_map.? A& A&. V& V&. F& F&. self~2@ f~4@) (TYPE%vstd!map.Map. A& V&))) :pattern ((vstd!set.impl&%0.mk_map.? A& A&. V& V&. F& F&. self~2@ f~4@)) :qid internal_vstd!set.impl&__0.mk_map.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.mk_map.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ (TYPE%vstd!set.Set. A&)) (has_type (vstd!set.impl&%0.complement.? A& A&. self~2@) (TYPE%vstd!set.Set. A&))) :pattern ((vstd!set.impl&%0.complement.? A& A&. self~2@)) :qid internal_vstd!set.impl&__0.complement.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.complement.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A& Type) (A&. Type)) (! (has_type (vstd!set.impl&%0.empty.? A& A&.) (TYPE%vstd!set.Set. A&)) :pattern ((vstd!set.impl&%0.empty.? A& A&.)) :qid internal_vstd!set.impl&__0.empty.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.empty.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A& Type) (A&. Type) (F& Type) (F&. Type) (f~2@ Poly)) (! (=> (has_type f~2@ F&) (has_type (vstd!set.impl&%0.new.? A& A&. F& F&. f~2@) (TYPE%vstd!set.Set. A&))) :pattern ((vstd!set.impl&%0.new.? A& A&. F& F&. f~2@)) :qid internal_vstd!set.impl&__0.new.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.new.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (impl%2& Type) (impl%2&. Type) (impl%3& Type) (impl%3&. Type) (fk~2@ Poly) (fv~4@ Poly)) (! (= (vstd!map.impl&%0.new.? K& K&. V& V&. impl%2& impl%2&. impl%3& impl%3&. fk~2@ fv~4@) (vstd!set.impl&%0.mk_map.? K& K&. V& V&. impl%3& impl%3&. (vstd!set.impl&%0.new.? K& K&. impl%2& impl%2&. fk~2@) fv~4@)) :pattern ((vstd!map.impl&%0.new.? K& K&. V& V&. impl%2& impl%2&. impl%3& impl%3&. fk~2@ fv~4@)) :qid internal_vstd!map.impl&__0.new.?_definition :skolemid skolem_internal_vstd!map.impl&__0.new.?_definition))))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (impl%2& Type) (impl%2&. Type) (impl%3& Type) (impl%3&. Type) (fk~2@ Poly) (fv~4@ Poly)) (! (=> (and (has_type fk~2@ impl%2&) (has_type fv~4@ impl%3&)) (has_type (vstd!map.impl&%0.new.? K& K&. V& V&. impl%2& impl%2&. impl%3& impl%3&. fk~2@ fv~4@) (TYPE%vstd!map.Map. K& V&))) :pattern ((vstd!map.impl&%0.new.? K& K&. V& V&. impl%2& impl%2&. impl%3& impl%3&. fk~2@ fv~4@)) :qid internal_vstd!map.impl&__0.new.?_pre_post_definition :skolemid skolem_internal_vstd!map.impl&__0.new.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ (TYPE%vstd!map.Map. K& V&)) (has_type (vstd!map.impl&%0.dom.? K& K&. V& V&. self~2@) (TYPE%vstd!set.Set. K&))) :pattern ((vstd!map.impl&%0.dom.? K& K&. V& V&. self~2@)) :qid internal_vstd!map.impl&__0.dom.?_pre_post_definition :skolemid skolem_internal_vstd!map.impl&__0.dom.?_pre_post_definition)))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Type Type Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (key~4@ Poly)) (! (= (req%vstd!map.impl&%0.index. K& K&. V& V&. self~2@ key~4@) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. self~2@) key~4@))) :pattern ((req%vstd!map.impl&%0.index. K& K&. V& V&. self~2@ key~4@)) :qid internal_req__vstd!map.impl&__0.index._definition :skolemid skolem_internal_req__vstd!map.impl&__0.index._definition)))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (key~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!map.Map. K& V&)) (has_type key~4@ K&)) (has_type (vstd!map.impl&%0.index.? K& K&. V& V&. self~2@ key~4@) V&)) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. self~2@ key~4@)) :qid internal_vstd!map.impl&__0.index.?_pre_post_definition :skolemid skolem_internal_vstd!map.impl&__0.index.?_pre_post_definition)))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Type Type Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (key~4@ Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K& K&. V& V&. self~2@ key~4@) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. self~2@) key~4@))) :pattern ((req%vstd!map.impl&%0.spec_index. K& K&. V& V&. self~2@ key~4@)) :qid internal_req__vstd!map.impl&__0.spec_index._definition :skolemid skolem_internal_req__vstd!map.impl&__0.spec_index._definition)))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (key~4@ Poly)) (! (= (vstd!map.impl&%0.spec_index.? K& K&. V& V&. self~2@ key~4@) (vstd!map.impl&%0.index.? K& K&. V& V&. self~2@ key~4@)) :pattern ((vstd!map.impl&%0.spec_index.? K& K&. V& V&. self~2@ key~4@)) :qid internal_vstd!map.impl&__0.spec_index.?_definition :skolemid skolem_internal_vstd!map.impl&__0.spec_index.?_definition))))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (key~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!map.Map. K& V&)) (has_type key~4@ K&)) (has_type (vstd!map.impl&%0.spec_index.? K& K&. V& V&. self~2@ key~4@) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K& K&. V& V&. self~2@ key~4@)) :qid internal_vstd!map.impl&__0.spec_index.?_pre_post_definition :skolemid skolem_internal_vstd!map.impl&__0.spec_index.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (key~4@ Poly) (value~6@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!map.Map. K& V&)) (has_type key~4@ K&) (has_type value~6@ V&)) (has_type (vstd!map.impl&%0.insert.? K& K&. V& V&. self~2@ key~4@ value~6@) (TYPE%vstd!map.Map. K& V&))) :pattern ((vstd!map.impl&%0.insert.? K& K&. V& V&. self~2@ key~4@ value~6@)) :qid internal_vstd!map.impl&__0.insert.?_pre_post_definition :skolemid skolem_internal_vstd!map.impl&__0.insert.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (key~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!map.Map. K& V&)) (has_type key~4@ K&)) (has_type (vstd!map.impl&%0.remove.? K& K&. V& V&. self~2@ key~4@) (TYPE%vstd!map.Map. K& V&))) :pattern ((vstd!map.impl&%0.remove.? K& K&. V& V&. self~2@ key~4@)) :qid internal_vstd!map.impl&__0.remove.?_pre_post_definition :skolemid skolem_internal_vstd!map.impl&__0.remove.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.contains_pair.) (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (k~4@ Poly) (v~6@ Poly)) (! (= (vstd!map.impl&%0.contains_pair.? K& K&. V& V&. self~2@ k~4@ v~6@) (and (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. self~2@) k~4@) (= (vstd!map.impl&%0.index.? K& K&. V& V&. self~2@ k~4@) v~6@))) :pattern ((vstd!map.impl&%0.contains_pair.? K& K&. V& V&. self~2@ k~4@ v~6@)) :qid internal_vstd!map.impl&__0.contains_pair.?_definition :skolemid skolem_internal_vstd!map.impl&__0.contains_pair.?_definition))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%0 (Type Type Poly Type Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Type) (%%hole%%4 Type) (%%hole%%5 Poly) (k~17$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k~17$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k~17$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k~17$)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k~17$)))))
(declare-fun %%lambda%%1 (Type Type Poly Type Type Type Type Poly Type Type Type Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Type) (%%hole%%4 Type) (%%hole%%5 Type) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Type) (%%hole%%9 Type) (%%hole%%10 Type) (%%hole%%11 Type) (%%hole%%12 Poly) (k~44$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k~44$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k~44$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k~44$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k~44$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k~44$)))))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.union_prefer_right.) (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (m2~4@ Poly)) (! (= (vstd!map.impl&%0.union_prefer_right.? K& K&. V& V&. self~2@ m2~4@) (vstd!map.impl&%0.new.? K& K&. V& V&. (TYPE%fun%1. K& BOOL) (TYPE%fun%1. K&. BOOL) (TYPE%fun%1. K& V&) (TYPE%fun%1. K&. V&.) (Poly%fun%1. (mk_fun (%%lambda%%0 K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. self~2@) K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m2~4@)))) (Poly%fun%1. (mk_fun (%%lambda%%1 K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m2~4@) K& K&. V& V&. m2~4@ K& K&. V& V&. self~2@))))) :pattern ((vstd!map.impl&%0.union_prefer_right.? K& K&. V& V&. self~2@ m2~4@)) :qid internal_vstd!map.impl&__0.union_prefer_right.?_definition :skolemid skolem_internal_vstd!map.impl&__0.union_prefer_right.?_definition))))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (self~2@ Poly) (m2~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!map.Map. K& V&)) (has_type m2~4@ (TYPE%vstd!map.Map. K& V&))) (has_type (vstd!map.impl&%0.union_prefer_right.? K& K&. V& V&. self~2@ m2~4@) (TYPE%vstd!map.Map. K& V&))) :pattern ((vstd!map.impl&%0.union_prefer_right.? K& K&. V& V&. self~2@ m2~4@)) :qid internal_vstd!map.impl&__0.union_prefer_right.?_pre_post_definition :skolemid skolem_internal_vstd!map.impl&__0.union_prefer_right.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A& Type) (A&. Type) (self~2@ Poly) (s2~4@ Poly)) (! (= (vstd!set.impl&%0.subset_of.? A& A&. self~2@ s2~4@) (forall ((a~12$ Poly)) (! (=> (has_type a~12$ A&) (=> (vstd!set.impl&%0.contains.? A& A&. self~2@ a~12$) (vstd!set.impl&%0.contains.? A& A&. s2~4@ a~12$))) :pattern ((vstd!set.impl&%0.contains.? A& A&. self~2@ a~12$)) :pattern ((vstd!set.impl&%0.contains.? A& A&. s2~4@ a~12$)) :qid user_vstd__set__impl&%0__subset_of_1 :skolemid skolem_user_vstd__set__impl&%0__subset_of_1))) :pattern ((vstd!set.impl&%0.subset_of.? A& A&. self~2@ s2~4@)) :qid internal_vstd!set.impl&__0.subset_of.?_definition :skolemid skolem_internal_vstd!set.impl&__0.subset_of.?_definition))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Type Type Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key~4@ Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K& K&. V& V&. m~2@ key~4@) (and (=> %%global_location_label%%6 (vstd!set.impl&%0.finite.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2@))) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2@) key~4@)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K& K&. V& V&. m~2@ key~4@)) :qid internal_req__vstd!map.axiom_map_index_decreases_finite._definition :skolemid skolem_internal_req__vstd!map.axiom_map_index_decreases_finite._definition)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_index_decreases_finite")
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Type Type Type Type Poly Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key~4@ Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K& K&. V& V&. m~2@ key~4@) (height_lt (height (vstd!map.impl&%0.index.? K& K&. V& V&. m~2@ key~4@)) (height m~2@))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K& K&. V& V&. m~2@ key~4@)) :qid internal_ens__vstd!map.axiom_map_index_decreases_finite._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_index_decreases_finite._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2$ Poly) (key~4$ Poly)) (! (=> (and (has_type m~2$ (TYPE%vstd!map.Map. K& V&)) (has_type key~4$ K&)) (=> (and (vstd!set.impl&%0.finite.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2$)) (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2$) key~4$)) (height_lt (height (vstd!map.impl&%0.index.? K& K&. V& V&. m~2$ key~4$)) (height m~2$)))) :pattern ((height (vstd!map.impl&%0.index.? K& K&. V& V&. m~2$ key~4$))) :qid user_vstd__map__axiom_map_index_decreases_finite_2 :skolemid skolem_user_vstd__map__axiom_map_index_decreases_finite_2)))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Type Type Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key~4@ Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K& K&. V& V&. m~2@ key~4@) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2@) key~4@))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K& K&. V& V&. m~2@ key~4@)) :qid internal_req__vstd!map.axiom_map_index_decreases_infinite._definition :skolemid skolem_internal_req__vstd!map.axiom_map_index_decreases_infinite._definition)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_index_decreases_infinite")
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Type Type Type Type Poly Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key~4@ Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K& K&. V& V&. m~2@ key~4@) (height_lt (height (vstd!map.impl&%0.index.? K& K&. V& V&. m~2@ key~4@)) (height (fun_from_recursive_field m~2@)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K& K&. V& V&. m~2@ key~4@)) :qid internal_ens__vstd!map.axiom_map_index_decreases_infinite._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_index_decreases_infinite._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2$ Poly) (key~4$ Poly)) (! (=> (and (has_type m~2$ (TYPE%vstd!map.Map. K& V&)) (has_type key~4$ K&)) (=> (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2$) key~4$) (height_lt (height (vstd!map.impl&%0.index.? K& K&. V& V&. m~2$ key~4$)) (height (fun_from_recursive_field m~2$))))) :pattern ((height (vstd!map.impl&%0.index.? K& K&. V& V&. m~2$ key~4$))) :qid user_vstd__map__axiom_map_index_decreases_infinite_3 :skolemid skolem_user_vstd__map__axiom_map_index_decreases_infinite_3)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Type Type Type Type) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type)) (! (= (ens%vstd!map.axiom_map_empty. K& K&. V& V&.) (= (vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!map.impl&%0.empty.? K& K&. V& V&.)) (vstd!set.impl&%0.empty.? K& K&.))) :pattern ((ens%vstd!map.axiom_map_empty. K& K&. V& V&.)) :qid internal_ens__vstd!map.axiom_map_empty._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_empty._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type)) (! (= (vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!map.impl&%0.empty.? K& K&. V& V&.)) (vstd!set.impl&%0.empty.? K& K&.)) :pattern ((vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!map.impl&%0.empty.? K& K&. V& V&.))) :qid user_vstd__map__axiom_map_empty_4 :skolemid skolem_user_vstd__map__axiom_map_empty_4)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (a~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!set.Set. A&)) (has_type a~4@ A&)) (has_type (vstd!set.impl&%0.insert.? A& A&. self~2@ a~4@) (TYPE%vstd!set.Set. A&))) :pattern ((vstd!set.impl&%0.insert.? A& A&. self~2@ a~4@)) :qid internal_vstd!set.impl&__0.insert.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.insert.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Type Type Type Type Poly Poly Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key~4@ Poly) (value~6@ Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K& K&. V& V&. m~2@ key~4@ value~6@) (= (vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!map.impl&%0.insert.? K& K&. V& V&. m~2@ key~4@ value~6@)) (vstd!set.impl&%0.insert.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2@) key~4@))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K& K&. V& V&. m~2@ key~4@ value~6@)) :qid internal_ens__vstd!map.axiom_map_insert_domain._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_insert_domain._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2$ Poly) (key~4$ Poly) (value~6$ Poly)) (! (=> (and (has_type m~2$ (TYPE%vstd!map.Map. K& V&)) (has_type key~4$ K&) (has_type value~6$ V&)) (= (vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!map.impl&%0.insert.? K& K&. V& V&. m~2$ key~4$ value~6$)) (vstd!set.impl&%0.insert.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2$) key~4$))) :pattern ((vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!map.impl&%0.insert.? K& K&. V& V&. m~2$ key~4$ value~6$))) :qid user_vstd__map__axiom_map_insert_domain_5 :skolemid skolem_user_vstd__map__axiom_map_insert_domain_5)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Type Type Type Type Poly Poly Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key~4@ Poly) (value~6@ Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K& K&. V& V&. m~2@ key~4@ value~6@) (= (vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!map.impl&%0.insert.? K& K&. V& V&. m~2@ key~4@ value~6@) key~4@) value~6@)) :pattern ((ens%vstd!map.axiom_map_insert_same. K& K&. V& V&. m~2@ key~4@ value~6@)) :qid internal_ens__vstd!map.axiom_map_insert_same._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_insert_same._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2$ Poly) (key~4$ Poly) (value~6$ Poly)) (! (=> (and (has_type m~2$ (TYPE%vstd!map.Map. K& V&)) (has_type key~4$ K&) (has_type value~6$ V&)) (= (vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!map.impl&%0.insert.? K& K&. V& V&. m~2$ key~4$ value~6$) key~4$) value~6$)) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!map.impl&%0.insert.? K& K&. V& V&. m~2$ key~4$ value~6$) key~4$)) :qid user_vstd__map__axiom_map_insert_same_6 :skolemid skolem_user_vstd__map__axiom_map_insert_same_6)))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Type Type Type Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key1~4@ Poly) (key2~6@ Poly) (value~8@ Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K& K&. V& V&. m~2@ key1~4@ key2~6@ value~8@) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2@) key1~4@)) (=> %%global_location_label%%10 (not (= key1~4@ key2~6@))))) :pattern ((req%vstd!map.axiom_map_insert_different. K& K&. V& V&. m~2@ key1~4@ key2~6@ value~8@)) :qid internal_req__vstd!map.axiom_map_insert_different._definition :skolemid skolem_internal_req__vstd!map.axiom_map_insert_different._definition)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_insert_different")
(declare-fun ens%vstd!map.axiom_map_insert_different. (Type Type Type Type Poly Poly Poly Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key1~4@ Poly) (key2~6@ Poly) (value~8@ Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K& K&. V& V&. m~2@ key1~4@ key2~6@ value~8@) (= (vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!map.impl&%0.insert.? K& K&. V& V&. m~2@ key2~6@ value~8@) key1~4@) (vstd!map.impl&%0.index.? K& K&. V& V&. m~2@ key1~4@))) :pattern ((ens%vstd!map.axiom_map_insert_different. K& K&. V& V&. m~2@ key1~4@ key2~6@ value~8@)) :qid internal_ens__vstd!map.axiom_map_insert_different._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_insert_different._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2$ Poly) (key1~4$ Poly) (key2~6$ Poly) (value~8$ Poly)) (! (=> (and (has_type m~2$ (TYPE%vstd!map.Map. K& V&)) (has_type key1~4$ K&) (has_type key2~6$ K&) (has_type value~8$ V&)) (=> (and (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2$) key1~4$) (not (= key1~4$ key2~6$))) (= (vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!map.impl&%0.insert.? K& K&. V& V&. m~2$ key2~6$ value~8$) key1~4$) (vstd!map.impl&%0.index.? K& K&. V& V&. m~2$ key1~4$)))) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!map.impl&%0.insert.? K& K&. V& V&. m~2$ key2~6$ value~8$) key1~4$)) :qid user_vstd__map__axiom_map_insert_different_7 :skolemid skolem_user_vstd__map__axiom_map_insert_different_7)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (a~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!set.Set. A&)) (has_type a~4@ A&)) (has_type (vstd!set.impl&%0.remove.? A& A&. self~2@ a~4@) (TYPE%vstd!set.Set. A&))) :pattern ((vstd!set.impl&%0.remove.? A& A&. self~2@ a~4@)) :qid internal_vstd!set.impl&__0.remove.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.remove.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Type Type Type Type Poly Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key~4@ Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K& K&. V& V&. m~2@ key~4@) (= (vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!map.impl&%0.remove.? K& K&. V& V&. m~2@ key~4@)) (vstd!set.impl&%0.remove.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2@) key~4@))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K& K&. V& V&. m~2@ key~4@)) :qid internal_ens__vstd!map.axiom_map_remove_domain._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_remove_domain._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2$ Poly) (key~4$ Poly)) (! (=> (and (has_type m~2$ (TYPE%vstd!map.Map. K& V&)) (has_type key~4$ K&)) (= (vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!map.impl&%0.remove.? K& K&. V& V&. m~2$ key~4$)) (vstd!set.impl&%0.remove.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2$) key~4$))) :pattern ((vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!map.impl&%0.remove.? K& K&. V& V&. m~2$ key~4$))) :qid user_vstd__map__axiom_map_remove_domain_8 :skolemid skolem_user_vstd__map__axiom_map_remove_domain_8)))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Type Type Type Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key1~4@ Poly) (key2~6@ Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K& K&. V& V&. m~2@ key1~4@ key2~6@) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2@) key1~4@)) (=> %%global_location_label%%12 (not (= key1~4@ key2~6@))))) :pattern ((req%vstd!map.axiom_map_remove_different. K& K&. V& V&. m~2@ key1~4@ key2~6@)) :qid internal_req__vstd!map.axiom_map_remove_different._definition :skolemid skolem_internal_req__vstd!map.axiom_map_remove_different._definition)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_remove_different")
(declare-fun ens%vstd!map.axiom_map_remove_different. (Type Type Type Type Poly Poly Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2@ Poly) (key1~4@ Poly) (key2~6@ Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K& K&. V& V&. m~2@ key1~4@ key2~6@) (= (vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!map.impl&%0.remove.? K& K&. V& V&. m~2@ key2~6@) key1~4@) (vstd!map.impl&%0.index.? K& K&. V& V&. m~2@ key1~4@))) :pattern ((ens%vstd!map.axiom_map_remove_different. K& K&. V& V&. m~2@ key1~4@ key2~6@)) :qid internal_ens__vstd!map.axiom_map_remove_different._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_remove_different._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m~2$ Poly) (key1~4$ Poly) (key2~6$ Poly)) (! (=> (and (has_type m~2$ (TYPE%vstd!map.Map. K& V&)) (has_type key1~4$ K&) (has_type key2~6$ K&)) (=> (and (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m~2$) key1~4$) (not (= key1~4$ key2~6$))) (= (vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!map.impl&%0.remove.? K& K&. V& V&. m~2$ key2~6$) key1~4$) (vstd!map.impl&%0.index.? K& K&. V& V&. m~2$ key1~4$)))) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!map.impl&%0.remove.? K& K&. V& V&. m~2$ key2~6$) key1~4$)) :qid user_vstd__map__axiom_map_remove_different_9 :skolemid skolem_user_vstd__map__axiom_map_remove_different_9)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Type Type Type Type Poly Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m1~2@ Poly) (m2~4@ Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K& K&. V& V&. m1~2@ m2~4@) (= (ext_eq false (TYPE%vstd!map.Map. K& V&) (TYPE%vstd!map.Map. K&. V&.) m1~2@ m2~4@) (and (ext_eq false (TYPE%vstd!set.Set. K&) (TYPE%vstd!set.Set. K&.) (vstd!map.impl&%0.dom.? K& K&. V& V&. m1~2@) (vstd!map.impl&%0.dom.? K& K&. V& V&. m2~4@)) (forall ((k~47$ Poly)) (! (=> (has_type k~47$ K&) (=> (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m1~2@) k~47$) (= (vstd!map.impl&%0.index.? K& K&. V& V&. m1~2@ k~47$) (vstd!map.impl&%0.index.? K& K&. V& V&. m2~4@ k~47$)))) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. m1~2@ k~47$)) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. m2~4@ k~47$)) :qid user_vstd__map__axiom_map_ext_equal_10 :skolemid skolem_user_vstd__map__axiom_map_ext_equal_10))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K& K&. V& V&. m1~2@ m2~4@)) :qid internal_ens__vstd!map.axiom_map_ext_equal._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_ext_equal._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m1~2$ Poly) (m2~4$ Poly)) (! (=> (and (has_type m1~2$ (TYPE%vstd!map.Map. K& V&)) (has_type m2~4$ (TYPE%vstd!map.Map. K& V&))) (= (ext_eq false (TYPE%vstd!map.Map. K& V&) (TYPE%vstd!map.Map. K&. V&.) m1~2$ m2~4$) (and (ext_eq false (TYPE%vstd!set.Set. K&) (TYPE%vstd!set.Set. K&.) (vstd!map.impl&%0.dom.? K& K&. V& V&. m1~2$) (vstd!map.impl&%0.dom.? K& K&. V& V&. m2~4$)) (forall ((k~47$ Poly)) (! (=> (has_type k~47$ K&) (=> (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m1~2$) k~47$) (= (vstd!map.impl&%0.index.? K& K&. V& V&. m1~2$ k~47$) (vstd!map.impl&%0.index.? K& K&. V& V&. m2~4$ k~47$)))) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. m1~2$ k~47$)) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. m2~4$ k~47$)) :qid user_vstd__map__axiom_map_ext_equal_11 :skolemid skolem_user_vstd__map__axiom_map_ext_equal_11))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K& V&) (TYPE%vstd!map.Map. K&. V&.) m1~2$ m2~4$)) :qid user_vstd__map__axiom_map_ext_equal_12 :skolemid skolem_user_vstd__map__axiom_map_ext_equal_12)))
(set-info :comment ";; Function-Axioms vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Type Type Type Type Poly Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m1~2@ Poly) (m2~4@ Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K& K&. V& V&. m1~2@ m2~4@) (= (ext_eq true (TYPE%vstd!map.Map. K& V&) (TYPE%vstd!map.Map. K&. V&.) m1~2@ m2~4@) (and (ext_eq true (TYPE%vstd!set.Set. K&) (TYPE%vstd!set.Set. K&.) (vstd!map.impl&%0.dom.? K& K&. V& V&. m1~2@) (vstd!map.impl&%0.dom.? K& K&. V& V&. m2~4@)) (forall ((k~47$ Poly)) (! (=> (has_type k~47$ K&) (=> (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m1~2@) k~47$) (ext_eq true V& V&. (vstd!map.impl&%0.index.? K& K&. V& V&. m1~2@ k~47$) (vstd!map.impl&%0.index.? K& K&. V& V&. m2~4@ k~47$)))) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. m1~2@ k~47$)) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. m2~4@ k~47$)) :qid user_vstd__map__axiom_map_ext_equal_deep_13 :skolemid skolem_user_vstd__map__axiom_map_ext_equal_deep_13))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K& K&. V& V&. m1~2@ m2~4@)) :qid internal_ens__vstd!map.axiom_map_ext_equal_deep._definition :skolemid skolem_internal_ens__vstd!map.axiom_map_ext_equal_deep._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (m1~2$ Poly) (m2~4$ Poly)) (! (=> (and (has_type m1~2$ (TYPE%vstd!map.Map. K& V&)) (has_type m2~4$ (TYPE%vstd!map.Map. K& V&))) (= (ext_eq true (TYPE%vstd!map.Map. K& V&) (TYPE%vstd!map.Map. K&. V&.) m1~2$ m2~4$) (and (ext_eq true (TYPE%vstd!set.Set. K&) (TYPE%vstd!set.Set. K&.) (vstd!map.impl&%0.dom.? K& K&. V& V&. m1~2$) (vstd!map.impl&%0.dom.? K& K&. V& V&. m2~4$)) (forall ((k~47$ Poly)) (! (=> (has_type k~47$ K&) (=> (vstd!set.impl&%0.contains.? K& K&. (vstd!map.impl&%0.dom.? K& K&. V& V&. m1~2$) k~47$) (ext_eq true V& V&. (vstd!map.impl&%0.index.? K& K&. V& V&. m1~2$ k~47$) (vstd!map.impl&%0.index.? K& K&. V& V&. m2~4$ k~47$)))) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. m1~2$ k~47$)) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. m2~4$ k~47$)) :qid user_vstd__map__axiom_map_ext_equal_deep_14 :skolemid skolem_user_vstd__map__axiom_map_ext_equal_deep_14))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K& V&) (TYPE%vstd!map.Map. K&. V&.) m1~2$ m2~4$)) :qid user_vstd__map__axiom_map_ext_equal_deep_15 :skolemid skolem_user_vstd__map__axiom_map_ext_equal_deep_15)))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A& Type) (A&. Type) (impl%1& Type) (impl%1&. Type) (len~2@ Poly) (f~4@ Poly)) (! (=> (and (has_type len~2@ NAT) (has_type f~4@ impl%1&)) (has_type (vstd!seq.Seq.new.? A& A&. impl%1& impl%1&. len~2@ f~4@) (TYPE%vstd!seq.Seq. A&))) :pattern ((vstd!seq.Seq.new.? A& A&. impl%1& impl%1&. len~2@ f~4@)) :qid internal_vstd!seq.Seq.new.?_pre_post_definition :skolemid skolem_internal_vstd!seq.Seq.new.?_pre_post_definition)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Type Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (i~4@ Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A& A&. s~2@ i~4@) (=> %%global_location_label%%13 (and (<= 0 i~4@) (< i~4@ (vstd!seq.Seq.len.? A& A&. s~2@))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A& A&. s~2@ i~4@)) :qid internal_req__vstd!seq.axiom_seq_index_decreases._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_index_decreases._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_index_decreases")
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Type Type Poly Int) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (i~4@ Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A& A&. s~2@ i~4@) (height_lt (height (vstd!seq.Seq.index.? A& A&. s~2@ (I i~4@))) (height s~2@))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A& A&. s~2@ i~4@)) :qid internal_ens__vstd!seq.axiom_seq_index_decreases._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_index_decreases._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (i~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!seq.Seq. A&)) (has_type i~4$ INT)) (=> (and (<= 0 (%I i~4$)) (< (%I i~4$) (vstd!seq.Seq.len.? A& A&. s~2$))) (height_lt (height (vstd!seq.Seq.index.? A& A&. s~2$ i~4$)) (height s~2$)))) :pattern ((height (vstd!seq.Seq.index.? A& A&. s~2$ i~4$))) :qid user_vstd__seq__axiom_seq_index_decreases_16 :skolemid skolem_user_vstd__seq__axiom_seq_index_decreases_16)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Type Type) Bool)
(assert (forall ((A& Type) (A&. Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A& A&.) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.empty.? A& A&.)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A& A&.)) :qid internal_ens__vstd!seq.axiom_seq_empty._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_empty._definition)))
(assert (forall ((A& Type) (A&. Type)) (! (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.empty.? A& A&.)) 0) :pattern ((vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.empty.? A& A&.))) :qid user_vstd__seq__axiom_seq_empty_17 :skolemid skolem_user_vstd__seq__axiom_seq_empty_17)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Type Type Int %%Function%%) Bool)
(assert (forall ((A& Type) (A&. Type) (len~2@ Int) (f~4@ %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A& A&. len~2@ f~4@) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.new.? A& A&. (TYPE%fun%1. INT A&) (TYPE%fun%1. INT A&.) (I len~2@) (Poly%fun%1. f~4@))) len~2@)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A& A&. len~2@ f~4@)) :qid internal_ens__vstd!seq.axiom_seq_new_len._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_new_len._definition)))
(assert (forall ((A& Type) (A&. Type) (len~2$ Poly) (f~4$ Poly)) (! (=> (and (has_type len~2$ NAT) (has_type f~4$ (TYPE%fun%1. INT A&))) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.new.? A& A&. (TYPE%fun%1. INT A&) (TYPE%fun%1. INT A&.) len~2$ f~4$)) (%I len~2$))) :pattern ((vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.new.? A& A&. (TYPE%fun%1. INT A&) (TYPE%fun%1. INT A&.) len~2$ f~4$))) :qid user_vstd__seq__axiom_seq_new_len_18 :skolemid skolem_user_vstd__seq__axiom_seq_new_len_18)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Type Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A& Type) (A&. Type) (len~2@ Int) (f~4@ %%Function%%) (i~6@ Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A& A&. len~2@ f~4@ i~6@) (=> %%global_location_label%%14 (and (<= 0 i~6@) (< i~6@ len~2@)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A& A&. len~2@ f~4@ i~6@)) :qid internal_req__vstd!seq.axiom_seq_new_index._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_new_index._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_new_index")
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Type Type Int %%Function%% Int) Bool)
(assert (forall ((A& Type) (A&. Type) (len~2@ Int) (f~4@ %%Function%%) (i~6@ Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A& A&. len~2@ f~4@ i~6@) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.new.? A& A&. (TYPE%fun%1. INT A&) (TYPE%fun%1. INT A&.) (I len~2@) (Poly%fun%1. f~4@)) (I i~6@)) (%%apply%%0 f~4@ (I i~6@)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A& A&. len~2@ f~4@ i~6@)) :qid internal_ens__vstd!seq.axiom_seq_new_index._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_new_index._definition)))
(assert (forall ((A& Type) (A&. Type) (len~2$ Poly) (f~4$ Poly) (i~6$ Poly)) (! (=> (and (has_type len~2$ NAT) (has_type f~4$ (TYPE%fun%1. INT A&)) (has_type i~6$ INT)) (=> (and (<= 0 (%I i~6$)) (< (%I i~6$) (%I len~2$))) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.new.? A& A&. (TYPE%fun%1. INT A&) (TYPE%fun%1. INT A&.) len~2$ f~4$) i~6$) (%%apply%%0 (%Poly%fun%1. f~4$) i~6$)))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.new.? A& A&. (TYPE%fun%1. INT A&) (TYPE%fun%1. INT A&.) len~2$ f~4$) i~6$)) :qid user_vstd__seq__axiom_seq_new_index_19 :skolemid skolem_user_vstd__seq__axiom_seq_new_index_19)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A& A&. s~2@ a~4@) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.push.? A& A&. s~2@ a~4@)) (nClip (+ (vstd!seq.Seq.len.? A& A&. s~2@) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A& A&. s~2@ a~4@)) :qid internal_ens__vstd!seq.axiom_seq_push_len._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_push_len._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!seq.Seq. A&)) (has_type a~4$ A&)) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.push.? A& A&. s~2$ a~4$)) (nClip (+ (vstd!seq.Seq.len.? A& A&. s~2$) 1)))) :pattern ((vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.push.? A& A&. s~2$ a~4$))) :qid user_vstd__seq__axiom_seq_push_len_20 :skolemid skolem_user_vstd__seq__axiom_seq_push_len_20)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Type Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly) (i~6@ Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A& A&. s~2@ a~4@ i~6@) (=> %%global_location_label%%15 (= i~6@ (vstd!seq.Seq.len.? A& A&. s~2@)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A& A&. s~2@ a~4@ i~6@)) :qid internal_req__vstd!seq.axiom_seq_push_index_same._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_push_index_same._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_push_index_same")
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Type Type Poly Poly Int) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly) (i~6@ Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A& A&. s~2@ a~4@ i~6@) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.push.? A& A&. s~2@ a~4@) (I i~6@)) a~4@)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A& A&. s~2@ a~4@ i~6@)) :qid internal_ens__vstd!seq.axiom_seq_push_index_same._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_push_index_same._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly) (i~6$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!seq.Seq. A&)) (has_type a~4$ A&) (has_type i~6$ INT)) (=> (= (%I i~6$) (vstd!seq.Seq.len.? A& A&. s~2$)) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.push.? A& A&. s~2$ a~4$) i~6$) a~4$))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.push.? A& A&. s~2$ a~4$) i~6$)) :qid user_vstd__seq__axiom_seq_push_index_same_21 :skolemid skolem_user_vstd__seq__axiom_seq_push_index_same_21)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Type Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly) (i~6@ Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A& A&. s~2@ a~4@ i~6@) (=> %%global_location_label%%16 (and (<= 0 i~6@) (< i~6@ (vstd!seq.Seq.len.? A& A&. s~2@))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A& A&. s~2@ a~4@ i~6@)) :qid internal_req__vstd!seq.axiom_seq_push_index_different._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_push_index_different._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_push_index_different")
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Type Type Poly Poly Int) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly) (i~6@ Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A& A&. s~2@ a~4@ i~6@) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.push.? A& A&. s~2@ a~4@) (I i~6@)) (vstd!seq.Seq.index.? A& A&. s~2@ (I i~6@)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A& A&. s~2@ a~4@ i~6@)) :qid internal_ens__vstd!seq.axiom_seq_push_index_different._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_push_index_different._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly) (i~6$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!seq.Seq. A&)) (has_type a~4$ A&) (has_type i~6$ INT)) (=> (and (<= 0 (%I i~6$)) (< (%I i~6$) (vstd!seq.Seq.len.? A& A&. s~2$))) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.push.? A& A&. s~2$ a~4$) i~6$) (vstd!seq.Seq.index.? A& A&. s~2$ i~6$)))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.push.? A& A&. s~2$ a~4$) i~6$)) :qid user_vstd__seq__axiom_seq_push_index_different_22 :skolemid skolem_user_vstd__seq__axiom_seq_push_index_different_22)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Type Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (i~4@ Int) (a~6@ Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A& A&. s~2@ i~4@ a~6@) (=> %%global_location_label%%17 (and (<= 0 i~4@) (< i~4@ (vstd!seq.Seq.len.? A& A&. s~2@))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A& A&. s~2@ i~4@ a~6@)) :qid internal_req__vstd!seq.axiom_seq_update_len._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_update_len._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_update_len")
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Type Type Poly Int Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (i~4@ Int) (a~6@ Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A& A&. s~2@ i~4@ a~6@) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.update.? A& A&. s~2@ (I i~4@) a~6@)) (vstd!seq.Seq.len.? A& A&. s~2@))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A& A&. s~2@ i~4@ a~6@)) :qid internal_ens__vstd!seq.axiom_seq_update_len._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_update_len._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (i~4$ Poly) (a~6$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!seq.Seq. A&)) (has_type i~4$ INT) (has_type a~6$ A&)) (=> (and (<= 0 (%I i~4$)) (< (%I i~4$) (vstd!seq.Seq.len.? A& A&. s~2$))) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.update.? A& A&. s~2$ i~4$ a~6$)) (vstd!seq.Seq.len.? A& A&. s~2$)))) :pattern ((vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.update.? A& A&. s~2$ i~4$ a~6$))) :qid user_vstd__seq__axiom_seq_update_len_23 :skolemid skolem_user_vstd__seq__axiom_seq_update_len_23)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Type Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (i~4@ Int) (a~6@ Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A& A&. s~2@ i~4@ a~6@) (=> %%global_location_label%%18 (and (<= 0 i~4@) (< i~4@ (vstd!seq.Seq.len.? A& A&. s~2@))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A& A&. s~2@ i~4@ a~6@)) :qid internal_req__vstd!seq.axiom_seq_update_same._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_update_same._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_update_same")
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Type Type Poly Int Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (i~4@ Int) (a~6@ Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A& A&. s~2@ i~4@ a~6@) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.update.? A& A&. s~2@ (I i~4@) a~6@) (I i~4@)) a~6@)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A& A&. s~2@ i~4@ a~6@)) :qid internal_ens__vstd!seq.axiom_seq_update_same._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_update_same._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (i~4$ Poly) (a~6$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!seq.Seq. A&)) (has_type i~4$ INT) (has_type a~6$ A&)) (=> (and (<= 0 (%I i~4$)) (< (%I i~4$) (vstd!seq.Seq.len.? A& A&. s~2$))) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.update.? A& A&. s~2$ i~4$ a~6$) i~4$) a~6$))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.update.? A& A&. s~2$ i~4$ a~6$) i~4$)) :qid user_vstd__seq__axiom_seq_update_same_24 :skolemid skolem_user_vstd__seq__axiom_seq_update_same_24)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Type Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (i1~4@ Int) (i2~6@ Int) (a~8@ Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A& A&. s~2@ i1~4@ i2~6@ a~8@) (and (=> %%global_location_label%%19 (and (<= 0 i1~4@) (< i1~4@ (vstd!seq.Seq.len.? A& A&. s~2@)))) (=> %%global_location_label%%20 (and (<= 0 i2~6@) (< i2~6@ (vstd!seq.Seq.len.? A& A&. s~2@)))) (=> %%global_location_label%%21 (not (= i1~4@ i2~6@))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A& A&. s~2@ i1~4@ i2~6@ a~8@)) :qid internal_req__vstd!seq.axiom_seq_update_different._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_update_different._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_update_different")
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Type Type Poly Int Int Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (i1~4@ Int) (i2~6@ Int) (a~8@ Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A& A&. s~2@ i1~4@ i2~6@ a~8@) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.update.? A& A&. s~2@ (I i2~6@) a~8@) (I i1~4@)) (vstd!seq.Seq.index.? A& A&. s~2@ (I i1~4@)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A& A&. s~2@ i1~4@ i2~6@ a~8@)) :qid internal_ens__vstd!seq.axiom_seq_update_different._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_update_different._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (i1~4$ Poly) (i2~6$ Poly) (a~8$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!seq.Seq. A&)) (has_type i1~4$ INT) (has_type i2~6$ INT) (has_type a~8$ A&)) (=> (and (and (and (<= 0 (%I i1~4$)) (< (%I i1~4$) (vstd!seq.Seq.len.? A& A&. s~2$))) (and (<= 0 (%I i2~6$)) (< (%I i2~6$) (vstd!seq.Seq.len.? A& A&. s~2$)))) (not (= i1~4$ i2~6$))) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.update.? A& A&. s~2$ i2~6$ a~8$) i1~4$) (vstd!seq.Seq.index.? A& A&. s~2$ i1~4$)))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.update.? A& A&. s~2$ i2~6$ a~8$) i1~4$)) :qid user_vstd__seq__axiom_seq_update_different_25 :skolemid skolem_user_vstd__seq__axiom_seq_update_different_25)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A& A&. s1~2@ s2~4@) (= (ext_eq false (TYPE%vstd!seq.Seq. A&) (TYPE%vstd!seq.Seq. A&.) s1~2@ s2~4@) (and (= (vstd!seq.Seq.len.? A& A&. s1~2@) (vstd!seq.Seq.len.? A& A&. s2~4@)) (forall ((i~47$ Poly)) (! (=> (has_type i~47$ INT) (=> (and (<= 0 (%I i~47$)) (< (%I i~47$) (vstd!seq.Seq.len.? A& A&. s1~2@))) (= (vstd!seq.Seq.index.? A& A&. s1~2@ i~47$) (vstd!seq.Seq.index.? A& A&. s2~4@ i~47$)))) :pattern ((vstd!seq.Seq.index.? A& A&. s1~2@ i~47$)) :pattern ((vstd!seq.Seq.index.? A& A&. s2~4@ i~47$)) :qid user_vstd__seq__axiom_seq_ext_equal_26 :skolemid skolem_user_vstd__seq__axiom_seq_ext_equal_26))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A& A&. s1~2@ s2~4@)) :qid internal_ens__vstd!seq.axiom_seq_ext_equal._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_ext_equal._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!seq.Seq. A&)) (has_type s2~4$ (TYPE%vstd!seq.Seq. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&) (TYPE%vstd!seq.Seq. A&.) s1~2$ s2~4$) (and (= (vstd!seq.Seq.len.? A& A&. s1~2$) (vstd!seq.Seq.len.? A& A&. s2~4$)) (forall ((i~47$ Poly)) (! (=> (has_type i~47$ INT) (=> (and (<= 0 (%I i~47$)) (< (%I i~47$) (vstd!seq.Seq.len.? A& A&. s1~2$))) (= (vstd!seq.Seq.index.? A& A&. s1~2$ i~47$) (vstd!seq.Seq.index.? A& A&. s2~4$ i~47$)))) :pattern ((vstd!seq.Seq.index.? A& A&. s1~2$ i~47$)) :pattern ((vstd!seq.Seq.index.? A& A&. s2~4$ i~47$)) :qid user_vstd__seq__axiom_seq_ext_equal_27 :skolemid skolem_user_vstd__seq__axiom_seq_ext_equal_27))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&) (TYPE%vstd!seq.Seq. A&.) s1~2$ s2~4$)) :qid user_vstd__seq__axiom_seq_ext_equal_28 :skolemid skolem_user_vstd__seq__axiom_seq_ext_equal_28)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A& A&. s1~2@ s2~4@) (= (ext_eq true (TYPE%vstd!seq.Seq. A&) (TYPE%vstd!seq.Seq. A&.) s1~2@ s2~4@) (and (= (vstd!seq.Seq.len.? A& A&. s1~2@) (vstd!seq.Seq.len.? A& A&. s2~4@)) (forall ((i~47$ Poly)) (! (=> (has_type i~47$ INT) (=> (and (<= 0 (%I i~47$)) (< (%I i~47$) (vstd!seq.Seq.len.? A& A&. s1~2@))) (ext_eq true A& A&. (vstd!seq.Seq.index.? A& A&. s1~2@ i~47$) (vstd!seq.Seq.index.? A& A&. s2~4@ i~47$)))) :pattern ((vstd!seq.Seq.index.? A& A&. s1~2@ i~47$)) :pattern ((vstd!seq.Seq.index.? A& A&. s2~4@ i~47$)) :qid user_vstd__seq__axiom_seq_ext_equal_deep_29 :skolemid skolem_user_vstd__seq__axiom_seq_ext_equal_deep_29))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A& A&. s1~2@ s2~4@)) :qid internal_ens__vstd!seq.axiom_seq_ext_equal_deep._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_ext_equal_deep._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!seq.Seq. A&)) (has_type s2~4$ (TYPE%vstd!seq.Seq. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&) (TYPE%vstd!seq.Seq. A&.) s1~2$ s2~4$) (and (= (vstd!seq.Seq.len.? A& A&. s1~2$) (vstd!seq.Seq.len.? A& A&. s2~4$)) (forall ((i~47$ Poly)) (! (=> (has_type i~47$ INT) (=> (and (<= 0 (%I i~47$)) (< (%I i~47$) (vstd!seq.Seq.len.? A& A&. s1~2$))) (ext_eq true A& A&. (vstd!seq.Seq.index.? A& A&. s1~2$ i~47$) (vstd!seq.Seq.index.? A& A&. s2~4$ i~47$)))) :pattern ((vstd!seq.Seq.index.? A& A&. s1~2$ i~47$)) :pattern ((vstd!seq.Seq.index.? A& A&. s2~4$ i~47$)) :qid user_vstd__seq__axiom_seq_ext_equal_deep_30 :skolemid skolem_user_vstd__seq__axiom_seq_ext_equal_deep_30))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&) (TYPE%vstd!seq.Seq. A&.) s1~2$ s2~4$)) :qid user_vstd__seq__axiom_seq_ext_equal_deep_31 :skolemid skolem_user_vstd__seq__axiom_seq_ext_equal_deep_31)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Type Type Poly Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (j~4@ Int) (k~6@ Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A& A&. s~2@ j~4@ k~6@) (=> %%global_location_label%%22 (and (and (<= 0 j~4@) (<= j~4@ k~6@)) (<= k~6@ (vstd!seq.Seq.len.? A& A&. s~2@))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A& A&. s~2@ j~4@ k~6@)) :qid internal_req__vstd!seq.axiom_seq_subrange_len._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_subrange_len._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_subrange_len")
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Type Type Poly Int Int) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (j~4@ Int) (k~6@ Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A& A&. s~2@ j~4@ k~6@) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.subrange.? A& A&. s~2@ (I j~4@) (I k~6@))) (- k~6@ j~4@))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A& A&. s~2@ j~4@ k~6@)) :qid internal_ens__vstd!seq.axiom_seq_subrange_len._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_subrange_len._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (j~4$ Poly) (k~6$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!seq.Seq. A&)) (has_type j~4$ INT) (has_type k~6$ INT)) (=> (and (and (<= 0 (%I j~4$)) (<= (%I j~4$) (%I k~6$))) (<= (%I k~6$) (vstd!seq.Seq.len.? A& A&. s~2$))) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.subrange.? A& A&. s~2$ j~4$ k~6$)) (- (%I k~6$) (%I j~4$))))) :pattern ((vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.subrange.? A& A&. s~2$ j~4$ k~6$))) :qid user_vstd__seq__axiom_seq_subrange_len_32 :skolemid skolem_user_vstd__seq__axiom_seq_subrange_len_32)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Type Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (j~4@ Int) (k~6@ Int) (i~8@ Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A& A&. s~2@ j~4@ k~6@ i~8@) (and (=> %%global_location_label%%23 (and (and (<= 0 j~4@) (<= j~4@ k~6@)) (<= k~6@ (vstd!seq.Seq.len.? A& A&. s~2@)))) (=> %%global_location_label%%24 (and (<= 0 i~8@) (< i~8@ (- k~6@ j~4@)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A& A&. s~2@ j~4@ k~6@ i~8@)) :qid internal_req__vstd!seq.axiom_seq_subrange_index._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_subrange_index._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_subrange_index")
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Type Type Poly Int Int Int) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (j~4@ Int) (k~6@ Int) (i~8@ Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A& A&. s~2@ j~4@ k~6@ i~8@) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.subrange.? A& A&. s~2@ (I j~4@) (I k~6@)) (I i~8@)) (vstd!seq.Seq.index.? A& A&. s~2@ (I (+ i~8@ j~4@))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A& A&. s~2@ j~4@ k~6@ i~8@)) :qid internal_ens__vstd!seq.axiom_seq_subrange_index._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_subrange_index._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (j~4$ Poly) (k~6$ Poly) (i~8$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!seq.Seq. A&)) (has_type j~4$ INT) (has_type k~6$ INT) (has_type i~8$ INT)) (=> (and (and (and (<= 0 (%I j~4$)) (<= (%I j~4$) (%I k~6$))) (<= (%I k~6$) (vstd!seq.Seq.len.? A& A&. s~2$))) (and (<= 0 (%I i~8$)) (< (%I i~8$) (- (%I k~6$) (%I j~4$))))) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.subrange.? A& A&. s~2$ j~4$ k~6$) i~8$) (vstd!seq.Seq.index.? A& A&. s~2$ (I (+ (%I i~8$) (%I j~4$))))))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.subrange.? A& A&. s~2$ j~4$ k~6$) i~8$)) :qid user_vstd__seq__axiom_seq_subrange_index_33 :skolemid skolem_user_vstd__seq__axiom_seq_subrange_index_33)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A& A&. s1~2@ s2~4@) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.add.? A& A&. s1~2@ s2~4@)) (nClip (+ (vstd!seq.Seq.len.? A& A&. s1~2@) (vstd!seq.Seq.len.? A& A&. s2~4@))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A& A&. s1~2@ s2~4@)) :qid internal_ens__vstd!seq.axiom_seq_add_len._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_add_len._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!seq.Seq. A&)) (has_type s2~4$ (TYPE%vstd!seq.Seq. A&))) (= (vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.add.? A& A&. s1~2$ s2~4$)) (nClip (+ (vstd!seq.Seq.len.? A& A&. s1~2$) (vstd!seq.Seq.len.? A& A&. s2~4$))))) :pattern ((vstd!seq.Seq.len.? A& A&. (vstd!seq.Seq.add.? A& A&. s1~2$ s2~4$))) :qid user_vstd__seq__axiom_seq_add_len_34 :skolemid skolem_user_vstd__seq__axiom_seq_add_len_34)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Type Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly) (i~6@ Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A& A&. s1~2@ s2~4@ i~6@) (=> %%global_location_label%%25 (and (<= 0 i~6@) (< i~6@ (vstd!seq.Seq.len.? A& A&. s1~2@))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A& A&. s1~2@ s2~4@ i~6@)) :qid internal_req__vstd!seq.axiom_seq_add_index1._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_add_index1._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_add_index1")
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Type Type Poly Poly Int) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly) (i~6@ Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A& A&. s1~2@ s2~4@ i~6@) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.add.? A& A&. s1~2@ s2~4@) (I i~6@)) (vstd!seq.Seq.index.? A& A&. s1~2@ (I i~6@)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A& A&. s1~2@ s2~4@ i~6@)) :qid internal_ens__vstd!seq.axiom_seq_add_index1._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_add_index1._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly) (i~6$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!seq.Seq. A&)) (has_type s2~4$ (TYPE%vstd!seq.Seq. A&)) (has_type i~6$ INT)) (=> (and (<= 0 (%I i~6$)) (< (%I i~6$) (vstd!seq.Seq.len.? A& A&. s1~2$))) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.add.? A& A&. s1~2$ s2~4$) i~6$) (vstd!seq.Seq.index.? A& A&. s1~2$ i~6$)))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.add.? A& A&. s1~2$ s2~4$) i~6$)) :qid user_vstd__seq__axiom_seq_add_index1_35 :skolemid skolem_user_vstd__seq__axiom_seq_add_index1_35)))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Type Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly) (i~6@ Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A& A&. s1~2@ s2~4@ i~6@) (and (=> %%global_location_label%%26 (<= 0 (vstd!seq.Seq.len.? A& A&. s1~2@))) (=> %%global_location_label%%27 (< i~6@ (+ (vstd!seq.Seq.len.? A& A&. s1~2@) (vstd!seq.Seq.len.? A& A&. s2~4@)))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A& A&. s1~2@ s2~4@ i~6@)) :qid internal_req__vstd!seq.axiom_seq_add_index2._definition :skolemid skolem_internal_req__vstd!seq.axiom_seq_add_index2._definition)))
(set-info :comment ";; Function-Axioms vstd::seq::axiom_seq_add_index2")
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Type Type Poly Poly Int) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly) (i~6@ Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A& A&. s1~2@ s2~4@ i~6@) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.add.? A& A&. s1~2@ s2~4@) (I i~6@)) (vstd!seq.Seq.index.? A& A&. s2~4@ (I (- i~6@ (vstd!seq.Seq.len.? A& A&. s1~2@)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A& A&. s1~2@ s2~4@ i~6@)) :qid internal_ens__vstd!seq.axiom_seq_add_index2._definition :skolemid skolem_internal_ens__vstd!seq.axiom_seq_add_index2._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly) (i~6$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!seq.Seq. A&)) (has_type s2~4$ (TYPE%vstd!seq.Seq. A&)) (has_type i~6$ INT)) (=> (and (<= 0 (vstd!seq.Seq.len.? A& A&. s1~2$)) (< (%I i~6$) (+ (vstd!seq.Seq.len.? A& A&. s1~2$) (vstd!seq.Seq.len.? A& A&. s2~4$)))) (= (vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.add.? A& A&. s1~2$ s2~4$) i~6$) (vstd!seq.Seq.index.? A& A&. s2~4$ (I (- (%I i~6$) (vstd!seq.Seq.len.? A& A&. s1~2$))))))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq.Seq.add.? A& A&. s1~2$ s2~4$) i~6$)) :qid user_vstd__seq__axiom_seq_add_index2_36 :skolemid skolem_user_vstd__seq__axiom_seq_add_index2_36)))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%2 (Type Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i~21$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i~21$) (%%apply%%1 %%hole%%3 i~21$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i~21$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i~21$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A& Type) (A&. Type) (B& Type) (B&. Type) (self~2@ Poly) (f~4@ Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A& A&. B& B&. self~2@ f~4@) (vstd!seq.Seq.new.? B& B&. (TYPE%fun%1. INT B&) (TYPE%fun%1. INT B&.) (I (vstd!seq.Seq.len.? A& A&. self~2@)) (Poly%fun%1. (mk_fun (%%lambda%%2 A& A&. self~2@ (%Poly%fun%2. f~4@)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A& A&. B& B&. self~2@ f~4@)) :qid internal_vstd!seq_lib.impl&__0.map.?_definition :skolemid skolem_internal_vstd!seq_lib.impl&__0.map.?_definition))))
(assert (forall ((A& Type) (A&. Type) (B& Type) (B&. Type) (self~2@ Poly) (f~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type f~4@ (TYPE%fun%2. INT A& B&))) (has_type (vstd!seq_lib.impl&%0.map.? A& A&. B& B&. self~2@ f~4@) (TYPE%vstd!seq.Seq. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A& A&. B& B&. self~2@ f~4@)) :qid internal_vstd!seq_lib.impl&__0.map.?_pre_post_definition :skolemid skolem_internal_vstd!seq_lib.impl&__0.map.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (pred~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type pred~4@ (TYPE%fun%1. A& BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A& A&. self~2@ pred~4@) (TYPE%vstd!seq.Seq. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A& A&. self~2@ pred~4@)) :qid internal_vstd!seq_lib.impl&__0.filter.?_pre_post_definition :skolemid skolem_internal_vstd!seq_lib.impl&__0.filter.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A& Type) (A&. Type) (self~2@ Poly) (needle~4@ Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A& A&. self~2@ needle~4@) (exists ((i~12$ Poly)) (! (and (has_type i~12$ INT) (and (and (<= 0 (%I i~12$)) (< (%I i~12$) (vstd!seq.Seq.len.? A& A&. self~2@))) (= (vstd!seq.Seq.index.? A& A&. self~2@ i~12$) needle~4@))) :pattern ((vstd!seq.Seq.index.? A& A&. self~2@ i~12$)) :qid user_vstd__seq_lib__impl&%0__contains_37 :skolemid skolem_user_vstd__seq_lib__impl&%0__contains_37))) :pattern ((vstd!seq_lib.impl&%0.contains.? A& A&. self~2@ needle~4@)) :qid internal_vstd!seq_lib.impl&__0.contains.?_definition :skolemid skolem_internal_vstd!seq_lib.impl&__0.contains.?_definition))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. (Type Type Poly %%Function%%) Bool)
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (pred~4@ %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A& A&. self~2@ pred~4@) (and (forall ((i~18$ Poly)) (! (=> (has_type i~18$ INT) (=> (and (<= 0 (%I i~18$)) (< (%I i~18$) (vstd!seq.Seq.len.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2@ (Poly%fun%1. pred~4@))))) (%B (%%apply%%0 pred~4@ (vstd!seq.Seq.index.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2@ (Poly%fun%1. pred~4@)) i~18$))))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2@ (Poly%fun%1. pred~4@)) i~18$)) :qid user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_38 :skolemid skolem_user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_38)) (forall ((i~82$ Poly)) (! (=> (has_type i~82$ INT) (=> (and (and (<= 0 (%I i~82$)) (< (%I i~82$) (vstd!seq.Seq.len.? A& A&. self~2@))) (%B (%%apply%%0 pred~4@ (vstd!seq.Seq.index.? A& A&. self~2@ i~82$)))) (vstd!seq_lib.impl&%0.contains.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2@ (Poly%fun%1. pred~4@)) (vstd!seq.Seq.index.? A& A&. self~2@ i~82$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2@ (Poly%fun%1. pred~4@)) (vstd!seq.Seq.index.? A& A&. self~2@ i~82$))) :qid user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_39 :skolemid skolem_user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_39)) (<= (vstd!seq.Seq.len.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2@ (Poly%fun%1. pred~4@))) (vstd!seq.Seq.len.? A& A&. self~2@)))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A& A&. self~2@ pred~4@)) :qid internal_ens__vstd!seq_lib.impl&__0.filter_lemma_broadcast._definition :skolemid skolem_internal_ens__vstd!seq_lib.impl&__0.filter_lemma_broadcast._definition)))
(assert (forall ((A& Type) (A&. Type) (self~2$ Poly) (pred~4$ Poly)) (! (=> (and (has_type self~2$ (TYPE%vstd!seq.Seq. A&)) (has_type pred~4$ (TYPE%fun%1. A& BOOL))) (and (and (forall ((i~18$ Poly)) (! (=> (has_type i~18$ INT) (=> (and (<= 0 (%I i~18$)) (< (%I i~18$) (vstd!seq.Seq.len.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2$ pred~4$)))) (%B (%%apply%%0 (%Poly%fun%1. pred~4$) (vstd!seq.Seq.index.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2$ pred~4$) i~18$))))) :pattern ((vstd!seq.Seq.index.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2$ pred~4$) i~18$)) :qid user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_40 :skolemid skolem_user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_40)) (forall ((i~82$ Poly)) (! (=> (has_type i~82$ INT) (=> (and (and (<= 0 (%I i~82$)) (< (%I i~82$) (vstd!seq.Seq.len.? A& A&. self~2$))) (%B (%%apply%%0 (%Poly%fun%1. pred~4$) (vstd!seq.Seq.index.? A& A&. self~2$ i~82$)))) (vstd!seq_lib.impl&%0.contains.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2$ pred~4$) (vstd!seq.Seq.index.? A& A&. self~2$ i~82$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2$ pred~4$) (vstd!seq.Seq.index.? A& A&. self~2$ i~82$))) :qid user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_41 :skolemid skolem_user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_41))) (<= (vstd!seq.Seq.len.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2$ pred~4$)) (vstd!seq.Seq.len.? A& A&. self~2$)))) :pattern ((vstd!seq.Seq.len.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. self~2$ pred~4$))) :qid user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_42 :skolemid skolem_user_vstd__seq_lib__impl&%0__filter_lemma_broadcast_42)))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. (Type Type Poly Poly %%Function%%) Bool)
(assert (forall ((A& Type) (A&. Type) (a~2@ Poly) (b~4@ Poly) (pred~6@ %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A& A&. a~2@ b~4@ pred~6@) (= (vstd!seq_lib.impl&%0.filter.? A& A&. (vstd!seq.Seq.add.? A& A&. a~2@ b~4@) (Poly%fun%1. pred~6@)) (vstd!seq.Seq.add.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. a~2@ (Poly%fun%1. pred~6@)) (vstd!seq_lib.impl&%0.filter.? A& A&. b~4@ (Poly%fun%1. pred~6@))))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A& A&. a~2@ b~4@ pred~6@)) :qid internal_ens__vstd!seq_lib.impl&__0.filter_distributes_over_add_broacast._definition :skolemid skolem_internal_ens__vstd!seq_lib.impl&__0.filter_distributes_over_add_broacast._definition)))
(assert (forall ((A& Type) (A&. Type) (a~2$ Poly) (b~4$ Poly) (pred~6$ Poly)) (! (=> (and (has_type a~2$ (TYPE%vstd!seq.Seq. A&)) (has_type b~4$ (TYPE%vstd!seq.Seq. A&)) (has_type pred~6$ (TYPE%fun%1. A& BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A& A&. (vstd!seq.Seq.add.? A& A&. a~2$ b~4$) pred~6$) (vstd!seq.Seq.add.? A& A&. (vstd!seq_lib.impl&%0.filter.? A& A&. a~2$ pred~6$) (vstd!seq_lib.impl&%0.filter.? A& A&. b~4$ pred~6$)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A& A&. (vstd!seq.Seq.add.? A& A&. a~2$ b~4$) pred~6$)) :qid user_vstd__seq_lib__impl&%0__filter_distributes_over_add_broacast_43 :skolemid skolem_user_vstd__seq_lib__impl&%0__filter_distributes_over_add_broacast_43)))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::add_empty_broacast")
(declare-fun ens%vstd!seq_lib.impl&%0.add_empty_broacast. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (a~2@ Poly) (b~4@ Poly)) (! (= (ens%vstd!seq_lib.impl&%0.add_empty_broacast. A& A&. a~2@ b~4@) (=> (= (vstd!seq.Seq.len.? A& A&. b~4@) 0) (= (vstd!seq.Seq.add.? A& A&. a~2@ b~4@) a~2@))) :pattern ((ens%vstd!seq_lib.impl&%0.add_empty_broacast. A& A&. a~2@ b~4@)) :qid internal_ens__vstd!seq_lib.impl&__0.add_empty_broacast._definition :skolemid skolem_internal_ens__vstd!seq_lib.impl&__0.add_empty_broacast._definition)))
(assert (forall ((A& Type) (A&. Type) (a~2$ Poly) (b~4$ Poly)) (! (=> (and (has_type a~2$ (TYPE%vstd!seq.Seq. A&)) (has_type b~4$ (TYPE%vstd!seq.Seq. A&))) (=> (= (vstd!seq.Seq.len.? A& A&. b~4$) 0) (= (vstd!seq.Seq.add.? A& A&. a~2$ b~4$) a~2$))) :pattern ((vstd!seq.Seq.add.? A& A&. a~2$ b~4$)) :qid user_vstd__seq_lib__impl&%0__add_empty_broacast_44 :skolemid skolem_user_vstd__seq_lib__impl&%0__add_empty_broacast_44)))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::push_distributes_over_add_broacast")
(declare-fun ens%vstd!seq_lib.impl&%0.push_distributes_over_add_broacast. (Type Type Poly Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (a~2@ Poly) (b~4@ Poly) (elt~6@ Poly)) (! (= (ens%vstd!seq_lib.impl&%0.push_distributes_over_add_broacast. A& A&. a~2@ b~4@ elt~6@) (= (vstd!seq.Seq.push.? A& A&. (vstd!seq.Seq.add.? A& A&. a~2@ b~4@) elt~6@) (vstd!seq.Seq.add.? A& A&. a~2@ (vstd!seq.Seq.push.? A& A&. b~4@ elt~6@)))) :pattern ((ens%vstd!seq_lib.impl&%0.push_distributes_over_add_broacast. A& A&. a~2@ b~4@ elt~6@)) :qid internal_ens__vstd!seq_lib.impl&__0.push_distributes_over_add_broacast._definition :skolemid skolem_internal_ens__vstd!seq_lib.impl&__0.push_distributes_over_add_broacast._definition)))
(assert (forall ((A& Type) (A&. Type) (a~2$ Poly) (b~4$ Poly) (elt~6$ Poly)) (! (=> (and (has_type a~2$ (TYPE%vstd!seq.Seq. A&)) (has_type b~4$ (TYPE%vstd!seq.Seq. A&)) (has_type elt~6$ A&)) (= (vstd!seq.Seq.push.? A& A&. (vstd!seq.Seq.add.? A& A&. a~2$ b~4$) elt~6$) (vstd!seq.Seq.add.? A& A&. a~2$ (vstd!seq.Seq.push.? A& A&. b~4$ elt~6$)))) :pattern ((vstd!seq.Seq.push.? A& A&. (vstd!seq.Seq.add.? A& A&. a~2$ b~4$) elt~6$)) :pattern ((vstd!seq.Seq.add.? A& A&. a~2$ (vstd!seq.Seq.push.? A& A&. b~4$ elt~6$))) :qid user_vstd__seq_lib__impl&%0__push_distributes_over_add_broacast_45 :skolemid skolem_user_vstd__seq_lib__impl&%0__push_distributes_over_add_broacast_45)))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%3 (Type Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Poly) (a~15$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) a~15$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a~15$))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) a~15$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A& Type) (A&. Type) (self~2@ Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A& A&. self~2@) (vstd!set.impl&%0.new.? A& A&. (TYPE%fun%1. A& BOOL) (TYPE%fun%1. A&. BOOL) (Poly%fun%1. (mk_fun (%%lambda%%3 A& A&. self~2@))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A& A&. self~2@)) :qid internal_vstd!seq_lib.impl&__0.to_set.?_definition :skolemid skolem_internal_vstd!seq_lib.impl&__0.to_set.?_definition))))
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ (TYPE%vstd!seq.Seq. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A& A&. self~2@) (TYPE%vstd!set.Set. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A& A&. self~2@)) :qid internal_vstd!seq_lib.impl&__0.to_set.?_pre_post_definition :skolemid skolem_internal_vstd!seq_lib.impl&__0.to_set.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::seq_lib::seq_to_set_is_finite_broadcast")
(declare-fun ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. (Type Type Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (seq~2@ Poly)) (! (= (ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A& A&. seq~2@) (vstd!set.impl&%0.finite.? A& A&. (vstd!seq_lib.impl&%0.to_set.? A& A&. seq~2@))) :pattern ((ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A& A&. seq~2@)) :qid internal_ens__vstd!seq_lib.seq_to_set_is_finite_broadcast._definition :skolemid skolem_internal_ens__vstd!seq_lib.seq_to_set_is_finite_broadcast._definition)))
(assert (forall ((A& Type) (A&. Type) (seq~2$ Poly)) (! (=> (has_type seq~2$ (TYPE%vstd!seq.Seq. A&)) (vstd!set.impl&%0.finite.? A& A&. (vstd!seq_lib.impl&%0.to_set.? A& A&. seq~2$))) :pattern ((vstd!set.impl&%0.finite.? A& A&. (vstd!seq_lib.impl&%0.to_set.? A& A&. seq~2$))) :qid user_vstd__seq_lib__seq_to_set_is_finite_broadcast_46 :skolemid skolem_user_vstd__seq_lib__seq_to_set_is_finite_broadcast_46)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ (TYPE%vstd!set.Set. A&)) (<= 0 (vstd!set.impl&%0.len.? A& A&. self~2@))) :pattern ((vstd!set.impl&%0.len.? A& A&. self~2@)) :qid internal_vstd!set.impl&__0.len.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.len.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (s2~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!set.Set. A&)) (has_type s2~4@ (TYPE%vstd!set.Set. A&))) (has_type (vstd!set.impl&%0.union.? A& A&. self~2@ s2~4@) (TYPE%vstd!set.Set. A&))) :pattern ((vstd!set.impl&%0.union.? A& A&. self~2@ s2~4@)) :qid internal_vstd!set.impl&__0.union.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.union.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (s2~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!set.Set. A&)) (has_type s2~4@ (TYPE%vstd!set.Set. A&))) (has_type (vstd!set.impl&%0.intersect.? A& A&. self~2@ s2~4@) (TYPE%vstd!set.Set. A&))) :pattern ((vstd!set.impl&%0.intersect.? A& A&. self~2@ s2~4@)) :qid internal_vstd!set.impl&__0.intersect.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.intersect.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly) (s2~4@ Poly)) (! (=> (and (has_type self~2@ (TYPE%vstd!set.Set. A&)) (has_type s2~4@ (TYPE%vstd!set.Set. A&))) (has_type (vstd!set.impl&%0.difference.? A& A&. self~2@ s2~4@) (TYPE%vstd!set.Set. A&))) :pattern ((vstd!set.impl&%0.difference.? A& A&. self~2@ s2~4@)) :qid internal_vstd!set.impl&__0.difference.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.difference.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Type Type Poly Type Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Type) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a~10$ Poly)) (! (and (has_type a~10$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a~10$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a~10$)) :qid user_vstd__set__impl&%0__choose_47 :skolemid skolem_user_vstd__set__impl&%0__choose_47)) (exists ((a~10$ Poly)) (! (and (and (has_type a~10$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a~10$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a~10$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a~10$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A& Type) (A&. Type) (self~2@ Poly)) (! (= (vstd!set.impl&%0.choose.? A& A&. self~2@) (as_type (%%choose%%0 A& A& A&. self~2@ A& A&. self~2@) A&)) :pattern ((vstd!set.impl&%0.choose.? A& A&. self~2@)) :qid internal_vstd!set.impl&__0.choose.?_definition :skolemid skolem_internal_vstd!set.impl&__0.choose.?_definition))))
(assert (forall ((A& Type) (A&. Type) (self~2@ Poly)) (! (=> (has_type self~2@ (TYPE%vstd!set.Set. A&)) (has_type (vstd!set.impl&%0.choose.? A& A&. self~2@) A&)) :pattern ((vstd!set.impl&%0.choose.? A& A&. self~2@)) :qid internal_vstd!set.impl&__0.choose.?_pre_post_definition :skolemid skolem_internal_vstd!set.impl&__0.choose.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Type Type Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (a~2@ Poly)) (! (= (ens%vstd!set.axiom_set_empty. A& A&. a~2@) (not (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.empty.? A& A&.) a~2@))) :pattern ((ens%vstd!set.axiom_set_empty. A& A&. a~2@)) :qid internal_ens__vstd!set.axiom_set_empty._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_empty._definition)))
(assert (forall ((A& Type) (A&. Type) (a~2$ Poly)) (! (=> (has_type a~2$ A&) (not (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.empty.? A& A&.) a~2$))) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.empty.? A& A&.) a~2$)) :qid user_vstd__set__axiom_set_empty_48 :skolemid skolem_user_vstd__set__axiom_set_empty_48)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Type Type %%Function%% Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (f~2@ %%Function%%) (a~4@ Poly)) (! (= (ens%vstd!set.axiom_set_new. A& A&. f~2@ a~4@) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.new.? A& A&. (TYPE%fun%1. A& BOOL) (TYPE%fun%1. A&. BOOL) (Poly%fun%1. f~2@)) a~4@) (%B (%%apply%%0 f~2@ a~4@)))) :pattern ((ens%vstd!set.axiom_set_new. A& A&. f~2@ a~4@)) :qid internal_ens__vstd!set.axiom_set_new._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_new._definition)))
(assert (forall ((A& Type) (A&. Type) (f~2$ Poly) (a~4$ Poly)) (! (=> (and (has_type f~2$ (TYPE%fun%1. A& BOOL)) (has_type a~4$ A&)) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.new.? A& A&. (TYPE%fun%1. A& BOOL) (TYPE%fun%1. A&. BOOL) f~2$) a~4$) (%B (%%apply%%0 (%Poly%fun%1. f~2$) a~4$)))) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.new.? A& A&. (TYPE%fun%1. A& BOOL) (TYPE%fun%1. A&. BOOL) f~2$) a~4$)) :qid user_vstd__set__axiom_set_new_49 :skolemid skolem_user_vstd__set__axiom_set_new_49)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A& A&. s~2@ a~4@) (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2@ a~4@) a~4@)) :pattern ((ens%vstd!set.axiom_set_insert_same. A& A&. s~2@ a~4@)) :qid internal_ens__vstd!set.axiom_set_insert_same._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_insert_same._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. A&)) (has_type a~4$ A&)) (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2$ a~4$) a~4$)) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2$ a~4$) a~4$)) :qid user_vstd__set__axiom_set_insert_same_50 :skolemid skolem_user_vstd__set__axiom_set_insert_same_50)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Type Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a1~4@ Poly) (a2~6@ Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A& A&. s~2@ a1~4@ a2~6@) (=> %%global_location_label%%28 (not (= a1~4@ a2~6@)))) :pattern ((req%vstd!set.axiom_set_insert_different. A& A&. s~2@ a1~4@ a2~6@)) :qid internal_req__vstd!set.axiom_set_insert_different._definition :skolemid skolem_internal_req__vstd!set.axiom_set_insert_different._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_insert_different")
(declare-fun ens%vstd!set.axiom_set_insert_different. (Type Type Poly Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a1~4@ Poly) (a2~6@ Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A& A&. s~2@ a1~4@ a2~6@) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2@ a2~6@) a1~4@) (vstd!set.impl&%0.contains.? A& A&. s~2@ a1~4@))) :pattern ((ens%vstd!set.axiom_set_insert_different. A& A&. s~2@ a1~4@ a2~6@)) :qid internal_ens__vstd!set.axiom_set_insert_different._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_insert_different._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a1~4$ Poly) (a2~6$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. A&)) (has_type a1~4$ A&) (has_type a2~6$ A&)) (=> (not (= a1~4$ a2~6$)) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2$ a2~6$) a1~4$) (vstd!set.impl&%0.contains.? A& A&. s~2$ a1~4$)))) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2$ a2~6$) a1~4$)) :qid user_vstd__set__axiom_set_insert_different_51 :skolemid skolem_user_vstd__set__axiom_set_insert_different_51)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A& A&. s~2@ a~4@) (not (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2@ a~4@) a~4@))) :pattern ((ens%vstd!set.axiom_set_remove_same. A& A&. s~2@ a~4@)) :qid internal_ens__vstd!set.axiom_set_remove_same._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_remove_same._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. A&)) (has_type a~4$ A&)) (not (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2$ a~4$) a~4$))) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2$ a~4$) a~4$)) :qid user_vstd__set__axiom_set_remove_same_52 :skolemid skolem_user_vstd__set__axiom_set_remove_same_52)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Type Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a1~4@ Poly) (a2~6@ Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A& A&. s~2@ a1~4@ a2~6@) (=> %%global_location_label%%29 (not (= a1~4@ a2~6@)))) :pattern ((req%vstd!set.axiom_set_remove_different. A& A&. s~2@ a1~4@ a2~6@)) :qid internal_req__vstd!set.axiom_set_remove_different._definition :skolemid skolem_internal_req__vstd!set.axiom_set_remove_different._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_remove_different")
(declare-fun ens%vstd!set.axiom_set_remove_different. (Type Type Poly Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a1~4@ Poly) (a2~6@ Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A& A&. s~2@ a1~4@ a2~6@) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2@ a2~6@) a1~4@) (vstd!set.impl&%0.contains.? A& A&. s~2@ a1~4@))) :pattern ((ens%vstd!set.axiom_set_remove_different. A& A&. s~2@ a1~4@ a2~6@)) :qid internal_ens__vstd!set.axiom_set_remove_different._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_remove_different._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a1~4$ Poly) (a2~6$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. A&)) (has_type a1~4$ A&) (has_type a2~6$ A&)) (=> (not (= a1~4$ a2~6$)) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2$ a2~6$) a1~4$) (vstd!set.impl&%0.contains.? A& A&. s~2$ a1~4$)))) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2$ a2~6$) a1~4$)) :qid user_vstd__set__axiom_set_remove_different_53 :skolemid skolem_user_vstd__set__axiom_set_remove_different_53)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Type Type Poly Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly) (a~6@ Poly)) (! (= (ens%vstd!set.axiom_set_union. A& A&. s1~2@ s2~4@ a~6@) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.union.? A& A&. s1~2@ s2~4@) a~6@) (or (vstd!set.impl&%0.contains.? A& A&. s1~2@ a~6@) (vstd!set.impl&%0.contains.? A& A&. s2~4@ a~6@)))) :pattern ((ens%vstd!set.axiom_set_union. A& A&. s1~2@ s2~4@ a~6@)) :qid internal_ens__vstd!set.axiom_set_union._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_union._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly) (a~6$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!set.Set. A&)) (has_type s2~4$ (TYPE%vstd!set.Set. A&)) (has_type a~6$ A&)) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.union.? A& A&. s1~2$ s2~4$) a~6$) (or (vstd!set.impl&%0.contains.? A& A&. s1~2$ a~6$) (vstd!set.impl&%0.contains.? A& A&. s2~4$ a~6$)))) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.union.? A& A&. s1~2$ s2~4$) a~6$)) :qid user_vstd__set__axiom_set_union_54 :skolemid skolem_user_vstd__set__axiom_set_union_54)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Type Type Poly Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly) (a~6@ Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A& A&. s1~2@ s2~4@ a~6@) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.intersect.? A& A&. s1~2@ s2~4@) a~6@) (and (vstd!set.impl&%0.contains.? A& A&. s1~2@ a~6@) (vstd!set.impl&%0.contains.? A& A&. s2~4@ a~6@)))) :pattern ((ens%vstd!set.axiom_set_intersect. A& A&. s1~2@ s2~4@ a~6@)) :qid internal_ens__vstd!set.axiom_set_intersect._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_intersect._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly) (a~6$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!set.Set. A&)) (has_type s2~4$ (TYPE%vstd!set.Set. A&)) (has_type a~6$ A&)) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.intersect.? A& A&. s1~2$ s2~4$) a~6$) (and (vstd!set.impl&%0.contains.? A& A&. s1~2$ a~6$) (vstd!set.impl&%0.contains.? A& A&. s2~4$ a~6$)))) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.intersect.? A& A&. s1~2$ s2~4$) a~6$)) :qid user_vstd__set__axiom_set_intersect_55 :skolemid skolem_user_vstd__set__axiom_set_intersect_55)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Type Type Poly Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly) (a~6@ Poly)) (! (= (ens%vstd!set.axiom_set_difference. A& A&. s1~2@ s2~4@ a~6@) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.difference.? A& A&. s1~2@ s2~4@) a~6@) (and (vstd!set.impl&%0.contains.? A& A&. s1~2@ a~6@) (not (vstd!set.impl&%0.contains.? A& A&. s2~4@ a~6@))))) :pattern ((ens%vstd!set.axiom_set_difference. A& A&. s1~2@ s2~4@ a~6@)) :qid internal_ens__vstd!set.axiom_set_difference._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_difference._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly) (a~6$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!set.Set. A&)) (has_type s2~4$ (TYPE%vstd!set.Set. A&)) (has_type a~6$ A&)) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.difference.? A& A&. s1~2$ s2~4$) a~6$) (and (vstd!set.impl&%0.contains.? A& A&. s1~2$ a~6$) (not (vstd!set.impl&%0.contains.? A& A&. s2~4$ a~6$))))) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.difference.? A& A&. s1~2$ s2~4$) a~6$)) :qid user_vstd__set__axiom_set_difference_56 :skolemid skolem_user_vstd__set__axiom_set_difference_56)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (ens%vstd!set.axiom_set_complement. A& A&. s~2@ a~4@) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.complement.? A& A&. s~2@) a~4@) (not (vstd!set.impl&%0.contains.? A& A&. s~2@ a~4@)))) :pattern ((ens%vstd!set.axiom_set_complement. A& A&. s~2@ a~4@)) :qid internal_ens__vstd!set.axiom_set_complement._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_complement._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. A&)) (has_type a~4$ A&)) (= (vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.complement.? A& A&. s~2$) a~4$) (not (vstd!set.impl&%0.contains.? A& A&. s~2$ a~4$)))) :pattern ((vstd!set.impl&%0.contains.? A& A&. (vstd!set.impl&%0.complement.? A& A&. s~2$) a~4$)) :qid user_vstd__set__axiom_set_complement_57 :skolemid skolem_user_vstd__set__axiom_set_complement_57)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A& A&. s1~2@ s2~4@) (= (ext_eq false (TYPE%vstd!set.Set. A&) (TYPE%vstd!set.Set. A&.) s1~2@ s2~4@) (forall ((a~32$ Poly)) (! (=> (has_type a~32$ A&) (= (vstd!set.impl&%0.contains.? A& A&. s1~2@ a~32$) (vstd!set.impl&%0.contains.? A& A&. s2~4@ a~32$))) :pattern ((vstd!set.impl&%0.contains.? A& A&. s1~2@ a~32$)) :pattern ((vstd!set.impl&%0.contains.? A& A&. s2~4@ a~32$)) :qid user_vstd__set__axiom_set_ext_equal_58 :skolemid skolem_user_vstd__set__axiom_set_ext_equal_58)))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A& A&. s1~2@ s2~4@)) :qid internal_ens__vstd!set.axiom_set_ext_equal._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_ext_equal._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!set.Set. A&)) (has_type s2~4$ (TYPE%vstd!set.Set. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&) (TYPE%vstd!set.Set. A&.) s1~2$ s2~4$) (forall ((a~32$ Poly)) (! (=> (has_type a~32$ A&) (= (vstd!set.impl&%0.contains.? A& A&. s1~2$ a~32$) (vstd!set.impl&%0.contains.? A& A&. s2~4$ a~32$))) :pattern ((vstd!set.impl&%0.contains.? A& A&. s1~2$ a~32$)) :pattern ((vstd!set.impl&%0.contains.? A& A&. s2~4$ a~32$)) :qid user_vstd__set__axiom_set_ext_equal_59 :skolemid skolem_user_vstd__set__axiom_set_ext_equal_59)))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&) (TYPE%vstd!set.Set. A&.) s1~2$ s2~4$)) :qid user_vstd__set__axiom_set_ext_equal_60 :skolemid skolem_user_vstd__set__axiom_set_ext_equal_60)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A& A&. s1~2@ s2~4@) (= (ext_eq true (TYPE%vstd!set.Set. A&) (TYPE%vstd!set.Set. A&.) s1~2@ s2~4@) (ext_eq false (TYPE%vstd!set.Set. A&) (TYPE%vstd!set.Set. A&.) s1~2@ s2~4@))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A& A&. s1~2@ s2~4@)) :qid internal_ens__vstd!set.axiom_set_ext_equal_deep._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_ext_equal_deep._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!set.Set. A&)) (has_type s2~4$ (TYPE%vstd!set.Set. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&) (TYPE%vstd!set.Set. A&.) s1~2$ s2~4$) (ext_eq false (TYPE%vstd!set.Set. A&) (TYPE%vstd!set.Set. A&.) s1~2$ s2~4$))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&) (TYPE%vstd!set.Set. A&.) s1~2$ s2~4$)) :qid user_vstd__set__axiom_set_ext_equal_deep_61 :skolemid skolem_user_vstd__set__axiom_set_ext_equal_deep_61)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Type Type Type Type Poly %%Function%%) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (s~2@ Poly) (f~4@ %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K& K&. V& V&. s~2@ f~4@) (= (vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!set.impl&%0.mk_map.? K& K&. V& V&. (TYPE%fun%1. K& V&) (TYPE%fun%1. K&. V&.) s~2@ (Poly%fun%1. f~4@))) s~2@)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K& K&. V& V&. s~2@ f~4@)) :qid internal_ens__vstd!set.axiom_mk_map_domain._definition :skolemid skolem_internal_ens__vstd!set.axiom_mk_map_domain._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (s~2$ Poly) (f~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. K&)) (has_type f~4$ (TYPE%fun%1. K& V&))) (= (vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!set.impl&%0.mk_map.? K& K&. V& V&. (TYPE%fun%1. K& V&) (TYPE%fun%1. K&. V&.) s~2$ f~4$)) s~2$)) :pattern ((vstd!map.impl&%0.dom.? K& K&. V& V&. (vstd!set.impl&%0.mk_map.? K& K&. V& V&. (TYPE%fun%1. K& V&) (TYPE%fun%1. K&. V&.) s~2$ f~4$))) :qid user_vstd__set__axiom_mk_map_domain_62 :skolemid skolem_user_vstd__set__axiom_mk_map_domain_62)))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Type Type Type Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (s~2@ Poly) (f~4@ %%Function%%) (key~6@ Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K& K&. V& V&. s~2@ f~4@ key~6@) (=> %%global_location_label%%30 (vstd!set.impl&%0.contains.? K& K&. s~2@ key~6@))) :pattern ((req%vstd!set.axiom_mk_map_index. K& K&. V& V&. s~2@ f~4@ key~6@)) :qid internal_req__vstd!set.axiom_mk_map_index._definition :skolemid skolem_internal_req__vstd!set.axiom_mk_map_index._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_mk_map_index")
(declare-fun ens%vstd!set.axiom_mk_map_index. (Type Type Type Type Poly %%Function%% Poly) Bool)
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (s~2@ Poly) (f~4@ %%Function%%) (key~6@ Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K& K&. V& V&. s~2@ f~4@ key~6@) (= (vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!set.impl&%0.mk_map.? K& K&. V& V&. (TYPE%fun%1. K& V&) (TYPE%fun%1. K&. V&.) s~2@ (Poly%fun%1. f~4@)) key~6@) (%%apply%%0 f~4@ key~6@))) :pattern ((ens%vstd!set.axiom_mk_map_index. K& K&. V& V&. s~2@ f~4@ key~6@)) :qid internal_ens__vstd!set.axiom_mk_map_index._definition :skolemid skolem_internal_ens__vstd!set.axiom_mk_map_index._definition)))
(assert (forall ((K& Type) (K&. Type) (V& Type) (V&. Type) (s~2$ Poly) (f~4$ Poly) (key~6$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. K&)) (has_type f~4$ (TYPE%fun%1. K& V&)) (has_type key~6$ K&)) (=> (vstd!set.impl&%0.contains.? K& K&. s~2$ key~6$) (= (vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!set.impl&%0.mk_map.? K& K&. V& V&. (TYPE%fun%1. K& V&) (TYPE%fun%1. K&. V&.) s~2$ f~4$) key~6$) (%%apply%%0 (%Poly%fun%1. f~4$) key~6$)))) :pattern ((vstd!map.impl&%0.index.? K& K&. V& V&. (vstd!set.impl&%0.mk_map.? K& K&. V& V&. (TYPE%fun%1. K& V&) (TYPE%fun%1. K&. V&.) s~2$ f~4$) key~6$)) :qid user_vstd__set__axiom_mk_map_index_63 :skolemid skolem_user_vstd__set__axiom_mk_map_index_63)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Type Type) Bool)
(assert (forall ((A& Type) (A&. Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A& A&.) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.empty.? A& A&.))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A& A&.)) :qid internal_ens__vstd!set.axiom_set_empty_finite._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_empty_finite._definition)))
(assert (forall ((A& Type) (A&. Type)) (! (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.empty.? A& A&.)) :pattern ((vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.empty.? A& A&.))) :qid user_vstd__set__axiom_set_empty_finite_64 :skolemid skolem_user_vstd__set__axiom_set_empty_finite_64)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A& A&. s~2@ a~4@) (=> %%global_location_label%%31 (vstd!set.impl&%0.finite.? A& A&. s~2@))) :pattern ((req%vstd!set.axiom_set_insert_finite. A& A&. s~2@ a~4@)) :qid internal_req__vstd!set.axiom_set_insert_finite._definition :skolemid skolem_internal_req__vstd!set.axiom_set_insert_finite._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_insert_finite")
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A& A&. s~2@ a~4@) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2@ a~4@))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A& A&. s~2@ a~4@)) :qid internal_ens__vstd!set.axiom_set_insert_finite._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_insert_finite._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. A&)) (has_type a~4$ A&)) (=> (vstd!set.impl&%0.finite.? A& A&. s~2$) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2$ a~4$)))) :pattern ((vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2$ a~4$))) :qid user_vstd__set__axiom_set_insert_finite_65 :skolemid skolem_user_vstd__set__axiom_set_insert_finite_65)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A& A&. s~2@ a~4@) (=> %%global_location_label%%32 (vstd!set.impl&%0.finite.? A& A&. s~2@))) :pattern ((req%vstd!set.axiom_set_remove_finite. A& A&. s~2@ a~4@)) :qid internal_req__vstd!set.axiom_set_remove_finite._definition :skolemid skolem_internal_req__vstd!set.axiom_set_remove_finite._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_remove_finite")
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A& A&. s~2@ a~4@) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2@ a~4@))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A& A&. s~2@ a~4@)) :qid internal_ens__vstd!set.axiom_set_remove_finite._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_remove_finite._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. A&)) (has_type a~4$ A&)) (=> (vstd!set.impl&%0.finite.? A& A&. s~2$) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2$ a~4$)))) :pattern ((vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2$ a~4$))) :qid user_vstd__set__axiom_set_remove_finite_66 :skolemid skolem_user_vstd__set__axiom_set_remove_finite_66)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A& A&. s1~2@ s2~4@) (and (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A& A&. s1~2@)) (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A& A&. s2~4@)))) :pattern ((req%vstd!set.axiom_set_union_finite. A& A&. s1~2@ s2~4@)) :qid internal_req__vstd!set.axiom_set_union_finite._definition :skolemid skolem_internal_req__vstd!set.axiom_set_union_finite._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_union_finite")
(declare-fun ens%vstd!set.axiom_set_union_finite. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A& A&. s1~2@ s2~4@) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.union.? A& A&. s1~2@ s2~4@))) :pattern ((ens%vstd!set.axiom_set_union_finite. A& A&. s1~2@ s2~4@)) :qid internal_ens__vstd!set.axiom_set_union_finite._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_union_finite._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!set.Set. A&)) (has_type s2~4$ (TYPE%vstd!set.Set. A&))) (=> (and (vstd!set.impl&%0.finite.? A& A&. s1~2$) (vstd!set.impl&%0.finite.? A& A&. s2~4$)) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.union.? A& A&. s1~2$ s2~4$)))) :pattern ((vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.union.? A& A&. s1~2$ s2~4$))) :qid user_vstd__set__axiom_set_union_finite_67 :skolemid skolem_user_vstd__set__axiom_set_union_finite_67)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A& A&. s1~2@ s2~4@) (=> %%global_location_label%%35 (or (vstd!set.impl&%0.finite.? A& A&. s1~2@) (vstd!set.impl&%0.finite.? A& A&. s2~4@)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A& A&. s1~2@ s2~4@)) :qid internal_req__vstd!set.axiom_set_intersect_finite._definition :skolemid skolem_internal_req__vstd!set.axiom_set_intersect_finite._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_intersect_finite")
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A& A&. s1~2@ s2~4@) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.intersect.? A& A&. s1~2@ s2~4@))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A& A&. s1~2@ s2~4@)) :qid internal_ens__vstd!set.axiom_set_intersect_finite._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_intersect_finite._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!set.Set. A&)) (has_type s2~4$ (TYPE%vstd!set.Set. A&))) (=> (or (vstd!set.impl&%0.finite.? A& A&. s1~2$) (vstd!set.impl&%0.finite.? A& A&. s2~4$)) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.intersect.? A& A&. s1~2$ s2~4$)))) :pattern ((vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.intersect.? A& A&. s1~2$ s2~4$))) :qid user_vstd__set__axiom_set_intersect_finite_68 :skolemid skolem_user_vstd__set__axiom_set_intersect_finite_68)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A& A&. s1~2@ s2~4@) (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? A& A&. s1~2@))) :pattern ((req%vstd!set.axiom_set_difference_finite. A& A&. s1~2@ s2~4@)) :qid internal_req__vstd!set.axiom_set_difference_finite._definition :skolemid skolem_internal_req__vstd!set.axiom_set_difference_finite._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_difference_finite")
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s1~2@ Poly) (s2~4@ Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A& A&. s1~2@ s2~4@) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.difference.? A& A&. s1~2@ s2~4@))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A& A&. s1~2@ s2~4@)) :qid internal_ens__vstd!set.axiom_set_difference_finite._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_difference_finite._definition)))
(assert (forall ((A& Type) (A&. Type) (s1~2$ Poly) (s2~4$ Poly)) (! (=> (and (has_type s1~2$ (TYPE%vstd!set.Set. A&)) (has_type s2~4$ (TYPE%vstd!set.Set. A&))) (=> (vstd!set.impl&%0.finite.? A& A&. s1~2$) (vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.difference.? A& A&. s1~2$ s2~4$)))) :pattern ((vstd!set.impl&%0.finite.? A& A&. (vstd!set.impl&%0.difference.? A& A&. s1~2$ s2~4$))) :qid user_vstd__set__axiom_set_difference_finite_69 :skolemid skolem_user_vstd__set__axiom_set_difference_finite_69)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Type Type Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A& A&. s~2@) (=> %%global_location_label%%37 (not (vstd!set.impl&%0.finite.? A& A&. s~2@)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A& A&. s~2@)) :qid internal_req__vstd!set.axiom_set_choose_finite._definition :skolemid skolem_internal_req__vstd!set.axiom_set_choose_finite._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_choose_finite")
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Type Type Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A& A&. s~2@) (vstd!set.impl&%0.contains.? A& A&. s~2@ (vstd!set.impl&%0.choose.? A& A&. s~2@))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A& A&. s~2@)) :qid internal_ens__vstd!set.axiom_set_choose_finite._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_choose_finite._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly)) (! (=> (has_type s~2$ (TYPE%vstd!set.Set. A&)) (=> (not (vstd!set.impl&%0.finite.? A& A&. s~2$)) (vstd!set.impl&%0.contains.? A& A&. s~2$ (vstd!set.impl&%0.choose.? A& A&. s~2$)))) :pattern ((vstd!set.impl&%0.contains.? A& A&. s~2$ (vstd!set.impl&%0.choose.? A& A&. s~2$))) :qid user_vstd__set__axiom_set_choose_finite_70 :skolemid skolem_user_vstd__set__axiom_set_choose_finite_70)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Type Type) Bool)
(assert (forall ((A& Type) (A&. Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A& A&.) (= (vstd!set.impl&%0.len.? A& A&. (vstd!set.impl&%0.empty.? A& A&.)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A& A&.)) :qid internal_ens__vstd!set.axiom_set_empty_len._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_empty_len._definition)))
(assert (forall ((A& Type) (A&. Type)) (! (= (vstd!set.impl&%0.len.? A& A&. (vstd!set.impl&%0.empty.? A& A&.)) 0) :pattern ((vstd!set.impl&%0.len.? A& A&. (vstd!set.impl&%0.empty.? A& A&.))) :qid user_vstd__set__axiom_set_empty_len_71 :skolemid skolem_user_vstd__set__axiom_set_empty_len_71)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A& A&. s~2@ a~4@) (=> %%global_location_label%%38 (vstd!set.impl&%0.finite.? A& A&. s~2@))) :pattern ((req%vstd!set.axiom_set_insert_len. A& A&. s~2@ a~4@)) :qid internal_req__vstd!set.axiom_set_insert_len._definition :skolemid skolem_internal_req__vstd!set.axiom_set_insert_len._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_insert_len")
(declare-fun ens%vstd!set.axiom_set_insert_len. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A& A&. s~2@ a~4@) (= (vstd!set.impl&%0.len.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2@ a~4@)) (+ (vstd!set.impl&%0.len.? A& A&. s~2@) (ite (vstd!set.impl&%0.contains.? A& A&. s~2@ a~4@) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A& A&. s~2@ a~4@)) :qid internal_ens__vstd!set.axiom_set_insert_len._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_insert_len._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. A&)) (has_type a~4$ A&)) (=> (vstd!set.impl&%0.finite.? A& A&. s~2$) (= (vstd!set.impl&%0.len.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2$ a~4$)) (+ (vstd!set.impl&%0.len.? A& A&. s~2$) (ite (vstd!set.impl&%0.contains.? A& A&. s~2$ a~4$) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A& A&. (vstd!set.impl&%0.insert.? A& A&. s~2$ a~4$))) :qid user_vstd__set__axiom_set_insert_len_72 :skolemid skolem_user_vstd__set__axiom_set_insert_len_72)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Type Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A& A&. s~2@ a~4@) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A& A&. s~2@))) :pattern ((req%vstd!set.axiom_set_remove_len. A& A&. s~2@ a~4@)) :qid internal_req__vstd!set.axiom_set_remove_len._definition :skolemid skolem_internal_req__vstd!set.axiom_set_remove_len._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_remove_len")
(declare-fun ens%vstd!set.axiom_set_remove_len. (Type Type Poly Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly) (a~4@ Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A& A&. s~2@ a~4@) (= (vstd!set.impl&%0.len.? A& A&. s~2@) (+ (vstd!set.impl&%0.len.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2@ a~4@)) (ite (vstd!set.impl&%0.contains.? A& A&. s~2@ a~4@) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A& A&. s~2@ a~4@)) :qid internal_ens__vstd!set.axiom_set_remove_len._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_remove_len._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly) (a~4$ Poly)) (! (=> (and (has_type s~2$ (TYPE%vstd!set.Set. A&)) (has_type a~4$ A&)) (=> (vstd!set.impl&%0.finite.? A& A&. s~2$) (= (vstd!set.impl&%0.len.? A& A&. s~2$) (+ (vstd!set.impl&%0.len.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2$ a~4$)) (ite (vstd!set.impl&%0.contains.? A& A&. s~2$ a~4$) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A& A&. (vstd!set.impl&%0.remove.? A& A&. s~2$ a~4$))) :qid user_vstd__set__axiom_set_remove_len_73 :skolemid skolem_user_vstd__set__axiom_set_remove_len_73)))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Type Type Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A& A&. s~2@) (and (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A& A&. s~2@)) (=> %%global_location_label%%41 (not (= (vstd!set.impl&%0.len.? A& A&. s~2@) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A& A&. s~2@)) :qid internal_req__vstd!set.axiom_set_choose_len._definition :skolemid skolem_internal_req__vstd!set.axiom_set_choose_len._definition)))
(set-info :comment ";; Function-Axioms vstd::set::axiom_set_choose_len")
(declare-fun ens%vstd!set.axiom_set_choose_len. (Type Type Poly) Bool)
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A& A&. s~2@) (vstd!set.impl&%0.contains.? A& A&. s~2@ (vstd!set.impl&%0.choose.? A& A&. s~2@))) :pattern ((ens%vstd!set.axiom_set_choose_len. A& A&. s~2@)) :qid internal_ens__vstd!set.axiom_set_choose_len._definition :skolemid skolem_internal_ens__vstd!set.axiom_set_choose_len._definition)))
(assert (forall ((A& Type) (A&. Type) (s~2$ Poly)) (! (=> (has_type s~2$ (TYPE%vstd!set.Set. A&)) (=> (and (vstd!set.impl&%0.finite.? A& A&. s~2$) (not (= (vstd!set.impl&%0.len.? A& A&. s~2$) 0))) (vstd!set.impl&%0.contains.? A& A&. s~2$ (vstd!set.impl&%0.choose.? A& A&. s~2$)))) :pattern ((vstd!set.impl&%0.len.? A& A&. s~2$) (vstd!set.impl&%0.contains.? A& A&. s~2$ (vstd!set.impl&%0.choose.? A& A&. s~2$))) :qid user_vstd__set__axiom_set_choose_len_74 :skolemid skolem_user_vstd__set__axiom_set_choose_len_74)))
(set-info :comment ";; Function-Axioms vstd::set_lib::check_argument_is_set")
(assert (fuel_bool_default fuel%vstd!set_lib.check_argument_is_set.))
(assert (=> (fuel_bool fuel%vstd!set_lib.check_argument_is_set.) (forall ((A& Type) (A&. Type) (s~2@ Poly)) (! (= (vstd!set_lib.check_argument_is_set.? A& A&. s~2@) s~2@) :pattern ((vstd!set_lib.check_argument_is_set.? A& A&. s~2@)) :qid internal_vstd!set_lib.check_argument_is_set.?_definition :skolemid skolem_internal_vstd!set_lib.check_argument_is_set.?_definition))))
(assert (forall ((A& Type) (A&. Type) (s~2@ Poly)) (! (=> (has_type s~2@ (TYPE%vstd!set.Set. A&)) (has_type (vstd!set_lib.check_argument_is_set.? A& A&. s~2@) (TYPE%vstd!set.Set. A&))) :pattern ((vstd!set_lib.check_argument_is_set.? A& A&. s~2@)) :qid internal_vstd!set_lib.check_argument_is_set.?_pre_post_definition :skolemid skolem_internal_vstd!set_lib.check_argument_is_set.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::X86_NUM_LAYERS")
(assert (fuel_bool_default fuel%main!definitions_t.X86_NUM_LAYERS.))
(assert (=> (fuel_bool fuel%main!definitions_t.X86_NUM_LAYERS.) (= main!definitions_t.X86_NUM_LAYERS.? 4)))
(assert (uInv SZ main!definitions_t.X86_NUM_LAYERS.?))
(set-info :comment ";; Function-Specs main::definitions_t::Arch::entry_size")
(declare-fun req%main!definitions_t.impl&%7.entry_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly)) (! (= (req%main!definitions_t.impl&%7.entry_size. self~2@ layer~4@) (=> %%global_location_label%%42 (< (%I layer~4@) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@))))))) :pattern ((req%main!definitions_t.impl&%7.entry_size. self~2@ layer~4@)) :qid internal_req__main!definitions_t.impl&__7.entry_size._definition :skolemid skolem_internal_req__main!definitions_t.impl&__7.entry_size._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::entry_size")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.entry_size.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.entry_size.) (forall ((self~2@ Poly) (layer~4@ Poly)) (! (= (main!definitions_t.impl&%7.entry_size.? self~2@ layer~4@) (main!definitions_t.ArchLayer./ArchLayer/entry_size (%Poly%main!definitions_t.ArchLayer. (vstd!seq.Seq.index.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@))) layer~4@)))) :pattern ((main!definitions_t.impl&%7.entry_size.? self~2@ layer~4@)) :qid internal_main!definitions_t.impl&__7.entry_size.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.entry_size.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!definitions_t.Arch.) (has_type layer~4@ NAT)) (<= 0 (main!definitions_t.impl&%7.entry_size.? self~2@ layer~4@))) :pattern ((main!definitions_t.impl&%7.entry_size.? self~2@ layer~4@)) :qid internal_main!definitions_t.impl&__7.entry_size.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.impl&__7.entry_size.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::definitions_t::Arch::num_entries")
(declare-fun req%main!definitions_t.impl&%7.num_entries. (Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly)) (! (= (req%main!definitions_t.impl&%7.num_entries. self~2@ layer~4@) (=> %%global_location_label%%43 (< (%I layer~4@) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@))))))) :pattern ((req%main!definitions_t.impl&%7.num_entries. self~2@ layer~4@)) :qid internal_req__main!definitions_t.impl&__7.num_entries._definition :skolemid skolem_internal_req__main!definitions_t.impl&__7.num_entries._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::num_entries")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.num_entries.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.num_entries.) (forall ((self~2@ Poly) (layer~4@ Poly)) (! (= (main!definitions_t.impl&%7.num_entries.? self~2@ layer~4@) (main!definitions_t.ArchLayer./ArchLayer/num_entries (%Poly%main!definitions_t.ArchLayer. (vstd!seq.Seq.index.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@))) layer~4@)))) :pattern ((main!definitions_t.impl&%7.num_entries.? self~2@ layer~4@)) :qid internal_main!definitions_t.impl&__7.num_entries.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.num_entries.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!definitions_t.Arch.) (has_type layer~4@ NAT)) (<= 0 (main!definitions_t.impl&%7.num_entries.? self~2@ layer~4@))) :pattern ((main!definitions_t.impl&%7.num_entries.? self~2@ layer~4@)) :qid internal_main!definitions_t.impl&__7.num_entries.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.impl&__7.num_entries.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::X86_MAX_ENTRY_SIZE")
(assert (fuel_bool_default fuel%main!definitions_t.X86_MAX_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%main!definitions_t.X86_MAX_ENTRY_SIZE.) (= main!definitions_t.X86_MAX_ENTRY_SIZE.? (nClip (* (nClip (* (nClip (* 512 1024)) 1024)) 1024)))))
(assert (<= 0 main!definitions_t.X86_MAX_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms main::definitions_t::X86_NUM_ENTRIES")
(assert (fuel_bool_default fuel%main!definitions_t.X86_NUM_ENTRIES.))
(assert (=> (fuel_bool fuel%main!definitions_t.X86_NUM_ENTRIES.) (= main!definitions_t.X86_NUM_ENTRIES.? 512)))
(assert (uInv SZ main!definitions_t.X86_NUM_ENTRIES.?))
(set-info :comment ";; Function-Specs main::definitions_t::Arch::entry_size_is_next_layer_size")
(declare-fun req%main!definitions_t.impl&%7.entry_size_is_next_layer_size. (Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((self~2@ Poly) (i~4@ Poly)) (! (= (req%main!definitions_t.impl&%7.entry_size_is_next_layer_size. self~2@ i~4@) (=> %%global_location_label%%44 (< (%I i~4@) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@))))))) :pattern ((req%main!definitions_t.impl&%7.entry_size_is_next_layer_size. self~2@ i~4@)) :qid internal_req__main!definitions_t.impl&__7.entry_size_is_next_layer_size._definition :skolemid skolem_internal_req__main!definitions_t.impl&__7.entry_size_is_next_layer_size._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::entry_size_is_next_layer_size")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.entry_size_is_next_layer_size.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.entry_size_is_next_layer_size.) (forall ((self~2@ Poly) (i~4@ Poly)) (! (= (main!definitions_t.impl&%7.entry_size_is_next_layer_size.? self~2@ i~4@) (=> (< (nClip (+ (%I i~4@) 1)) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@))))) (= (main!definitions_t.impl&%7.entry_size.? self~2@ i~4@) (nClip (Mul (main!definitions_t.impl&%7.entry_size.? self~2@ (I (nClip (+ (%I i~4@) 1)))) (main!definitions_t.impl&%7.num_entries.? self~2@ (I (nClip (+ (%I i~4@) 1))))))))) :pattern ((main!definitions_t.impl&%7.entry_size_is_next_layer_size.? self~2@ i~4@)) :qid internal_main!definitions_t.impl&__7.entry_size_is_next_layer_size.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.entry_size_is_next_layer_size.?_definition))))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::inv")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.inv.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.inv.) (forall ((self~2@ Poly)) (! (= (main!definitions_t.impl&%7.inv.? self~2@) (and (<= (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@)))) main!definitions_t.X86_NUM_LAYERS.?) (forall ((i~20$ Poly)) (! (=> (has_type i~20$ NAT) (=> (< (%I i~20$) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@))))) (and (and (let ((tmp%%1$ (main!definitions_t.impl&%7.entry_size.? self~2@ i~20$))) (and (< 0 tmp%%1$) (<= tmp%%1$ main!definitions_t.X86_MAX_ENTRY_SIZE.?))) (let ((tmp%%2$ (main!definitions_t.impl&%7.num_entries.? self~2@ i~20$))) (and (< 0 tmp%%2$) (<= tmp%%2$ main!definitions_t.X86_NUM_ENTRIES.?)))) (main!definitions_t.impl&%7.entry_size_is_next_layer_size.? self~2@ i~20$)))) :pattern ((main!definitions_t.impl&%7.entry_size.? self~2@ i~20$)) :pattern ((main!definitions_t.impl&%7.num_entries.? self~2@ i~20$)) :qid user_main__definitions_t__Arch__inv_75 :skolemid skolem_user_main__definitions_t__Arch__inv_75)))) :pattern ((main!definitions_t.impl&%7.inv.? self~2@)) :qid internal_main!definitions_t.impl&__7.inv.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.inv.?_definition))))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::contains_entry_size_at_index_atleast")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.contains_entry_size_at_index_atleast.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.contains_entry_size_at_index_atleast.) (forall ((self~2@ Poly) (entry_size~4@ Poly) (min_idx~6@ Poly)) (! (= (main!definitions_t.impl&%7.contains_entry_size_at_index_atleast.? self~2@ entry_size~4@ min_idx~6@) (exists ((i~14$ Poly)) (! (and (has_type i~14$ NAT) (and (and (<= (%I min_idx~6@) (%I i~14$)) (< (%I i~14$) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@)))))) (= (main!definitions_t.impl&%7.entry_size.? self~2@ i~14$) (%I entry_size~4@)))) :pattern ((main!definitions_t.impl&%7.entry_size.? self~2@ i~14$)) :qid user_main__definitions_t__Arch__contains_entry_size_at_index_atleast_76 :skolemid skolem_user_main__definitions_t__Arch__contains_entry_size_at_index_atleast_76))) :pattern ((main!definitions_t.impl&%7.contains_entry_size_at_index_atleast.? self~2@ entry_size~4@ min_idx~6@)) :qid internal_main!definitions_t.impl&__7.contains_entry_size_at_index_atleast.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.contains_entry_size_at_index_atleast.?_definition))))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::contains_entry_size")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.contains_entry_size.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.contains_entry_size.) (forall ((self~2@ Poly) (entry_size~4@ Poly)) (! (= (main!definitions_t.impl&%7.contains_entry_size.? self~2@ entry_size~4@) (main!definitions_t.impl&%7.contains_entry_size_at_index_atleast.? self~2@ entry_size~4@ (I 0))) :pattern ((main!definitions_t.impl&%7.contains_entry_size.? self~2@ entry_size~4@)) :qid internal_main!definitions_t.impl&__7.contains_entry_size.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.contains_entry_size.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::mappings_are_of_valid_size")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.mappings_are_of_valid_size.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.mappings_are_of_valid_size.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l0.impl&%0.mappings_are_of_valid_size.? self~2@) (forall ((va~10$ Poly)) (! (=> (has_type va~10$ NAT) (=> (vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) va~10$) (main!definitions_t.impl&%7.contains_entry_size.? (Poly%main!definitions_t.Arch. (main!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%main!impl_u.l0.PageTableContents. self~2@))) (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) va~10$)))))))))) :pattern ((main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) va~10$))))))) :pattern ((main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) va~10$))))))) :qid user_main__impl_u__l0__PageTableContents__mappings_are_of_valid_size_77 :skolemid skolem_user_main__impl_u__l0__PageTableContents__mappings_are_of_valid_size_77))) :pattern ((main!impl_u.l0.impl&%0.mappings_are_of_valid_size.? self~2@)) :qid internal_main!impl_u.l0.impl&__0.mappings_are_of_valid_size.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.mappings_are_of_valid_size.?_definition))))
(set-info :comment ";; Function-Axioms main::definitions_t::aligned")
(assert (fuel_bool_default fuel%main!definitions_t.aligned.))
(assert (=> (fuel_bool fuel%main!definitions_t.aligned.) (forall ((addr~2@ Poly) (size~4@ Poly)) (! (= (main!definitions_t.aligned.? addr~2@ size~4@) (= (nClip (EucMod (%I addr~2@) (%I size~4@))) 0)) :pattern ((main!definitions_t.aligned.? addr~2@ size~4@)) :qid internal_main!definitions_t.aligned.?_definition :skolemid skolem_internal_main!definitions_t.aligned.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::mappings_are_aligned")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.mappings_are_aligned.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.mappings_are_aligned.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l0.impl&%0.mappings_are_aligned.? self~2@) (forall ((va~10$ Poly)) (! (=> (has_type va~10$ NAT) (=> (vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) va~10$) (and (main!definitions_t.aligned.? va~10$ (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) va~10$)))))))) (main!definitions_t.aligned.? (I (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) va~10$))))))) (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) va~10$))))))))))) :pattern ((main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) va~10$))))))) :pattern ((main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) va~10$))))))) :qid user_main__impl_u__l0__PageTableContents__mappings_are_aligned_78 :skolemid skolem_user_main__impl_u__l0__PageTableContents__mappings_are_aligned_78))) :pattern ((main!impl_u.l0.impl&%0.mappings_are_aligned.? self~2@)) :qid internal_main!impl_u.l0.impl&__0.mappings_are_aligned.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.mappings_are_aligned.?_definition))))
(set-info :comment ";; Function-Axioms main::definitions_t::overlap")
(assert (fuel_bool_default fuel%main!definitions_t.overlap.))
(assert (=> (fuel_bool fuel%main!definitions_t.overlap.) (forall ((region1~2@ Poly) (region2~4@ Poly)) (! (= (main!definitions_t.overlap.? region1~2@ region2~4@) (ite (<= (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. region1~2@)) (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. region2~4@))) (< (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. region2~4@)) (nClip (+ (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. region1~2@)) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. region1~2@))))) (< (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. region1~2@)) (nClip (+ (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. region2~4@)) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. region2~4@))))))) :pattern ((main!definitions_t.overlap.? region1~2@ region2~4@)) :qid internal_main!definitions_t.overlap.?_definition :skolemid skolem_internal_main!definitions_t.overlap.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::mappings_dont_overlap")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.mappings_dont_overlap.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.mappings_dont_overlap.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l0.impl&%0.mappings_dont_overlap.? self~2@) (forall ((b1~10$ Poly) (b2~12$ Poly)) (! (=> (and (has_type b1~10$ NAT) (has_type b2~12$ NAT)) (=> (and (vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) b1~10$) (vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) b2~12$)) (or (= b1~10$ b2~12$) (not (main!definitions_t.overlap.? (Poly%main!definitions_t.MemRegion. (main!definitions_t.MemRegion./MemRegion (%I b1~10$) (%I (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) b1~10$)))))))))) (Poly%main!definitions_t.MemRegion. (main!definitions_t.MemRegion./MemRegion (%I b2~12$) (%I (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) b2~12$))))))))))))))) :pattern ((vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) b1~10$) (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) b2~12$)) :pattern ((vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) b1~10$) (vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) b2~12$)) :qid user_main__impl_u__l0__PageTableContents__mappings_dont_overlap_79 :skolemid skolem_user_main__impl_u__l0__PageTableContents__mappings_dont_overlap_79))) :pattern ((main!impl_u.l0.impl&%0.mappings_dont_overlap.? self~2@)) :qid internal_main!impl_u.l0.impl&__0.mappings_dont_overlap.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.mappings_dont_overlap.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::candidate_mapping_in_bounds")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.candidate_mapping_in_bounds.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.candidate_mapping_in_bounds.) (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (= (main!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self~2@ base~4@ pte~6@) (and (<= (main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. self~2@)) (%I base~4@)) (<= (nClip (+ (%I base~4@) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@))))))) (main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. self~2@))))) :pattern ((main!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self~2@ base~4@ pte~6@)) :qid internal_main!impl_u.l0.impl&__0.candidate_mapping_in_bounds.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.candidate_mapping_in_bounds.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::mappings_in_bounds")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.mappings_in_bounds.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.mappings_in_bounds.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l0.impl&%0.mappings_in_bounds.? self~2@) (forall ((b1~10$ Poly)) (! (=> (has_type b1~10$ NAT) (=> (vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) b1~10$) (main!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self~2@ b1~10$ (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) b1~10$)))) :pattern ((vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) b1~10$)) :pattern ((vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) b1~10$)) :pattern ((main!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self~2@ b1~10$ (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) b1~10$))) :qid user_main__impl_u__l0__PageTableContents__mappings_in_bounds_80 :skolemid skolem_user_main__impl_u__l0__PageTableContents__mappings_in_bounds_80))) :pattern ((main!impl_u.l0.impl&%0.mappings_in_bounds.? self~2@)) :qid internal_main!impl_u.l0.impl&__0.mappings_in_bounds.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.mappings_in_bounds.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::inv")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.inv.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.inv.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l0.impl&%0.inv.? self~2@) (and (and (and (and (and (vstd!set.impl&%0.finite.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))))) (main!definitions_t.impl&%7.inv.? (Poly%main!definitions_t.Arch. (main!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%main!impl_u.l0.PageTableContents. self~2@))))) (main!impl_u.l0.impl&%0.mappings_are_of_valid_size.? self~2@)) (main!impl_u.l0.impl&%0.mappings_are_aligned.? self~2@)) (main!impl_u.l0.impl&%0.mappings_dont_overlap.? self~2@)) (main!impl_u.l0.impl&%0.mappings_in_bounds.? self~2@))) :pattern ((main!impl_u.l0.impl&%0.inv.? self~2@)) :qid internal_main!impl_u.l0.impl&__0.inv.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.inv.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::accepted_mapping")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.accepted_mapping.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.accepted_mapping.) (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (= (main!impl_u.l0.impl&%0.accepted_mapping.? self~2@ base~4@ pte~6@) (and (and (and (main!definitions_t.aligned.? base~4@ (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@))))))) (main!definitions_t.aligned.? (I (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@)))))) (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@)))))))) (main!impl_u.l0.impl&%0.candidate_mapping_in_bounds.? self~2@ base~4@ pte~6@)) (main!definitions_t.impl&%7.contains_entry_size.? (Poly%main!definitions_t.Arch. (main!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%main!impl_u.l0.PageTableContents. self~2@))) (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@))))))))) :pattern ((main!impl_u.l0.impl&%0.accepted_mapping.? self~2@ base~4@ pte~6@)) :qid internal_main!impl_u.l0.impl&__0.accepted_mapping.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.accepted_mapping.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::valid_mapping")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.valid_mapping.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.valid_mapping.) (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (= (main!impl_u.l0.impl&%0.valid_mapping.? self~2@ base~4@ pte~6@) (forall ((b~14$ Poly)) (! (=> (has_type b~14$ NAT) (=> (vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) b~14$) (not (main!definitions_t.overlap.? (Poly%main!definitions_t.MemRegion. (main!definitions_t.MemRegion./MemRegion (%I base~4@) (%I (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@))))))))) (Poly%main!definitions_t.MemRegion. (main!definitions_t.MemRegion./MemRegion (%I b~14$) (%I (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) b~14$)))))))))))))) :pattern ((vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) b~14$)) :qid user_main__impl_u__l0__PageTableContents__valid_mapping_81 :skolemid skolem_user_main__impl_u__l0__PageTableContents__valid_mapping_81))) :pattern ((main!impl_u.l0.impl&%0.valid_mapping.? self~2@ base~4@ pte~6@)) :qid internal_main!impl_u.l0.impl&__0.valid_mapping.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.valid_mapping.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::map_frame")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.map_frame.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.map_frame.) (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (= (main!impl_u.l0.impl&%0.map_frame.? self~2@ base~4@ pte~6@) (ite (main!impl_u.l0.impl&%0.accepted_mapping.? self~2@ base~4@ pte~6@) (ite (main!impl_u.l0.impl&%0.valid_mapping.? self~2@ base~4@ pte~6@) (core!result.Result./Ok (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.insert.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) base~4@ pte~6@)) (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) (%I (I (main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) (%I (I (main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. self~2@))))))) (core!result.Result./Err self~2@)) (%Poly%core!result.Result. (vstd!pervasive.arbitrary.? (TYPE%core!result.Result. TYPE%main!impl_u.l0.PageTableContents. TYPE%main!impl_u.l0.PageTableContents.) (TYPE%core!result.Result. TYPE%main!impl_u.l0.PageTableContents. TYPE%main!impl_u.l0.PageTableContents.))))) :pattern ((main!impl_u.l0.impl&%0.map_frame.? self~2@ base~4@ pte~6@)) :qid internal_main!impl_u.l0.impl&__0.map_frame.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.map_frame.?_definition))))
(assert (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l0.PageTableContents.) (has_type base~4@ NAT) (has_type pte~6@ TYPE%main!definitions_t.PageTableEntry.)) (has_type (Poly%core!result.Result. (main!impl_u.l0.impl&%0.map_frame.? self~2@ base~4@ pte~6@)) (TYPE%core!result.Result. TYPE%main!impl_u.l0.PageTableContents. TYPE%main!impl_u.l0.PageTableContents.))) :pattern ((main!impl_u.l0.impl&%0.map_frame.? self~2@ base~4@ pte~6@)) :qid internal_main!impl_u.l0.impl&__0.map_frame.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.map_frame.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::between")
(assert (fuel_bool_default fuel%main!definitions_t.between.))
(assert (=> (fuel_bool fuel%main!definitions_t.between.) (forall ((x~2@ Poly) (a~4@ Poly) (b~6@ Poly)) (! (= (main!definitions_t.between.? x~2@ a~4@ b~6@) (and (<= (%I a~4@) (%I x~2@)) (< (%I x~2@) (%I b~6@)))) :pattern ((main!definitions_t.between.? x~2@ a~4@ b~6@)) :qid internal_main!definitions_t.between.?_definition :skolemid skolem_internal_main!definitions_t.between.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::accepted_resolve")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.accepted_resolve.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.accepted_resolve.) (forall ((self~2@ Poly) (vaddr~4@ Poly)) (! (= (main!impl_u.l0.impl&%0.accepted_resolve.? self~2@ vaddr~4@) (main!definitions_t.between.? vaddr~4@ (I (main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. self~2@))) (I (main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. self~2@))))) :pattern ((main!impl_u.l0.impl&%0.accepted_resolve.? self~2@ vaddr~4@)) :qid internal_main!impl_u.l0.impl&__0.accepted_resolve.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.accepted_resolve.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l0::PageTableContents::resolve")
(declare-fun req%main!impl_u.l0.impl&%0.resolve. (Poly Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self~2@ Poly) (vaddr~4@ Poly)) (! (= (req%main!impl_u.l0.impl&%0.resolve. self~2@ vaddr~4@) (=> %%global_location_label%%45 (main!impl_u.l0.impl&%0.accepted_resolve.? self~2@ vaddr~4@))) :pattern ((req%main!impl_u.l0.impl&%0.resolve. self~2@ vaddr~4@)) :qid internal_req__main!impl_u.l0.impl&__0.resolve._definition :skolemid skolem_internal_req__main!impl_u.l0.impl&__0.resolve._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::resolve")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.resolve.))
(declare-fun %%choose%%1 (Type Type Type Type Type Type Poly Poly Type Type Type Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Type) (%%hole%%3 Type) (%%hole%%4 Type) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 Poly) (%%hole%%8 Type) (%%hole%%9 Type) (%%hole%%10 Type) (%%hole%%11 Type) (%%hole%%12 Poly)) (! (=> (exists ((base~67$ Poly) (pte~69$ Poly)) (! (and (has_type base~67$ %%hole%%0) (has_type pte~69$ %%hole%%1) (and (vstd!map.impl&%0.contains_pair.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 base~67$ pte~69$) (main!definitions_t.between.? %%hole%%7 base~67$ (I (nClip (+ (%I base~67$) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~69$))))))))))) :pattern ((vstd!map.impl&%0.contains_pair.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 base~67$ pte~69$)) :qid user_main__impl_u__l0__PageTableContents__resolve_83 :skolemid skolem_user_main__impl_u__l0__PageTableContents__resolve_83)) (exists ((base~67$ Poly) (pte~69$ Poly)) (! (and (and (has_type base~67$ %%hole%%0) (has_type pte~69$ %%hole%%1) (and (vstd!map.impl&%0.contains_pair.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 base~67$ pte~69$) (main!definitions_t.between.? %%hole%%7 base~67$ (I (nClip (+ (%I base~67$) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~69$))))))))))) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) (Poly%tuple%2. (tuple%2./tuple%2 base~67$ pte~69$)))) :pattern ((vstd!map.impl&%0.contains_pair.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 base~67$ pte~69$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12)))))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.resolve.) (forall ((self~2@ Poly) (vaddr~4@ Poly)) (! (= (main!impl_u.l0.impl&%0.resolve.? self~2@ vaddr~4@) (ite (exists ((base~26$ Poly) (pte~28$ Poly)) (! (and (and (has_type base~26$ NAT) (has_type pte~28$ TYPE%main!definitions_t.PageTableEntry.)) (and (vstd!map.impl&%0.contains_pair.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) base~26$ pte~28$) (main!definitions_t.between.? vaddr~4@ base~26$ (I (nClip (+ (%I base~26$) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~28$))))))))))) :pattern ((vstd!map.impl&%0.contains_pair.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) base~26$ pte~28$)) :qid user_main__impl_u__l0__PageTableContents__resolve_82 :skolemid skolem_user_main__impl_u__l0__PageTableContents__resolve_82)) (let ((tmp%%1$ (%Poly%tuple%2. (as_type (%%choose%%1 NAT TYPE%main!definitions_t.PageTableEntry. NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) vaddr~4@ NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.))))) (let ((base~100$ (%I (tuple%2./tuple%2/field%0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%1$)))))) (let ((pte~101$ (%Poly%main!definitions_t.PageTableEntry. (tuple%2./tuple%2/field%1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%1$)))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (I base~100$) (Poly%main!definitions_t.PageTableEntry. pte~101$))))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))) :pattern ((main!impl_u.l0.impl&%0.resolve.? self~2@ vaddr~4@)) :qid internal_main!impl_u.l0.impl&__0.resolve.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.resolve.?_definition))))
(assert (forall ((self~2@ Poly) (vaddr~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l0.PageTableContents.) (has_type vaddr~4@ NAT)) (has_type (Poly%core!result.Result. (main!impl_u.l0.impl&%0.resolve.? self~2@ vaddr~4@)) (TYPE%core!result.Result. (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) TYPE%tuple%0.))) :pattern ((main!impl_u.l0.impl&%0.resolve.? self~2@ vaddr~4@)) :qid internal_main!impl_u.l0.impl&__0.resolve.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.resolve.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::remove")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.remove.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.remove.) (forall ((self~2@ Poly) (n~4@ Poly)) (! (= (main!impl_u.l0.impl&%0.remove.? self~2@ n~4@) (main!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.remove.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@))) n~4@)) (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) (%I (I (main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) (%I (I (main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. self~2@)))))) :pattern ((main!impl_u.l0.impl&%0.remove.? self~2@ n~4@)) :qid internal_main!impl_u.l0.impl&__0.remove.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.remove.?_definition))))
(assert (forall ((self~2@ Poly) (n~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l0.PageTableContents.) (has_type n~4@ NAT)) (has_type (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l0.impl&%0.remove.? self~2@ n~4@)) TYPE%main!impl_u.l0.PageTableContents.)) :pattern ((main!impl_u.l0.impl&%0.remove.? self~2@ n~4@)) :qid internal_main!impl_u.l0.impl&__0.remove.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.remove.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::accepted_unmap")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.accepted_unmap.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.accepted_unmap.) (forall ((self~2@ Poly) (base~4@ Poly)) (! (= (main!impl_u.l0.impl&%0.accepted_unmap.? self~2@ base~4@) (and (main!definitions_t.between.? base~4@ (I (main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. self~2@))) (I (main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) (exists ((size~24$ Poly)) (! (and (has_type size~24$ NAT) (and (main!definitions_t.impl&%7.contains_entry_size.? (Poly%main!definitions_t.Arch. (main!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%main!impl_u.l0.PageTableContents. self~2@))) size~24$) (main!definitions_t.aligned.? base~4@ size~24$))) :pattern ((main!definitions_t.impl&%7.contains_entry_size.? (Poly%main!definitions_t.Arch. (main!impl_u.l0.PageTableContents./PageTableContents/arch (%Poly%main!impl_u.l0.PageTableContents. self~2@))) size~24$)) :pattern ((main!definitions_t.aligned.? base~4@ size~24$)) :qid user_main__impl_u__l0__PageTableContents__accepted_unmap_84 :skolemid skolem_user_main__impl_u__l0__PageTableContents__accepted_unmap_84)))) :pattern ((main!impl_u.l0.impl&%0.accepted_unmap.? self~2@ base~4@)) :qid internal_main!impl_u.l0.impl&__0.accepted_unmap.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.accepted_unmap.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l0::PageTableContents::unmap")
(declare-fun req%main!impl_u.l0.impl&%0.unmap. (Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((self~2@ Poly) (base~4@ Poly)) (! (= (req%main!impl_u.l0.impl&%0.unmap. self~2@ base~4@) (=> %%global_location_label%%46 (main!impl_u.l0.impl&%0.accepted_unmap.? self~2@ base~4@))) :pattern ((req%main!impl_u.l0.impl&%0.unmap. self~2@ base~4@)) :qid internal_req__main!impl_u.l0.impl&__0.unmap._definition :skolemid skolem_internal_req__main!impl_u.l0.impl&__0.unmap._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l0::PageTableContents::unmap")
(assert (fuel_bool_default fuel%main!impl_u.l0.impl&%0.unmap.))
(assert (=> (fuel_bool fuel%main!impl_u.l0.impl&%0.unmap.) (forall ((self~2@ Poly) (base~4@ Poly)) (! (= (main!impl_u.l0.impl&%0.unmap.? self~2@ base~4@) (ite (vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. self~2@)))) base~4@) (core!result.Result./Ok (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l0.impl&%0.remove.? self~2@ base~4@))) (core!result.Result./Err self~2@))) :pattern ((main!impl_u.l0.impl&%0.unmap.? self~2@ base~4@)) :qid internal_main!impl_u.l0.impl&__0.unmap.?_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.unmap.?_definition))))
(assert (forall ((self~2@ Poly) (base~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l0.PageTableContents.) (has_type base~4@ NAT)) (has_type (Poly%core!result.Result. (main!impl_u.l0.impl&%0.unmap.? self~2@ base~4@)) (TYPE%core!result.Result. TYPE%main!impl_u.l0.PageTableContents. TYPE%main!impl_u.l0.PageTableContents.))) :pattern ((main!impl_u.l0.impl&%0.unmap.? self~2@ base~4@)) :qid internal_main!impl_u.l0.impl&__0.unmap.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l0.impl&__0.unmap.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l0::ambient_arith")
(declare-fun ens%main!impl_u.l0.ambient_arith. (Int) Bool)
(assert (forall ((no%param@ Int)) (! (= (ens%main!impl_u.l0.ambient_arith. no%param@) (and (forall ((a~17$ Int) (b~19$ Int)) (! (=> (and (<= 0 a~17$) (<= 0 b~19$)) (=> (= a~17$ 0) (= (nClip (Mul a~17$ b~19$)) 0))) :pattern ((nClip (Mul a~17$ b~19$))) :qid user_main__impl_u__l0__ambient_arith_85 :skolemid skolem_user_main__impl_u__l0__ambient_arith_85)) (forall ((a~69$ Int) (b~71$ Int)) (! (=> (and (<= 0 a~69$) (<= 0 b~71$)) (=> (= b~71$ 0) (= (nClip (Mul a~69$ b~71$)) 0))) :pattern ((nClip (Mul a~69$ b~71$))) :qid user_main__impl_u__l0__ambient_arith_86 :skolemid skolem_user_main__impl_u__l0__ambient_arith_86)) (forall ((a~121$ Int) (b~123$ Int)) (! (=> (and (<= 0 a~121$) (<= 0 b~123$)) (=> (and (> a~121$ 0) (> b~123$ 0)) (> (nClip (Mul a~121$ b~123$)) 0))) :pattern ((nClip (Mul a~121$ b~123$))) :qid user_main__impl_u__l0__ambient_arith_87 :skolemid skolem_user_main__impl_u__l0__ambient_arith_87)) (forall ((a~178$ Int) (b~180$ Int)) (! (= (Mul a~178$ b~180$) (Mul b~180$ a~178$)) :pattern ((Mul a~178$ b~180$)) :qid user_main__impl_u__l0__ambient_arith_88 :skolemid skolem_user_main__impl_u__l0__ambient_arith_88)) (forall ((a~209$ Poly)) (! (=> (has_type a~209$ NAT) (=> (not (= (%I a~209$) 0)) (main!definitions_t.aligned.? (I 0) a~209$))) :pattern ((main!definitions_t.aligned.? (I 0) a~209$)) :qid user_main__impl_u__l0__ambient_arith_89 :skolemid skolem_user_main__impl_u__l0__ambient_arith_89)))) :pattern ((ens%main!impl_u.l0.ambient_arith. no%param@)) :qid internal_ens__main!impl_u.l0.ambient_arith._definition :skolemid skolem_internal_ens__main!impl_u.l0.ambient_arith._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::entry_size")
(declare-fun req%main!impl_u.l1.impl&%0.entry_size. (Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((self~2@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.entry_size. self~2@) (=> %%global_location_label%%47 (< (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@)) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@)))))))))) :pattern ((req%main!impl_u.l1.impl&%0.entry_size. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.entry_size._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.entry_size._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::entry_size")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.entry_size.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.entry_size.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.entry_size.? self~2@) (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))) (I (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@))))) :pattern ((main!impl_u.l1.impl&%0.entry_size.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.entry_size.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.entry_size.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (<= 0 (main!impl_u.l1.impl&%0.entry_size.? self~2@))) :pattern ((main!impl_u.l1.impl&%0.entry_size.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.entry_size.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.entry_size.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::num_entries")
(declare-fun req%main!impl_u.l1.impl&%0.num_entries. (Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((self~2@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.num_entries. self~2@) (=> %%global_location_label%%48 (< (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@)) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@)))))))))) :pattern ((req%main!impl_u.l1.impl&%0.num_entries. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.num_entries._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.num_entries._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::num_entries")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.num_entries.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.num_entries.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.num_entries.? self~2@) (main!definitions_t.impl&%7.num_entries.? (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))) (I (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@))))) :pattern ((main!impl_u.l1.impl&%0.num_entries.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.num_entries.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.num_entries.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (<= 0 (main!impl_u.l1.impl&%0.num_entries.? self~2@))) :pattern ((main!impl_u.l1.impl&%0.num_entries.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.num_entries.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.num_entries.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::well_formed")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.well_formed.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.well_formed.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.well_formed.? self~2@) (and (and (and (main!definitions_t.impl&%7.inv.? (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@)))) (< (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@)) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))))))))) (main!definitions_t.aligned.? (I (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. self~2@))) (I (nClip (Mul (main!impl_u.l1.impl&%0.entry_size.? self~2@) (main!impl_u.l1.impl&%0.num_entries.? self~2@)))))) (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@)))) (main!impl_u.l1.impl&%0.num_entries.? self~2@)))) :pattern ((main!impl_u.l1.impl&%0.well_formed.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.well_formed.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.well_formed.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::empty")
(declare-fun req%main!impl_u.l1.impl&%0.empty. (Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((self~2@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.empty. self~2@) (=> %%global_location_label%%49 (main!impl_u.l1.impl&%0.well_formed.? self~2@))) :pattern ((req%main!impl_u.l1.impl&%0.empty. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.empty._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.empty._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::empty")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.empty.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.empty.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.empty.? self~2@) (forall ((i~21$ Poly)) (! (=> (has_type i~21$ NAT) (=> (< (%I i~21$) (main!impl_u.l1.impl&%0.num_entries.? self~2@)) ((_ is main!impl_u.l1.NodeEntry./Empty) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$))))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$)) :qid user_main__impl_u__l1__Directory__empty_90 :skolemid skolem_user_main__impl_u__l1__Directory__empty_90))) :pattern ((main!impl_u.l1.impl&%0.empty.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.empty.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.empty.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::pages_match_entry_size")
(declare-fun req%main!impl_u.l1.impl&%0.pages_match_entry_size. (Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((self~2@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.pages_match_entry_size. self~2@) (=> %%global_location_label%%50 (main!impl_u.l1.impl&%0.well_formed.? self~2@))) :pattern ((req%main!impl_u.l1.impl&%0.pages_match_entry_size. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.pages_match_entry_size._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.pages_match_entry_size._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::pages_match_entry_size")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.pages_match_entry_size.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.pages_match_entry_size.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.pages_match_entry_size.? self~2@) (forall ((i~21$ Poly)) (! (=> (has_type i~21$ NAT) (=> (and (< (%I i~21$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))))) ((_ is main!impl_u.l1.NodeEntry./Page) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$)))) (= (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (Poly%main!definitions_t.PageTableEntry. (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$))))))))) (main!impl_u.l1.impl&%0.entry_size.? self~2@)))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$)) :qid user_main__impl_u__l1__Directory__pages_match_entry_size_91 :skolemid skolem_user_main__impl_u__l1__Directory__pages_match_entry_size_91))) :pattern ((main!impl_u.l1.impl&%0.pages_match_entry_size.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.pages_match_entry_size.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.pages_match_entry_size.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::directories_are_in_next_layer")
(declare-fun req%main!impl_u.l1.impl&%0.directories_are_in_next_layer. (Poly) Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((self~2@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.directories_are_in_next_layer. self~2@) (=> %%global_location_label%%51 (main!impl_u.l1.impl&%0.well_formed.? self~2@))) :pattern ((req%main!impl_u.l1.impl&%0.directories_are_in_next_layer. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.directories_are_in_next_layer._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.directories_are_in_next_layer._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::directories_are_in_next_layer")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.directories_are_in_next_layer.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.directories_are_in_next_layer.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.directories_are_in_next_layer.? self~2@) (forall ((i~21$ Poly)) (! (=> (has_type i~21$ NAT) (=> (and (< (%I i~21$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))))) ((_ is main!impl_u.l1.NodeEntry./Directory) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$)))) (let ((directory~74$ (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$))))) (and (= (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. directory~74$))) (nClip (+ (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@)) 1))) (= (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. directory~74$))) (nClip (+ (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. self~2@)) (nClip (Mul (%I i~21$) (main!impl_u.l1.impl&%0.entry_size.? self~2@)))))))))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$)) :qid user_main__impl_u__l1__Directory__directories_are_in_next_layer_92 :skolemid skolem_user_main__impl_u__l1__Directory__directories_are_in_next_layer_92))) :pattern ((main!impl_u.l1.impl&%0.directories_are_in_next_layer.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.directories_are_in_next_layer.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.directories_are_in_next_layer.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::directories_match_arch")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.directories_match_arch.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.directories_match_arch.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.directories_match_arch.? self~2@) (forall ((i~10$ Poly)) (! (=> (has_type i~10$ NAT) (=> (and (< (%I i~10$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))))) ((_ is main!impl_u.l1.NodeEntry./Directory) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~10$)))) (= (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~10$)))))) (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~10$)) :qid user_main__impl_u__l1__Directory__directories_match_arch_93 :skolemid skolem_user_main__impl_u__l1__Directory__directories_match_arch_93))) :pattern ((main!impl_u.l1.impl&%0.directories_match_arch.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.directories_match_arch.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.directories_match_arch.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::directories_are_nonempty")
(declare-fun req%main!impl_u.l1.impl&%0.directories_are_nonempty. (Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((self~2@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.directories_are_nonempty. self~2@) (and (=> %%global_location_label%%52 (main!impl_u.l1.impl&%0.well_formed.? self~2@)) (=> %%global_location_label%%53 (main!impl_u.l1.impl&%0.directories_are_in_next_layer.? self~2@)) (=> %%global_location_label%%54 (main!impl_u.l1.impl&%0.directories_match_arch.? self~2@)))) :pattern ((req%main!impl_u.l1.impl&%0.directories_are_nonempty. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.directories_are_nonempty._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.directories_are_nonempty._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::directories_are_nonempty")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.directories_are_nonempty.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.directories_are_nonempty.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.directories_are_nonempty.? self~2@) (forall ((i~29$ Poly)) (! (=> (has_type i~29$ NAT) (=> (and (< (%I i~29$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))))) ((_ is main!impl_u.l1.NodeEntry./Directory) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~29$)))) (not (main!impl_u.l1.impl&%0.empty.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~29$)))))))) :pattern ((main!impl_u.l1.impl&%0.empty.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~29$)))))) :qid user_main__impl_u__l1__Directory__directories_are_nonempty_94 :skolemid skolem_user_main__impl_u__l1__Directory__directories_are_nonempty_94))) :pattern ((main!impl_u.l1.impl&%0.directories_are_nonempty.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.directories_are_nonempty.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.directories_are_nonempty.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::frames_aligned")
(declare-fun req%main!impl_u.l1.impl&%0.frames_aligned. (Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((self~2@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.frames_aligned. self~2@) (=> %%global_location_label%%55 (main!impl_u.l1.impl&%0.well_formed.? self~2@))) :pattern ((req%main!impl_u.l1.impl&%0.frames_aligned. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.frames_aligned._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.frames_aligned._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::frames_aligned")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.frames_aligned.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.frames_aligned.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.frames_aligned.? self~2@) (forall ((i~21$ Poly)) (! (=> (has_type i~21$ NAT) (=> (and (< (%I i~21$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))))) ((_ is main!impl_u.l1.NodeEntry./Page) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$)))) (main!definitions_t.aligned.? (I (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (Poly%main!definitions_t.PageTableEntry. (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$)))))))))) (I (main!impl_u.l1.impl&%0.entry_size.? self~2@))))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~21$)) :qid user_main__impl_u__l1__Directory__frames_aligned_95 :skolemid skolem_user_main__impl_u__l1__Directory__frames_aligned_95))) :pattern ((main!impl_u.l1.impl&%0.frames_aligned.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.frames_aligned.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.frames_aligned.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::directories_obey_invariant")
(declare-fun req%main!impl_u.l1.impl&%0.directories_obey_invariant. (Poly) Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((self~2@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.directories_obey_invariant. self~2@) (and (=> %%global_location_label%%56 (main!impl_u.l1.impl&%0.well_formed.? self~2@)) (=> %%global_location_label%%57 (main!impl_u.l1.impl&%0.directories_are_in_next_layer.? self~2@)) (=> %%global_location_label%%58 (main!impl_u.l1.impl&%0.directories_match_arch.? self~2@)))) :pattern ((req%main!impl_u.l1.impl&%0.directories_obey_invariant. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.directories_obey_invariant._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.directories_obey_invariant._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::inv")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.inv.))
(declare-const fuel_nat%main!impl_u.l1.impl&%0.inv. Fuel)
(assert (forall ((self~2@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%inv.? self~2@ fuel%@) (main!impl_u.l1.impl&%0.rec%inv.? self~2@ zero)) :pattern ((main!impl_u.l1.impl&%0.rec%inv.? self~2@ fuel%@)) :qid internal_main!impl_u.l1.impl&__0.inv._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.inv._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%inv.? self~2@ (succ fuel%@)) (and (and (and (and (and (and (main!impl_u.l1.impl&%0.well_formed.? self~2@) (main!impl_u.l1.impl&%0.pages_match_entry_size.? self~2@)) (main!impl_u.l1.impl&%0.directories_are_in_next_layer.? self~2@)) (main!impl_u.l1.impl&%0.directories_match_arch.? self~2@)) (main!impl_u.l1.impl&%0.rec%directories_obey_invariant.? self~2@ fuel%@)) (main!impl_u.l1.impl&%0.directories_are_nonempty.? self~2@)) (main!impl_u.l1.impl&%0.frames_aligned.? self~2@))) :pattern ((main!impl_u.l1.impl&%0.rec%inv.? self~2@ (succ fuel%@))) :qid internal_main!impl_u.l1.impl&__0.inv._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.inv._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.inv.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.inv.? self~2@) (main!impl_u.l1.impl&%0.rec%inv.? self~2@ (succ (succ fuel_nat%main!impl_u.l1.impl&%0.inv.)))) :pattern ((main!impl_u.l1.impl&%0.inv.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.inv.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.inv.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::directories_obey_invariant")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.directories_obey_invariant.))
(declare-const fuel_nat%main!impl_u.l1.impl&%0.directories_obey_invariant. Fuel)
(assert (forall ((self~2@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%directories_obey_invariant.? self~2@ fuel%@) (main!impl_u.l1.impl&%0.rec%directories_obey_invariant.? self~2@ zero)) :pattern ((main!impl_u.l1.impl&%0.rec%directories_obey_invariant.? self~2@ fuel%@)) :qid internal_main!impl_u.l1.impl&__0.directories_obey_invariant._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.directories_obey_invariant._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%directories_obey_invariant.? self~2@ (succ fuel%@)) (ite (and (and (main!impl_u.l1.impl&%0.well_formed.? self~2@) (main!impl_u.l1.impl&%0.directories_are_in_next_layer.? self~2@)) (main!impl_u.l1.impl&%0.directories_match_arch.? self~2@)) (forall ((i~69$ Poly)) (! (=> (has_type i~69$ NAT) (=> (and (< (%I i~69$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))))) ((_ is main!impl_u.l1.NodeEntry./Directory) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~69$)))) (main!impl_u.l1.impl&%0.rec%inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~69$)))) fuel%@))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) i~69$)) :qid user_main__impl_u__l1__Directory__directories_obey_invariant_97 :skolemid skolem_user_main__impl_u__l1__Directory__directories_obey_invariant_97)) (%B (vstd!pervasive.arbitrary.? BOOL BOOL)))) :pattern ((main!impl_u.l1.impl&%0.rec%directories_obey_invariant.? self~2@ (succ fuel%@))) :qid internal_main!impl_u.l1.impl&__0.directories_obey_invariant._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.directories_obey_invariant._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.directories_obey_invariant.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.directories_obey_invariant.? self~2@) (main!impl_u.l1.impl&%0.rec%directories_obey_invariant.? self~2@ (succ (succ fuel_nat%main!impl_u.l1.impl&%0.directories_obey_invariant.)))) :pattern ((main!impl_u.l1.impl&%0.directories_obey_invariant.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.directories_obey_invariant.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.directories_obey_invariant.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::indexing::entry_base_from_index")
(assert (fuel_bool_default fuel%main!impl_u.indexing.entry_base_from_index.))
(assert (=> (fuel_bool fuel%main!impl_u.indexing.entry_base_from_index.) (forall ((base~2@ Poly) (idx~4@ Poly) (entry_size~6@ Poly)) (! (= (main!impl_u.indexing.entry_base_from_index.? base~2@ idx~4@ entry_size~6@) (nClip (+ (%I base~2@) (nClip (Mul (%I idx~4@) (%I entry_size~6@)))))) :pattern ((main!impl_u.indexing.entry_base_from_index.? base~2@ idx~4@ entry_size~6@)) :qid internal_main!impl_u.indexing.entry_base_from_index.?_definition :skolemid skolem_internal_main!impl_u.indexing.entry_base_from_index.?_definition))))
(assert (forall ((base~2@ Poly) (idx~4@ Poly) (entry_size~6@ Poly)) (! (=> (and (has_type base~2@ NAT) (has_type idx~4@ NAT) (has_type entry_size~6@ NAT)) (<= 0 (main!impl_u.indexing.entry_base_from_index.? base~2@ idx~4@ entry_size~6@))) :pattern ((main!impl_u.indexing.entry_base_from_index.? base~2@ idx~4@ entry_size~6@)) :qid internal_main!impl_u.indexing.entry_base_from_index.?_pre_post_definition :skolemid skolem_internal_main!impl_u.indexing.entry_base_from_index.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::definitions_t::Arch::entry_base")
(declare-fun req%main!definitions_t.impl&%7.entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly) (idx~8@ Poly)) (! (= (req%main!definitions_t.impl&%7.entry_base. self~2@ layer~4@ base~6@ idx~8@) (and (=> %%global_location_label%%59 (main!definitions_t.impl&%7.inv.? self~2@)) (=> %%global_location_label%%60 (< (%I layer~4@) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@)))))))) :pattern ((req%main!definitions_t.impl&%7.entry_base. self~2@ layer~4@ base~6@ idx~8@)) :qid internal_req__main!definitions_t.impl&__7.entry_base._definition :skolemid skolem_internal_req__main!definitions_t.impl&__7.entry_base._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::entry_base")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.entry_base.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.entry_base.) (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly) (idx~8@ Poly)) (! (= (main!definitions_t.impl&%7.entry_base.? self~2@ layer~4@ base~6@ idx~8@) (main!impl_u.indexing.entry_base_from_index.? base~6@ idx~8@ (I (main!definitions_t.impl&%7.entry_size.? self~2@ layer~4@)))) :pattern ((main!definitions_t.impl&%7.entry_base.? self~2@ layer~4@ base~6@ idx~8@)) :qid internal_main!definitions_t.impl&__7.entry_base.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.entry_base.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly) (idx~8@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!definitions_t.Arch.) (has_type layer~4@ NAT) (has_type base~6@ NAT) (has_type idx~8@ NAT)) (<= 0 (main!definitions_t.impl&%7.entry_base.? self~2@ layer~4@ base~6@ idx~8@))) :pattern ((main!definitions_t.impl&%7.entry_base.? self~2@ layer~4@ base~6@ idx~8@)) :qid internal_main!definitions_t.impl&__7.entry_base.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.impl&__7.entry_base.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::definitions_t::Arch::upper_vaddr")
(declare-fun req%main!definitions_t.impl&%7.upper_vaddr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly)) (! (= (req%main!definitions_t.impl&%7.upper_vaddr. self~2@ layer~4@ base~6@) (and (=> %%global_location_label%%61 (main!definitions_t.impl&%7.inv.? self~2@)) (=> %%global_location_label%%62 (< (%I layer~4@) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@)))))))) :pattern ((req%main!definitions_t.impl&%7.upper_vaddr. self~2@ layer~4@ base~6@)) :qid internal_req__main!definitions_t.impl&__7.upper_vaddr._definition :skolemid skolem_internal_req__main!definitions_t.impl&__7.upper_vaddr._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::upper_vaddr")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.upper_vaddr.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.upper_vaddr.) (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly)) (! (= (main!definitions_t.impl&%7.upper_vaddr.? self~2@ layer~4@ base~6@) (main!impl_u.indexing.entry_base_from_index.? base~6@ (I (main!definitions_t.impl&%7.num_entries.? self~2@ layer~4@)) (I (main!definitions_t.impl&%7.entry_size.? self~2@ layer~4@)))) :pattern ((main!definitions_t.impl&%7.upper_vaddr.? self~2@ layer~4@ base~6@)) :qid internal_main!definitions_t.impl&__7.upper_vaddr.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.upper_vaddr.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!definitions_t.Arch.) (has_type layer~4@ NAT) (has_type base~6@ NAT)) (<= 0 (main!definitions_t.impl&%7.upper_vaddr.? self~2@ layer~4@ base~6@))) :pattern ((main!definitions_t.impl&%7.upper_vaddr.? self~2@ layer~4@ base~6@)) :qid internal_main!definitions_t.impl&__7.upper_vaddr.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.impl&__7.upper_vaddr.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::upper_vaddr")
(declare-fun req%main!impl_u.l1.impl&%0.upper_vaddr. (Poly) Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((self~2@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.upper_vaddr. self~2@) (=> %%global_location_label%%63 (main!impl_u.l1.impl&%0.well_formed.? self~2@))) :pattern ((req%main!impl_u.l1.impl&%0.upper_vaddr. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.upper_vaddr._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.upper_vaddr._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::upper_vaddr")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.upper_vaddr.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.upper_vaddr.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.upper_vaddr.? self~2@) (main!definitions_t.impl&%7.upper_vaddr.? (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))) (I (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@))) (I (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. self~2@))))) :pattern ((main!impl_u.l1.impl&%0.upper_vaddr.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.upper_vaddr.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.upper_vaddr.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (<= 0 (main!impl_u.l1.impl&%0.upper_vaddr.? self~2@))) :pattern ((main!impl_u.l1.impl&%0.upper_vaddr.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.upper_vaddr.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.upper_vaddr.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::entry_base")
(declare-fun req%main!impl_u.l1.impl&%0.entry_base. (Poly Poly) Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((self~2@ Poly) (idx~4@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.entry_base. self~2@ idx~4@) (=> %%global_location_label%%64 (main!impl_u.l1.impl&%0.inv.? self~2@))) :pattern ((req%main!impl_u.l1.impl&%0.entry_base. self~2@ idx~4@)) :qid internal_req__main!impl_u.l1.impl&__0.entry_base._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.entry_base._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::entry_base")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.entry_base.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.entry_base.) (forall ((self~2@ Poly) (idx~4@ Poly)) (! (= (main!impl_u.l1.impl&%0.entry_base.? self~2@ idx~4@) (main!impl_u.indexing.entry_base_from_index.? (I (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. self~2@))) idx~4@ (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))) (I (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@))))))) :pattern ((main!impl_u.l1.impl&%0.entry_base.? self~2@ idx~4@)) :qid internal_main!impl_u.l1.impl&__0.entry_base.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.entry_base.?_definition))))
(assert (forall ((self~2@ Poly) (idx~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type idx~4@ NAT)) (<= 0 (main!impl_u.l1.impl&%0.entry_base.? self~2@ idx~4@))) :pattern ((main!impl_u.l1.impl&%0.entry_base.? self~2@ idx~4@)) :qid internal_main!impl_u.l1.impl&__0.entry_base.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.entry_base.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::entry_bounds")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.entry_bounds.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.entry_bounds.) (forall ((self~2@ Poly) (entry~4@ Poly)) (! (= (main!impl_u.l1.impl&%0.entry_bounds.? self~2@ entry~4@) (tuple%2./tuple%2 (I (main!impl_u.l1.impl&%0.entry_base.? self~2@ entry~4@)) (I (main!impl_u.l1.impl&%0.entry_base.? self~2@ (I (nClip (+ (%I entry~4@) 1))))))) :pattern ((main!impl_u.l1.impl&%0.entry_bounds.? self~2@ entry~4@)) :qid internal_main!impl_u.l1.impl&__0.entry_bounds.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.entry_bounds.?_definition))))
(assert (forall ((self~2@ Poly) (entry~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type entry~4@ NAT)) (has_type (Poly%tuple%2. (main!impl_u.l1.impl&%0.entry_bounds.? self~2@ entry~4@)) (TYPE%tuple%2. NAT NAT))) :pattern ((main!impl_u.l1.impl&%0.entry_bounds.? self~2@ entry~4@)) :qid internal_main!impl_u.l1.impl&__0.entry_bounds.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.entry_bounds.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::interp_of_entry")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.interp_of_entry.))
(declare-const fuel_nat%main!impl_u.l1.impl&%0.interp_of_entry. Fuel)
(assert (forall ((self~2@ Poly) (entry~4@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%interp_of_entry.? self~2@ entry~4@ fuel%@) (main!impl_u.l1.impl&%0.rec%interp_of_entry.? self~2@ entry~4@ zero)) :pattern ((main!impl_u.l1.impl&%0.rec%interp_of_entry.? self~2@ entry~4@ fuel%@)) :qid internal_main!impl_u.l1.impl&__0.interp_of_entry._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp_of_entry._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (entry~4@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%interp_of_entry.? self~2@ entry~4@ (succ fuel%@)) (ite (and (main!impl_u.l1.impl&%0.inv.? self~2@) (< (%I entry~4@) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@)))))) (let ((tmp%%1$ (main!impl_u.l1.impl&%0.entry_bounds.? self~2@ entry~4@))) (let ((lower~61$ (%I (tuple%2./tuple%2/field%0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%1$)))))) (let ((upper~62$ (%I (tuple%2./tuple%2/field%1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%1$)))))) (main!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (let ((tmp%%2$ (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) entry~4@)))) (ite ((_ is main!impl_u.l1.NodeEntry./Page) tmp%%2$) (%Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (let ((p~86$ (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%2$))))) (vstd!map.impl&%0.insert.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.empty.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry.) (I (main!impl_u.l1.impl&%0.entry_base.? self~2@ entry~4@)) (Poly%main!definitions_t.PageTableEntry. p~86$)))) (ite ((_ is main!impl_u.l1.NodeEntry./Directory) tmp%%2$) (let ((d~108$ (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%2$))))) (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.rec%interp_aux.? (Poly%main!impl_u.l1.Directory. d~108$) (I 0) fuel%@))))) (%Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.empty.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry.))))))) (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@)))) (%I (I lower~61$)) (%I (I upper~62$)))))) (%Poly%main!impl_u.l0.PageTableContents. (vstd!pervasive.arbitrary.? TYPE%main!impl_u.l0.PageTableContents. TYPE%main!impl_u.l0.PageTableContents.)))) :pattern ((main!impl_u.l1.impl&%0.rec%interp_of_entry.? self~2@ entry~4@ (succ fuel%@))) :qid internal_main!impl_u.l1.impl&__0.interp_of_entry._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp_of_entry._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.interp_of_entry.) (forall ((self~2@ Poly) (entry~4@ Poly)) (! (= (main!impl_u.l1.impl&%0.interp_of_entry.? self~2@ entry~4@) (main!impl_u.l1.impl&%0.rec%interp_of_entry.? self~2@ entry~4@ (succ (succ fuel_nat%main!impl_u.l1.impl&%0.interp_of_entry.)))) :pattern ((main!impl_u.l1.impl&%0.interp_of_entry.? self~2@ entry~4@)) :qid internal_main!impl_u.l1.impl&__0.interp_of_entry.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp_of_entry.?_definition))))
(assert (forall ((self~2@ Poly) (entry~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type entry~4@ NAT)) (has_type (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp_of_entry.? self~2@ entry~4@)) TYPE%main!impl_u.l0.PageTableContents.)) :pattern ((main!impl_u.l1.impl&%0.interp_of_entry.? self~2@ entry~4@)) :qid internal_main!impl_u.l1.impl&__0.interp_of_entry.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp_of_entry.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::interp_aux")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.interp_aux.))
(declare-const fuel_nat%main!impl_u.l1.impl&%0.interp_aux. Fuel)
(assert (forall ((self~2@ Poly) (i~4@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%interp_aux.? self~2@ i~4@ fuel%@) (main!impl_u.l1.impl&%0.rec%interp_aux.? self~2@ i~4@ zero)) :pattern ((main!impl_u.l1.impl&%0.rec%interp_aux.? self~2@ i~4@ fuel%@)) :qid internal_main!impl_u.l1.impl&__0.interp_aux._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp_aux._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (i~4@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%interp_aux.? self~2@ i~4@ (succ fuel%@)) (ite (main!impl_u.l1.impl&%0.inv.? self~2@) (ite (>= (%I i~4@) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))))) (main!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.empty.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry.)) (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@)))) (%I (I (main!impl_u.l1.impl&%0.upper_vaddr.? self~2@))) (%I (I (main!impl_u.l1.impl&%0.upper_vaddr.? self~2@)))) (let ((rem~98$ (main!impl_u.l1.impl&%0.rec%interp_aux.? self~2@ (I (nClip (+ (%I i~4@) 1))) fuel%@))) (let ((entry_i~107$ (main!impl_u.l1.impl&%0.rec%interp_of_entry.? self~2@ i~4@ fuel%@))) (main!impl_u.l0.PageTableContents./PageTableContents (%Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (vstd!map.impl&%0.union_prefer_right.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. rem~98$)))) (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. entry_i~107$)))))) (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@)))) (%I (I (main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. entry_i~107$))))) (%I (I (main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. rem~98$))))))))) (%Poly%main!impl_u.l0.PageTableContents. (vstd!pervasive.arbitrary.? TYPE%main!impl_u.l0.PageTableContents. TYPE%main!impl_u.l0.PageTableContents.)))) :pattern ((main!impl_u.l1.impl&%0.rec%interp_aux.? self~2@ i~4@ (succ fuel%@))) :qid internal_main!impl_u.l1.impl&__0.interp_aux._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp_aux._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.interp_aux.) (forall ((self~2@ Poly) (i~4@ Poly)) (! (= (main!impl_u.l1.impl&%0.interp_aux.? self~2@ i~4@) (main!impl_u.l1.impl&%0.rec%interp_aux.? self~2@ i~4@ (succ fuel_nat%main!impl_u.l1.impl&%0.interp_aux.))) :pattern ((main!impl_u.l1.impl&%0.interp_aux.? self~2@ i~4@)) :qid internal_main!impl_u.l1.impl&__0.interp_aux.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp_aux.?_definition))))
(assert (forall ((self~2@ Poly) (i~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type i~4@ NAT)) (has_type (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp_aux.? self~2@ i~4@)) TYPE%main!impl_u.l0.PageTableContents.)) :pattern ((main!impl_u.l1.impl&%0.interp_aux.? self~2@ i~4@)) :qid internal_main!impl_u.l1.impl&__0.interp_aux.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp_aux.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::interp")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.interp.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.interp.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l1.impl&%0.interp.? self~2@) (main!impl_u.l1.impl&%0.interp_aux.? self~2@ (I 0))) :pattern ((main!impl_u.l1.impl&%0.interp.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.interp.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? self~2@)) TYPE%main!impl_u.l0.PageTableContents.)) :pattern ((main!impl_u.l1.impl&%0.interp.? self~2@)) :qid internal_main!impl_u.l1.impl&__0.interp.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.interp.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::indexing::index_from_offset")
(declare-fun req%main!impl_u.indexing.index_from_offset. (Poly Poly) Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((offset~2@ Poly) (entry_size~4@ Poly)) (! (= (req%main!impl_u.indexing.index_from_offset. offset~2@ entry_size~4@) (=> %%global_location_label%%65 (> (%I entry_size~4@) 0))) :pattern ((req%main!impl_u.indexing.index_from_offset. offset~2@ entry_size~4@)) :qid internal_req__main!impl_u.indexing.index_from_offset._definition :skolemid skolem_internal_req__main!impl_u.indexing.index_from_offset._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::indexing::index_from_offset")
(assert (fuel_bool_default fuel%main!impl_u.indexing.index_from_offset.))
(assert (=> (fuel_bool fuel%main!impl_u.indexing.index_from_offset.) (forall ((offset~2@ Poly) (entry_size~4@ Poly)) (! (= (main!impl_u.indexing.index_from_offset.? offset~2@ entry_size~4@) (nClip (EucDiv (%I offset~2@) (%I entry_size~4@)))) :pattern ((main!impl_u.indexing.index_from_offset.? offset~2@ entry_size~4@)) :qid internal_main!impl_u.indexing.index_from_offset.?_definition :skolemid skolem_internal_main!impl_u.indexing.index_from_offset.?_definition))))
(assert (forall ((offset~2@ Poly) (entry_size~4@ Poly)) (! (=> (and (has_type offset~2@ NAT) (has_type entry_size~4@ NAT)) (<= 0 (main!impl_u.indexing.index_from_offset.? offset~2@ entry_size~4@))) :pattern ((main!impl_u.indexing.index_from_offset.? offset~2@ entry_size~4@)) :qid internal_main!impl_u.indexing.index_from_offset.?_pre_post_definition :skolemid skolem_internal_main!impl_u.indexing.index_from_offset.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::indexing::index_from_base_and_addr")
(declare-fun req%main!impl_u.indexing.index_from_base_and_addr. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(assert (forall ((base~2@ Poly) (addr~4@ Poly) (entry_size~6@ Poly)) (! (= (req%main!impl_u.indexing.index_from_base_and_addr. base~2@ addr~4@ entry_size~6@) (and (=> %%global_location_label%%66 (>= (%I addr~4@) (%I base~2@))) (=> %%global_location_label%%67 (> (%I entry_size~6@) 0)))) :pattern ((req%main!impl_u.indexing.index_from_base_and_addr. base~2@ addr~4@ entry_size~6@)) :qid internal_req__main!impl_u.indexing.index_from_base_and_addr._definition :skolemid skolem_internal_req__main!impl_u.indexing.index_from_base_and_addr._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::indexing::index_from_base_and_addr")
(assert (fuel_bool_default fuel%main!impl_u.indexing.index_from_base_and_addr.))
(assert (=> (fuel_bool fuel%main!impl_u.indexing.index_from_base_and_addr.) (forall ((base~2@ Poly) (addr~4@ Poly) (entry_size~6@ Poly)) (! (= (main!impl_u.indexing.index_from_base_and_addr.? base~2@ addr~4@ entry_size~6@) (main!impl_u.indexing.index_from_offset.? (I (nClip (- (%I addr~4@) (%I base~2@)))) entry_size~6@)) :pattern ((main!impl_u.indexing.index_from_base_and_addr.? base~2@ addr~4@ entry_size~6@)) :qid internal_main!impl_u.indexing.index_from_base_and_addr.?_definition :skolemid skolem_internal_main!impl_u.indexing.index_from_base_and_addr.?_definition))))
(assert (forall ((base~2@ Poly) (addr~4@ Poly) (entry_size~6@ Poly)) (! (=> (and (has_type base~2@ NAT) (has_type addr~4@ NAT) (has_type entry_size~6@ NAT)) (<= 0 (main!impl_u.indexing.index_from_base_and_addr.? base~2@ addr~4@ entry_size~6@))) :pattern ((main!impl_u.indexing.index_from_base_and_addr.? base~2@ addr~4@ entry_size~6@)) :qid internal_main!impl_u.indexing.index_from_base_and_addr.?_pre_post_definition :skolemid skolem_internal_main!impl_u.indexing.index_from_base_and_addr.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::definitions_t::Arch::index_for_vaddr")
(declare-fun req%main!definitions_t.impl&%7.index_for_vaddr. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly) (vaddr~8@ Poly)) (! (= (req%main!definitions_t.impl&%7.index_for_vaddr. self~2@ layer~4@ base~6@ vaddr~8@) (and (=> %%global_location_label%%68 (main!definitions_t.impl&%7.inv.? self~2@)) (=> %%global_location_label%%69 (< (%I layer~4@) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@)))))) (=> %%global_location_label%%70 (<= (%I base~6@) (%I vaddr~8@))))) :pattern ((req%main!definitions_t.impl&%7.index_for_vaddr. self~2@ layer~4@ base~6@ vaddr~8@)) :qid internal_req__main!definitions_t.impl&__7.index_for_vaddr._definition :skolemid skolem_internal_req__main!definitions_t.impl&__7.index_for_vaddr._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::index_for_vaddr")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.index_for_vaddr.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.index_for_vaddr.) (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly) (vaddr~8@ Poly)) (! (= (main!definitions_t.impl&%7.index_for_vaddr.? self~2@ layer~4@ base~6@ vaddr~8@) (main!impl_u.indexing.index_from_base_and_addr.? base~6@ vaddr~8@ (I (main!definitions_t.impl&%7.entry_size.? self~2@ layer~4@)))) :pattern ((main!definitions_t.impl&%7.index_for_vaddr.? self~2@ layer~4@ base~6@ vaddr~8@)) :qid internal_main!definitions_t.impl&__7.index_for_vaddr.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.index_for_vaddr.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly) (vaddr~8@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!definitions_t.Arch.) (has_type layer~4@ NAT) (has_type base~6@ NAT) (has_type vaddr~8@ NAT)) (<= 0 (main!definitions_t.impl&%7.index_for_vaddr.? self~2@ layer~4@ base~6@ vaddr~8@))) :pattern ((main!definitions_t.impl&%7.index_for_vaddr.? self~2@ layer~4@ base~6@ vaddr~8@)) :qid internal_main!definitions_t.impl&__7.index_for_vaddr.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.impl&__7.index_for_vaddr.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::index_for_vaddr")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.index_for_vaddr.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.index_for_vaddr.) (forall ((self~2@ Poly) (vaddr~4@ Poly)) (! (= (main!impl_u.l1.impl&%0.index_for_vaddr.? self~2@ vaddr~4@) (main!impl_u.indexing.index_from_base_and_addr.? (I (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. self~2@))) vaddr~4@ (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))) (I (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@))))))) :pattern ((main!impl_u.l1.impl&%0.index_for_vaddr.? self~2@ vaddr~4@)) :qid internal_main!impl_u.l1.impl&__0.index_for_vaddr.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.index_for_vaddr.?_definition))))
(assert (forall ((self~2@ Poly) (vaddr~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type vaddr~4@ NAT)) (<= 0 (main!impl_u.l1.impl&%0.index_for_vaddr.? self~2@ vaddr~4@))) :pattern ((main!impl_u.l1.impl&%0.index_for_vaddr.? self~2@ vaddr~4@)) :qid internal_main!impl_u.l1.impl&__0.index_for_vaddr.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.index_for_vaddr.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::indexing::next_entry_base_from_index")
(assert (fuel_bool_default fuel%main!impl_u.indexing.next_entry_base_from_index.))
(assert (=> (fuel_bool fuel%main!impl_u.indexing.next_entry_base_from_index.) (forall ((base~2@ Poly) (idx~4@ Poly) (entry_size~6@ Poly)) (! (= (main!impl_u.indexing.next_entry_base_from_index.? base~2@ idx~4@ entry_size~6@) (nClip (+ (%I base~2@) (nClip (Mul (nClip (+ (%I idx~4@) 1)) (%I entry_size~6@)))))) :pattern ((main!impl_u.indexing.next_entry_base_from_index.? base~2@ idx~4@ entry_size~6@)) :qid internal_main!impl_u.indexing.next_entry_base_from_index.?_definition :skolemid skolem_internal_main!impl_u.indexing.next_entry_base_from_index.?_definition))))
(assert (forall ((base~2@ Poly) (idx~4@ Poly) (entry_size~6@ Poly)) (! (=> (and (has_type base~2@ NAT) (has_type idx~4@ NAT) (has_type entry_size~6@ NAT)) (<= 0 (main!impl_u.indexing.next_entry_base_from_index.? base~2@ idx~4@ entry_size~6@))) :pattern ((main!impl_u.indexing.next_entry_base_from_index.? base~2@ idx~4@ entry_size~6@)) :qid internal_main!impl_u.indexing.next_entry_base_from_index.?_pre_post_definition :skolemid skolem_internal_main!impl_u.indexing.next_entry_base_from_index.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::definitions_t::Arch::next_entry_base")
(declare-fun req%main!definitions_t.impl&%7.next_entry_base. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly) (idx~8@ Poly)) (! (= (req%main!definitions_t.impl&%7.next_entry_base. self~2@ layer~4@ base~6@ idx~8@) (and (=> %%global_location_label%%71 (main!definitions_t.impl&%7.inv.? self~2@)) (=> %%global_location_label%%72 (< (%I layer~4@) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. self~2@)))))))) :pattern ((req%main!definitions_t.impl&%7.next_entry_base. self~2@ layer~4@ base~6@ idx~8@)) :qid internal_req__main!definitions_t.impl&__7.next_entry_base._definition :skolemid skolem_internal_req__main!definitions_t.impl&__7.next_entry_base._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::next_entry_base")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%7.next_entry_base.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%7.next_entry_base.) (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly) (idx~8@ Poly)) (! (= (main!definitions_t.impl&%7.next_entry_base.? self~2@ layer~4@ base~6@ idx~8@) (main!impl_u.indexing.next_entry_base_from_index.? base~6@ idx~8@ (I (main!definitions_t.impl&%7.entry_size.? self~2@ layer~4@)))) :pattern ((main!definitions_t.impl&%7.next_entry_base.? self~2@ layer~4@ base~6@ idx~8@)) :qid internal_main!definitions_t.impl&__7.next_entry_base.?_definition :skolemid skolem_internal_main!definitions_t.impl&__7.next_entry_base.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (base~6@ Poly) (idx~8@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!definitions_t.Arch.) (has_type layer~4@ NAT) (has_type base~6@ NAT) (has_type idx~8@ NAT)) (<= 0 (main!definitions_t.impl&%7.next_entry_base.? self~2@ layer~4@ base~6@ idx~8@))) :pattern ((main!definitions_t.impl&%7.next_entry_base.? self~2@ layer~4@ base~6@ idx~8@)) :qid internal_main!definitions_t.impl&__7.next_entry_base.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.impl&__7.next_entry_base.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::lib::aligned_transitive")
(declare-fun req%main!impl_u.lib.aligned_transitive. (Int Int Int) Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((a~2@ Int) (b~4@ Int) (c~6@ Int)) (! (= (req%main!impl_u.lib.aligned_transitive. a~2@ b~4@ c~6@) (and (=> %%global_location_label%%73 (< 0 b~4@)) (=> %%global_location_label%%74 (< 0 c~6@)) (=> %%global_location_label%%75 (main!definitions_t.aligned.? (I a~2@) (I b~4@))) (=> %%global_location_label%%76 (main!definitions_t.aligned.? (I b~4@) (I c~6@))))) :pattern ((req%main!impl_u.lib.aligned_transitive. a~2@ b~4@ c~6@)) :qid internal_req__main!impl_u.lib.aligned_transitive._definition :skolemid skolem_internal_req__main!impl_u.lib.aligned_transitive._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::lib::aligned_transitive")
(declare-fun ens%main!impl_u.lib.aligned_transitive. (Int Int Int) Bool)
(assert (forall ((a~2@ Int) (b~4@ Int) (c~6@ Int)) (! (= (ens%main!impl_u.lib.aligned_transitive. a~2@ b~4@ c~6@) (main!definitions_t.aligned.? (I a~2@) (I c~6@))) :pattern ((ens%main!impl_u.lib.aligned_transitive. a~2@ b~4@ c~6@)) :qid internal_ens__main!impl_u.lib.aligned_transitive._definition :skolemid skolem_internal_ens__main!impl_u.lib.aligned_transitive._definition)))
(set-info :comment ";; Function-Specs main::impl_u::indexing::lemma_entry_base_from_index")
(declare-fun req%main!impl_u.indexing.lemma_entry_base_from_index. (Int Int Int) Bool)
(declare-const %%global_location_label%%77 Bool)
(assert (forall ((base~2@ Int) (idx~4@ Int) (entry_size~6@ Int)) (! (= (req%main!impl_u.indexing.lemma_entry_base_from_index. base~2@ idx~4@ entry_size~6@) (=> %%global_location_label%%77 (< 0 entry_size~6@))) :pattern ((req%main!impl_u.indexing.lemma_entry_base_from_index. base~2@ idx~4@ entry_size~6@)) :qid internal_req__main!impl_u.indexing.lemma_entry_base_from_index._definition :skolemid skolem_internal_req__main!impl_u.indexing.lemma_entry_base_from_index._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::indexing::lemma_entry_base_from_index")
(declare-fun ens%main!impl_u.indexing.lemma_entry_base_from_index. (Int Int Int) Bool)
(assert (forall ((base~2@ Int) (idx~4@ Int) (entry_size~6@ Int)) (! (= (ens%main!impl_u.indexing.lemma_entry_base_from_index. base~2@ idx~4@ entry_size~6@) (and (forall ((idx2~37$ Poly)) (! (=> (has_type idx2~37$ NAT) (=> (< idx~4@ (%I idx2~37$)) (< (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@)) (main!impl_u.indexing.entry_base_from_index.? (I base~2@) idx2~37$ (I entry_size~6@))))) :pattern ((main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@)) (main!impl_u.indexing.entry_base_from_index.? (I base~2@) idx2~37$ (I entry_size~6@))) :qid user_main__impl_u__indexing__lemma_entry_base_from_index_98 :skolemid skolem_user_main__impl_u__indexing__lemma_entry_base_from_index_98)) (forall ((idx2~103$ Poly)) (! (=> (has_type idx2~103$ NAT) (=> (< idx~4@ (%I idx2~103$)) (<= (main!impl_u.indexing.next_entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@)) (main!impl_u.indexing.entry_base_from_index.? (I base~2@) idx2~103$ (I entry_size~6@))))) :pattern ((main!impl_u.indexing.entry_base_from_index.? (I base~2@) idx2~103$ (I entry_size~6@))) :qid user_main__impl_u__indexing__lemma_entry_base_from_index_99 :skolemid skolem_user_main__impl_u__indexing__lemma_entry_base_from_index_99)) (= (main!impl_u.indexing.next_entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@)) (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I (nClip (+ idx~4@ 1))) (I entry_size~6@))) (= (main!impl_u.indexing.next_entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@)) (nClip (+ (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@)) entry_size~6@))) (= (main!impl_u.indexing.next_entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@)) (nClip (+ entry_size~6@ (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@))))) (forall ((n~229$ Poly)) (! (=> (has_type n~229$ NAT) (=> (and (and (< 0 (%I n~229$)) (main!definitions_t.aligned.? (I base~2@) n~229$)) (main!definitions_t.aligned.? (I entry_size~6@) n~229$)) (main!definitions_t.aligned.? (I (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@))) n~229$))) :pattern ((main!definitions_t.aligned.? (I (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@))) n~229$)) :qid user_main__impl_u__indexing__lemma_entry_base_from_index_100 :skolemid skolem_user_main__impl_u__indexing__lemma_entry_base_from_index_100)) (forall ((n~284$ Poly)) (! (=> (has_type n~284$ NAT) (=> (and (and (< 0 (%I n~284$)) (main!definitions_t.aligned.? (I base~2@) n~284$)) (main!definitions_t.aligned.? (I entry_size~6@) n~284$)) (main!definitions_t.aligned.? (I (main!impl_u.indexing.next_entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@))) n~284$))) :pattern ((main!definitions_t.aligned.? (I (main!impl_u.indexing.next_entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@))) n~284$)) :qid user_main__impl_u__indexing__lemma_entry_base_from_index_101 :skolemid skolem_user_main__impl_u__indexing__lemma_entry_base_from_index_101)) (=> (main!definitions_t.aligned.? (I base~2@) (I entry_size~6@)) (main!definitions_t.aligned.? (I (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@))) (I entry_size~6@))) (<= base~2@ (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~4@) (I entry_size~6@))))) :pattern ((ens%main!impl_u.indexing.lemma_entry_base_from_index. base~2@ idx~4@ entry_size~6@)) :qid internal_ens__main!impl_u.indexing.lemma_entry_base_from_index._definition :skolemid skolem_internal_ens__main!impl_u.indexing.lemma_entry_base_from_index._definition)))
(set-info :comment ";; Function-Specs main::impl_u::lib::mod_mult_zero_implies_mod_zero")
(declare-fun req%main!impl_u.lib.mod_mult_zero_implies_mod_zero. (Int Int Int) Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(assert (forall ((a~2@ Int) (b~4@ Int) (c~6@ Int)) (! (= (req%main!impl_u.lib.mod_mult_zero_implies_mod_zero. a~2@ b~4@ c~6@) (and (=> %%global_location_label%%78 (main!definitions_t.aligned.? (I a~2@) (I (nClip (Mul b~4@ c~6@))))) (=> %%global_location_label%%79 (> c~6@ 0)))) :pattern ((req%main!impl_u.lib.mod_mult_zero_implies_mod_zero. a~2@ b~4@ c~6@)) :qid internal_req__main!impl_u.lib.mod_mult_zero_implies_mod_zero._definition :skolemid skolem_internal_req__main!impl_u.lib.mod_mult_zero_implies_mod_zero._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::lib::mod_mult_zero_implies_mod_zero")
(declare-fun ens%main!impl_u.lib.mod_mult_zero_implies_mod_zero. (Int Int Int) Bool)
(assert (forall ((a~2@ Int) (b~4@ Int) (c~6@ Int)) (! (= (ens%main!impl_u.lib.mod_mult_zero_implies_mod_zero. a~2@ b~4@ c~6@) (main!definitions_t.aligned.? (I a~2@) (I b~4@))) :pattern ((ens%main!impl_u.lib.mod_mult_zero_implies_mod_zero. a~2@ b~4@ c~6@)) :qid internal_ens__main!impl_u.lib.mod_mult_zero_implies_mod_zero._definition :skolemid skolem_internal_ens__main!impl_u.lib.mod_mult_zero_implies_mod_zero._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_inv_implies_interp_inv")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_inv_implies_interp_inv. (main!impl_u.l1.Directory.) Bool)
(declare-const %%global_location_label%%80 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.)) (! (= (req%main!impl_u.l1.impl&%0.lemma_inv_implies_interp_inv. self~2@) (=> %%global_location_label%%80 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@)))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_inv_implies_interp_inv. self~2@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_inv_implies_interp_inv._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_inv_implies_interp_inv._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_inv_implies_interp_inv")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_inv_implies_interp_inv. (main!impl_u.l1.Directory.) Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_inv_implies_interp_inv. self~2@) (and (main!impl_u.l0.impl&%0.inv.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@)))) (= (main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@))))) (main!impl_u.l1.impl&%0.upper_vaddr.? (Poly%main!impl_u.l1.Directory. self~2@))) (= (main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@))))) (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_inv_implies_interp_inv. self~2@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_inv_implies_interp_inv._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_inv_implies_interp_inv._definition)))
(set-info :comment ";; Function-Specs main::impl_u::indexing::lemma_index_from_base_and_addr")
(declare-fun req%main!impl_u.indexing.lemma_index_from_base_and_addr. (Int Int Int Int) Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(assert (forall ((base~2@ Int) (addr~4@ Int) (entry_size~6@ Int) (num_entries~8@ Int)) (! (= (req%main!impl_u.indexing.lemma_index_from_base_and_addr. base~2@ addr~4@ entry_size~6@ num_entries~8@) (and (=> %%global_location_label%%81 (>= addr~4@ base~2@)) (=> %%global_location_label%%82 (< addr~4@ (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I num_entries~8@) (I entry_size~6@)))) (=> %%global_location_label%%83 (> entry_size~6@ 0)))) :pattern ((req%main!impl_u.indexing.lemma_index_from_base_and_addr. base~2@ addr~4@ entry_size~6@ num_entries~8@)) :qid internal_req__main!impl_u.indexing.lemma_index_from_base_and_addr._definition :skolemid skolem_internal_req__main!impl_u.indexing.lemma_index_from_base_and_addr._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::indexing::lemma_index_from_base_and_addr")
(declare-fun ens%main!impl_u.indexing.lemma_index_from_base_and_addr. (Int Int Int Int) Bool)
(assert (forall ((base~2@ Int) (addr~4@ Int) (entry_size~6@ Int) (num_entries~8@ Int)) (! (= (ens%main!impl_u.indexing.lemma_index_from_base_and_addr. base~2@ addr~4@ entry_size~6@ num_entries~8@) (let ((idx~63$ (main!impl_u.indexing.index_from_base_and_addr.? (I base~2@) (I addr~4@) (I entry_size~6@)))) (and (and (< idx~63$ num_entries~8@) (main!definitions_t.between.? (I addr~4@) (I (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~63$) (I entry_size~6@))) (I (main!impl_u.indexing.next_entry_base_from_index.? (I base~2@) (I idx~63$) (I entry_size~6@))))) (=> (and (main!definitions_t.aligned.? (I base~2@) (I entry_size~6@)) (main!definitions_t.aligned.? (I addr~4@) (I entry_size~6@))) (= addr~4@ (main!impl_u.indexing.entry_base_from_index.? (I base~2@) (I idx~63$) (I entry_size~6@))))))) :pattern ((ens%main!impl_u.indexing.lemma_index_from_base_and_addr. base~2@ addr~4@ entry_size~6@ num_entries~8@)) :qid internal_ens__main!impl_u.indexing.lemma_index_from_base_and_addr._definition :skolemid skolem_internal_ens__main!impl_u.indexing.lemma_index_from_base_and_addr._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::resolve")
(declare-fun req%main!impl_u.l1.impl&%0.resolve. (Poly Poly) Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((self~2@ Poly) (vaddr~4@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.resolve. self~2@ vaddr~4@) (and (=> %%global_location_label%%84 (main!impl_u.l1.impl&%0.inv.? self~2@)) (=> %%global_location_label%%85 (main!impl_u.l0.impl&%0.accepted_resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? self~2@)) vaddr~4@)) (=> %%global_location_label%%86 (and (main!impl_u.l1.impl&%0.inv.? self~2@) (main!impl_u.l0.impl&%0.accepted_resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? self~2@)) vaddr~4@))))) :pattern ((req%main!impl_u.l1.impl&%0.resolve. self~2@ vaddr~4@)) :qid internal_req__main!impl_u.l1.impl&__0.resolve._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.resolve._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::resolve")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.resolve.))
(declare-const fuel_nat%main!impl_u.l1.impl&%0.resolve. Fuel)
(assert (forall ((self~2@ Poly) (vaddr~4@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%resolve.? self~2@ vaddr~4@ fuel%@) (main!impl_u.l1.impl&%0.rec%resolve.? self~2@ vaddr~4@ zero)) :pattern ((main!impl_u.l1.impl&%0.rec%resolve.? self~2@ vaddr~4@ fuel%@)) :qid internal_main!impl_u.l1.impl&__0.resolve._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.resolve._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (vaddr~4@ Poly) (fuel%@ Fuel)) (! (=> (and (main!impl_u.l1.impl&%0.inv.? self~2@) (main!impl_u.l0.impl&%0.accepted_resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? self~2@)) vaddr~4@)) (= (main!impl_u.l1.impl&%0.rec%resolve.? self~2@ vaddr~4@ (succ fuel%@)) (let ((entry~74$ (main!impl_u.l1.impl&%0.index_for_vaddr.? self~2@ vaddr~4@))) (let ((tmp%%1$ (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) (I entry~74$))))) (ite ((_ is main!impl_u.l1.NodeEntry./Page) tmp%%1$) (let ((pte~93$ (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%1$))))) (let ((offset~109$ (- (%I vaddr~4@) (main!impl_u.l1.impl&%0.entry_base.? self~2@ (I entry~74$))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (I (main!impl_u.l1.impl&%0.entry_base.? self~2@ (I entry~74$))) (Poly%main!definitions_t.PageTableEntry. pte~93$)))))) (ite ((_ is main!impl_u.l1.NodeEntry./Directory) tmp%%1$) (let ((d~125$ (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%1$))))) (main!impl_u.l1.impl&%0.rec%resolve.? (Poly%main!impl_u.l1.Directory. d~125$) vaddr~4@ fuel%@)) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))))))) :pattern ((main!impl_u.l1.impl&%0.rec%resolve.? self~2@ vaddr~4@ (succ fuel%@))) :qid internal_main!impl_u.l1.impl&__0.resolve._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.resolve._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.resolve.) (forall ((self~2@ Poly) (vaddr~4@ Poly)) (! (=> (and (main!impl_u.l1.impl&%0.inv.? self~2@) (main!impl_u.l0.impl&%0.accepted_resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? self~2@)) vaddr~4@)) (= (main!impl_u.l1.impl&%0.resolve.? self~2@ vaddr~4@) (main!impl_u.l1.impl&%0.rec%resolve.? self~2@ vaddr~4@ (succ fuel_nat%main!impl_u.l1.impl&%0.resolve.)))) :pattern ((main!impl_u.l1.impl&%0.resolve.? self~2@ vaddr~4@)) :qid internal_main!impl_u.l1.impl&__0.resolve.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.resolve.?_definition))))
(assert (forall ((self~2@ Poly) (vaddr~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type vaddr~4@ NAT)) (has_type (Poly%core!result.Result. (main!impl_u.l1.impl&%0.resolve.? self~2@ vaddr~4@)) (TYPE%core!result.Result. (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) TYPE%tuple%0.))) :pattern ((main!impl_u.l1.impl&%0.resolve.? self~2@ vaddr~4@)) :qid internal_main!impl_u.l1.impl&__0.resolve.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.resolve.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_resolve_structure_assertions")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_resolve_structure_assertions. (main!impl_u.l1.Directory. Int Int) Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (vaddr~4@ Int) (idx~6@ Int)) (! (= (req%main!impl_u.l1.impl&%0.lemma_resolve_structure_assertions. self~2@ vaddr~4@ idx~6@) (and (=> %%global_location_label%%87 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@))) (=> %%global_location_label%%88 (main!impl_u.l0.impl&%0.accepted_resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@))) (I vaddr~4@))) (=> %%global_location_label%%89 (= idx~6@ (main!impl_u.l1.impl&%0.index_for_vaddr.? (Poly%main!impl_u.l1.Directory. self~2@) (I vaddr~4@)))))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_resolve_structure_assertions. self~2@ vaddr~4@ idx~6@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_resolve_structure_assertions._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_resolve_structure_assertions._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_resolve_structure_assertions")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_resolve_structure_assertions. (main!impl_u.l1.Directory. Int Int) Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (vaddr~4@ Int) (idx~6@ Int)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_resolve_structure_assertions. self~2@ vaddr~4@ idx~6@) (=> ((_ is main!impl_u.l1.NodeEntry./Directory) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))) (I idx~6@)))) (let ((d~87$ (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))) (I idx~6@)))))) (and (main!impl_u.l0.impl&%0.accepted_resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. d~87$))) (I vaddr~4@)) (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. d~87$)))))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_resolve_structure_assertions. self~2@ vaddr~4@ idx~6@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_resolve_structure_assertions._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_resolve_structure_assertions._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_resolve_refines")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_resolve_refines. (main!impl_u.l1.Directory. Int) Bool)
(declare-const %%global_location_label%%90 Bool)
(declare-const %%global_location_label%%91 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (vaddr~4@ Int)) (! (= (req%main!impl_u.l1.impl&%0.lemma_resolve_refines. self~2@ vaddr~4@) (and (=> %%global_location_label%%90 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@))) (=> %%global_location_label%%91 (main!impl_u.l0.impl&%0.accepted_resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@))) (I vaddr~4@))))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_resolve_refines. self~2@ vaddr~4@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_resolve_refines._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_resolve_refines._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_resolve_refines")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_resolve_refines. (main!impl_u.l1.Directory. Int) Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (vaddr~4@ Int)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_resolve_refines. self~2@ vaddr~4@) (= (main!impl_u.l0.impl&%0.resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@))) (I vaddr~4@)) (main!impl_u.l1.impl&%0.resolve.? (Poly%main!impl_u.l1.Directory. self~2@) (I vaddr~4@)))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_resolve_refines. self~2@ vaddr~4@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_resolve_refines._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_resolve_refines._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::update")
(declare-fun req%main!impl_u.l1.impl&%0.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%92 Bool)
(assert (forall ((self~2@ Poly) (n~4@ Poly) (e~6@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.update. self~2@ n~4@ e~6@) (=> %%global_location_label%%92 (< (%I n~4@) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))))))) :pattern ((req%main!impl_u.l1.impl&%0.update. self~2@ n~4@ e~6@)) :qid internal_req__main!impl_u.l1.impl&__0.update._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.update._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::update")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.update.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.update.) (forall ((self~2@ Poly) (n~4@ Poly) (e~6@ Poly)) (! (= (main!impl_u.l1.impl&%0.update.? self~2@ n~4@ e~6@) (main!impl_u.l1.Directory./Directory (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.update.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) n~4@ e~6@)) (%I (I (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@)))) (%I (I (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. self~2@)))) (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@)))))) :pattern ((main!impl_u.l1.impl&%0.update.? self~2@ n~4@ e~6@)) :qid internal_main!impl_u.l1.impl&__0.update.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.update.?_definition))))
(assert (forall ((self~2@ Poly) (n~4@ Poly) (e~6@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type n~4@ NAT) (has_type e~6@ TYPE%main!impl_u.l1.NodeEntry.)) (has_type (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.update.? self~2@ n~4@ e~6@)) TYPE%main!impl_u.l1.Directory.)) :pattern ((main!impl_u.l1.impl&%0.update.? self~2@ n~4@ e~6@)) :qid internal_main!impl_u.l1.impl&__0.update.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.update.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::candidate_mapping_in_bounds")
(declare-fun req%main!impl_u.l1.impl&%0.candidate_mapping_in_bounds. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%93 Bool)
(assert (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.candidate_mapping_in_bounds. self~2@ base~4@ pte~6@) (=> %%global_location_label%%93 (main!impl_u.l1.impl&%0.inv.? self~2@))) :pattern ((req%main!impl_u.l1.impl&%0.candidate_mapping_in_bounds. self~2@ base~4@ pte~6@)) :qid internal_req__main!impl_u.l1.impl&__0.candidate_mapping_in_bounds._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.candidate_mapping_in_bounds._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::candidate_mapping_in_bounds")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.candidate_mapping_in_bounds.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.candidate_mapping_in_bounds.) (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (= (main!impl_u.l1.impl&%0.candidate_mapping_in_bounds.? self~2@ base~4@ pte~6@) (and (<= (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. self~2@)) (%I base~4@)) (<= (nClip (+ (%I base~4@) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@))))))) (main!impl_u.l1.impl&%0.upper_vaddr.? self~2@)))) :pattern ((main!impl_u.l1.impl&%0.candidate_mapping_in_bounds.? self~2@ base~4@ pte~6@)) :qid internal_main!impl_u.l1.impl&__0.candidate_mapping_in_bounds.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.candidate_mapping_in_bounds.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::accepted_mapping")
(declare-fun req%main!impl_u.l1.impl&%0.accepted_mapping. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%94 Bool)
(assert (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.accepted_mapping. self~2@ base~4@ pte~6@) (=> %%global_location_label%%94 (main!impl_u.l1.impl&%0.inv.? self~2@))) :pattern ((req%main!impl_u.l1.impl&%0.accepted_mapping. self~2@ base~4@ pte~6@)) :qid internal_req__main!impl_u.l1.impl&__0.accepted_mapping._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.accepted_mapping._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::accepted_mapping")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.accepted_mapping.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.accepted_mapping.) (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (= (main!impl_u.l1.impl&%0.accepted_mapping.? self~2@ base~4@ pte~6@) (and (and (and (main!definitions_t.aligned.? base~4@ (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@))))))) (main!definitions_t.aligned.? (I (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@)))))) (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@)))))))) (main!impl_u.l1.impl&%0.candidate_mapping_in_bounds.? self~2@ base~4@ pte~6@)) (main!definitions_t.impl&%7.contains_entry_size_at_index_atleast.? (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))) (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@)))))) (I (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@)))))) :pattern ((main!impl_u.l1.impl&%0.accepted_mapping.? self~2@ base~4@ pte~6@)) :qid internal_main!impl_u.l1.impl&__0.accepted_mapping.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.accepted_mapping.?_definition))))
(set-info :comment ";; Function-Axioms main::definitions_t::new_seq")
(assert (fuel_bool_default fuel%main!definitions_t.new_seq.))
(declare-const fuel_nat%main!definitions_t.new_seq. Fuel)
(assert (forall ((T& Type) (T&. Type) (i~2@ Poly) (e~4@ Poly) (fuel%@ Fuel)) (! (= (main!definitions_t.rec%new_seq.? T& T&. i~2@ e~4@ fuel%@) (main!definitions_t.rec%new_seq.? T& T&. i~2@ e~4@ zero)) :pattern ((main!definitions_t.rec%new_seq.? T& T&. i~2@ e~4@ fuel%@)) :qid internal_main!definitions_t.new_seq._fuel_to_zero_definition :skolemid skolem_internal_main!definitions_t.new_seq._fuel_to_zero_definition)))
(assert (forall ((T& Type) (T&. Type) (i~2@ Poly) (e~4@ Poly) (fuel%@ Fuel)) (! (= (main!definitions_t.rec%new_seq.? T& T&. i~2@ e~4@ (succ fuel%@)) (ite (= (%I i~2@) 0) (vstd!seq.Seq.empty.? T& T&.) (vstd!seq.Seq.add.? T& T&. (main!definitions_t.rec%new_seq.? T& T&. (I (nClip (- (%I i~2@) 1))) e~4@ fuel%@) (vstd!seq.Seq.push.? T& T&. (vstd!seq.Seq.empty.? T& T&.) e~4@)))) :pattern ((main!definitions_t.rec%new_seq.? T& T&. i~2@ e~4@ (succ fuel%@))) :qid internal_main!definitions_t.new_seq._fuel_to_body_definition :skolemid skolem_internal_main!definitions_t.new_seq._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!definitions_t.new_seq.) (forall ((T& Type) (T&. Type) (i~2@ Poly) (e~4@ Poly)) (! (= (main!definitions_t.new_seq.? T& T&. i~2@ e~4@) (main!definitions_t.rec%new_seq.? T& T&. i~2@ e~4@ (succ fuel_nat%main!definitions_t.new_seq.))) :pattern ((main!definitions_t.new_seq.? T& T&. i~2@ e~4@)) :qid internal_main!definitions_t.new_seq.?_definition :skolemid skolem_internal_main!definitions_t.new_seq.?_definition))))
(assert (forall ((T& Type) (T&. Type) (i~2@ Poly) (e~4@ Poly)) (! (=> (and (has_type i~2@ NAT) (has_type e~4@ T&)) (has_type (main!definitions_t.new_seq.? T& T&. i~2@ e~4@) (TYPE%vstd!seq.Seq. T&))) :pattern ((main!definitions_t.new_seq.? T& T&. i~2@ e~4@)) :qid internal_main!definitions_t.new_seq.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.new_seq.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::new_empty_dir")
(declare-fun req%main!impl_u.l1.impl&%0.new_empty_dir. (Poly Poly) Bool)
(declare-const %%global_location_label%%95 Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(assert (forall ((self~2@ Poly) (entry~4@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.new_empty_dir. self~2@ entry~4@) (and (=> %%global_location_label%%95 (main!impl_u.l1.impl&%0.inv.? self~2@)) (=> %%global_location_label%%96 (< (%I entry~4@) (main!impl_u.l1.impl&%0.num_entries.? self~2@))) (=> %%global_location_label%%97 (< (nClip (+ (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@)) 1)) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))))))))))) :pattern ((req%main!impl_u.l1.impl&%0.new_empty_dir. self~2@ entry~4@)) :qid internal_req__main!impl_u.l1.impl&__0.new_empty_dir._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.new_empty_dir._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::new_empty_dir")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.new_empty_dir.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.new_empty_dir.) (forall ((self~2@ Poly) (entry~4@ Poly)) (! (= (main!impl_u.l1.impl&%0.new_empty_dir.? self~2@ entry~4@) (main!impl_u.l1.Directory./Directory (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!definitions_t.new_seq.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (I (main!definitions_t.impl&%7.num_entries.? (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@))) (I (nClip (+ (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@)) 1))))) (Poly%main!impl_u.l1.NodeEntry. main!impl_u.l1.NodeEntry./Empty))) (%I (I (nClip (+ (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. self~2@)) 1)))) (%I (I (main!impl_u.l1.impl&%0.entry_base.? self~2@ entry~4@))) (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. self~2@)))))) :pattern ((main!impl_u.l1.impl&%0.new_empty_dir.? self~2@ entry~4@)) :qid internal_main!impl_u.l1.impl&__0.new_empty_dir.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.new_empty_dir.?_definition))))
(assert (forall ((self~2@ Poly) (entry~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type entry~4@ NAT)) (has_type (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.new_empty_dir.? self~2@ entry~4@)) TYPE%main!impl_u.l1.Directory.)) :pattern ((main!impl_u.l1.impl&%0.new_empty_dir.? self~2@ entry~4@)) :qid internal_main!impl_u.l1.impl&__0.new_empty_dir.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.new_empty_dir.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::lemma_new_seq")
(declare-fun ens%main!definitions_t.lemma_new_seq. (Type Type Int Poly) Bool)
(assert (forall ((T& Type) (T&. Type) (i~2@ Int) (e~4@ Poly)) (! (= (ens%main!definitions_t.lemma_new_seq. T& T&. i~2@ e~4@) (and (= (vstd!seq.Seq.len.? T& T&. (main!definitions_t.new_seq.? T& T&. (I i~2@) e~4@)) i~2@) (forall ((j~34$ Poly)) (! (=> (has_type j~34$ NAT) (=> (< (%I j~34$) i~2@) (= (vstd!seq.Seq.index.? T& T&. (main!definitions_t.new_seq.? T& T&. (I i~2@) e~4@) j~34$) e~4@))) :pattern ((vstd!seq.Seq.index.? T& T&. (main!definitions_t.new_seq.? T& T&. (I i~2@) e~4@) j~34$)) :qid user_main__definitions_t__lemma_new_seq_102 :skolemid skolem_user_main__definitions_t__lemma_new_seq_102)))) :pattern ((ens%main!definitions_t.lemma_new_seq. T& T&. i~2@ e~4@)) :qid internal_ens__main!definitions_t.lemma_new_seq._definition :skolemid skolem_internal_ens__main!definitions_t.lemma_new_seq._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_new_empty_dir")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_new_empty_dir. (main!impl_u.l1.Directory. Int) Bool)
(declare-const %%global_location_label%%98 Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (entry~4@ Int)) (! (= (req%main!impl_u.l1.impl&%0.lemma_new_empty_dir. self~2@ entry~4@) (and (=> %%global_location_label%%98 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@))) (=> %%global_location_label%%99 (< entry~4@ (main!impl_u.l1.impl&%0.num_entries.? (Poly%main!impl_u.l1.Directory. self~2@)))) (=> %%global_location_label%%100 (< (nClip (+ (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@))) 1)) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))))))))))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_new_empty_dir. self~2@ entry~4@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_new_empty_dir._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_new_empty_dir._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_new_empty_dir")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_new_empty_dir. (main!impl_u.l1.Directory. Int) Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (entry~4@ Int)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_new_empty_dir. self~2@ entry~4@) (and (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.new_empty_dir.? (Poly%main!impl_u.l1.Directory. self~2@) (I entry~4@)))) (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.new_empty_dir.? (Poly%main!impl_u.l1.Directory. self~2@) (I entry~4@))))))) (main!definitions_t.impl&%7.num_entries.? (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))) (I (nClip (+ (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@))) 1))))) (forall ((j~102$ Poly)) (! (=> (has_type j~102$ NAT) (=> (< (%I j~102$) (main!impl_u.l1.impl&%0.num_entries.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.new_empty_dir.? (Poly%main!impl_u.l1.Directory. self~2@) (I entry~4@))))) (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.new_empty_dir.? (Poly%main!impl_u.l1.Directory. self~2@) (I entry~4@)))))) j~102$)) main!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.new_empty_dir.? (Poly%main!impl_u.l1.Directory. self~2@) (I entry~4@)))))) j~102$)) :qid user_main__impl_u__l1__Directory__lemma_new_empty_dir_103 :skolemid skolem_user_main__impl_u__l1__Directory__lemma_new_empty_dir_103)))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_new_empty_dir. self~2@ entry~4@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_new_empty_dir._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_new_empty_dir._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::map_frame")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.map_frame.))
(declare-const fuel_nat%main!impl_u.l1.impl&%0.map_frame. Fuel)
(assert (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%map_frame.? self~2@ base~4@ pte~6@ fuel%@) (main!impl_u.l1.impl&%0.rec%map_frame.? self~2@ base~4@ pte~6@ zero)) :pattern ((main!impl_u.l1.impl&%0.rec%map_frame.? self~2@ base~4@ pte~6@ fuel%@)) :qid internal_main!impl_u.l1.impl&__0.map_frame._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.map_frame._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%map_frame.? self~2@ base~4@ pte~6@ (succ fuel%@)) (ite (and (main!impl_u.l1.impl&%0.inv.? self~2@) (main!impl_u.l1.impl&%0.accepted_mapping.? self~2@ base~4@ pte~6@)) (let ((entry~55$ (main!impl_u.l1.impl&%0.index_for_vaddr.? self~2@ base~4@))) (let ((tmp%%2$ (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) (I entry~55$))))) (ite ((_ is main!impl_u.l1.NodeEntry./Page) tmp%%2$) (let ((p~74$ (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%2$))))) (core!result.Result./Err self~2@)) (ite ((_ is main!impl_u.l1.NodeEntry./Directory) tmp%%2$) (let ((d~86$ (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%2$))))) (ite (= (main!impl_u.l1.impl&%0.entry_size.? self~2@) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@)))))) (core!result.Result./Err self~2@) (let ((tmp%%1$ (main!impl_u.l1.impl&%0.rec%map_frame.? (Poly%main!impl_u.l1.Directory. d~86$) base~4@ pte~6@ fuel%@))) (ite ((_ is core!result.Result./Ok) tmp%%1$) (let ((d~123$ (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%1$)))))) (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.update.? self~2@ (I entry~55$) (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry./Directory (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. d~123$)))))))) (let ((d~142$ (%Poly%main!impl_u.l1.Directory. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%1$)))))) (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.update.? self~2@ (I entry~55$) (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry./Directory (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. d~142$)))))))))))) (ite (= (main!impl_u.l1.impl&%0.entry_size.? self~2@) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@)))))) (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.update.? self~2@ (I entry~55$) (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry./Page (%Poly%main!definitions_t.PageTableEntry. pte~6@)))))) (let ((new_dir~208$ (main!impl_u.l1.impl&%0.new_empty_dir.? self~2@ (I entry~55$)))) (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.update.? self~2@ (I entry~55$) (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry./Directory (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.rec%map_frame.? (Poly%main!impl_u.l1.Directory. new_dir~208$) base~4@ pte~6@ fuel%@)))))))))))))))) (%Poly%core!result.Result. (vstd!pervasive.arbitrary.? (TYPE%core!result.Result. TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l1.Directory.) (TYPE%core!result.Result. TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l1.Directory.))))) :pattern ((main!impl_u.l1.impl&%0.rec%map_frame.? self~2@ base~4@ pte~6@ (succ fuel%@))) :qid internal_main!impl_u.l1.impl&__0.map_frame._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.map_frame._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.map_frame.) (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (= (main!impl_u.l1.impl&%0.map_frame.? self~2@ base~4@ pte~6@) (main!impl_u.l1.impl&%0.rec%map_frame.? self~2@ base~4@ pte~6@ (succ fuel_nat%main!impl_u.l1.impl&%0.map_frame.))) :pattern ((main!impl_u.l1.impl&%0.map_frame.? self~2@ base~4@ pte~6@)) :qid internal_main!impl_u.l1.impl&__0.map_frame.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.map_frame.?_definition))))
(assert (forall ((self~2@ Poly) (base~4@ Poly) (pte~6@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type base~4@ NAT) (has_type pte~6@ TYPE%main!definitions_t.PageTableEntry.)) (has_type (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? self~2@ base~4@ pte~6@)) (TYPE%core!result.Result. TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l1.Directory.))) :pattern ((main!impl_u.l1.impl&%0.map_frame.? self~2@ base~4@ pte~6@)) :qid internal_main!impl_u.l1.impl&__0.map_frame.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.map_frame.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_map_frame_preserves_inv")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_map_frame_preserves_inv. (main!impl_u.l1.Directory. Int main!definitions_t.PageTableEntry.) Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(declare-const %%global_location_label%%103 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int) (pte~6@ main!definitions_t.PageTableEntry.)) (! (= (req%main!impl_u.l1.impl&%0.lemma_map_frame_preserves_inv. self~2@ base~4@ pte~6@) (and (=> %%global_location_label%%101 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@))) (=> %%global_location_label%%102 (main!impl_u.l1.impl&%0.accepted_mapping.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))) (=> %%global_location_label%%103 (%B (B ((_ is core!result.Result./Ok) (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@)))))))))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_map_frame_preserves_inv. self~2@ base~4@ pte~6@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_map_frame_preserves_inv._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_map_frame_preserves_inv._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_map_frame_preserves_inv")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_map_frame_preserves_inv. (main!impl_u.l1.Directory. Int main!definitions_t.PageTableEntry.) Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int) (pte~6@ main!definitions_t.PageTableEntry.)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_map_frame_preserves_inv. self~2@ base~4@ pte~6@) (and (= (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))))))) (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))) (= (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))))))) (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))) (= (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))))))) (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))) (not (main!impl_u.l1.impl&%0.empty.? (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))))))) (main!impl_u.l1.impl&%0.inv.? (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@)))))) (not (exists ((b~132$ Poly)) (! (and (has_type b~132$ NAT) (and (vstd!set.impl&%0.contains.? NAT NAT (vstd!map.impl&%0.dom.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@))))))) b~132$) (main!definitions_t.between.? (I base~4@) b~132$ (I (nClip (+ (%I b~132$) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@)))))) b~132$)))))))))))) :pattern ((vstd!map.impl&%0.index.? NAT NAT TYPE%main!definitions_t.PageTableEntry. TYPE%main!definitions_t.PageTableEntry. (Poly%vstd!map.Map<nat./main!definitions_t.PageTableEntry.>. (main!impl_u.l0.PageTableContents./PageTableContents/map (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@)))))) b~132$)) :qid user_main__impl_u__l1__Directory__lemma_map_frame_preserves_inv_104 :skolemid skolem_user_main__impl_u__l1__Directory__lemma_map_frame_preserves_inv_104))))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_map_frame_preserves_inv. self~2@ base~4@ pte~6@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_map_frame_preserves_inv._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_map_frame_preserves_inv._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::result_map")
(assert (fuel_bool_default fuel%main!impl_u.l1.result_map.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.result_map.) (forall ((A& Type) (A&. Type) (B& Type) (B&. Type) (res~2@ Poly) (f~4@ Poly)) (! (= (main!impl_u.l1.result_map.? A& A&. B& B&. res~2@ f~4@) (ite ((_ is core!result.Result./Ok) (%Poly%core!result.Result. res~2@)) (let ((a~9$ (core!result.Result./Ok/_0 (%Poly%core!result.Result. res~2@)))) (core!result.Result./Ok (%%apply%%0 (%Poly%fun%1. f~4@) a~9$))) (let ((a~21$ (core!result.Result./Err/_0 (%Poly%core!result.Result. res~2@)))) (core!result.Result./Err (%%apply%%0 (%Poly%fun%1. f~4@) a~21$))))) :pattern ((main!impl_u.l1.result_map.? A& A&. B& B&. res~2@ f~4@)) :qid internal_main!impl_u.l1.result_map.?_definition :skolemid skolem_internal_main!impl_u.l1.result_map.?_definition))))
(assert (forall ((A& Type) (A&. Type) (B& Type) (B&. Type) (res~2@ Poly) (f~4@ Poly)) (! (=> (and (has_type res~2@ (TYPE%core!result.Result. A& A&)) (has_type f~4@ (TYPE%fun%1. A& B&))) (has_type (Poly%core!result.Result. (main!impl_u.l1.result_map.? A& A&. B& B&. res~2@ f~4@)) (TYPE%core!result.Result. B& B&))) :pattern ((main!impl_u.l1.result_map.? A& A&. B& B&. res~2@ f~4@)) :qid internal_main!impl_u.l1.result_map.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.result_map.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_map_frame_refines_map_frame")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_map_frame_refines_map_frame. (main!impl_u.l1.Directory. Int main!definitions_t.PageTableEntry.) Bool)
(declare-const %%global_location_label%%104 Bool)
(declare-const %%global_location_label%%105 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int) (pte~6@ main!definitions_t.PageTableEntry.)) (! (= (req%main!impl_u.l1.impl&%0.lemma_map_frame_refines_map_frame. self~2@ base~4@ pte~6@) (and (=> %%global_location_label%%104 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@))) (=> %%global_location_label%%105 (main!impl_u.l1.impl&%0.accepted_mapping.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_map_frame_refines_map_frame. self~2@ base~4@ pte~6@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_map_frame_refines_map_frame._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_map_frame_refines_map_frame._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_map_frame_refines_map_frame")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_map_frame_refines_map_frame. (main!impl_u.l1.Directory. Int main!definitions_t.PageTableEntry.) Bool)
(declare-fun %%lambda%%4 () %%Function%%)
(assert (forall ((d~87$ Poly)) (! (= (%%apply%%0 %%lambda%%4 d~87$) (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? d~87$))) :pattern ((%%apply%%0 %%lambda%%4 d~87$)))))
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int) (pte~6@ main!definitions_t.PageTableEntry.)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_map_frame_refines_map_frame. self~2@ base~4@ pte~6@) (and (=> (%B (B ((_ is core!result.Result./Err) (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))))))) (= (%Poly%main!impl_u.l1.Directory. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@)))))) self~2@)) (= (main!impl_u.l1.result_map.? TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l0.PageTableContents. TYPE%main!impl_u.l0.PageTableContents. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))) (Poly%fun%1. (mk_fun %%lambda%%4))) (main!impl_u.l0.impl&%0.map_frame.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@))) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_map_frame_refines_map_frame. self~2@ base~4@ pte~6@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_map_frame_refines_map_frame._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_map_frame_refines_map_frame._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_map_frame_structure_assertions")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_map_frame_structure_assertions. (main!impl_u.l1.Directory. Int main!definitions_t.PageTableEntry. Int) Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(declare-const %%global_location_label%%108 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int) (pte~6@ main!definitions_t.PageTableEntry.) (idx~8@ Int)) (! (= (req%main!impl_u.l1.impl&%0.lemma_map_frame_structure_assertions. self~2@ base~4@ pte~6@ idx~8@) (and (=> %%global_location_label%%106 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@))) (=> %%global_location_label%%107 (main!impl_u.l1.impl&%0.accepted_mapping.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))) (=> %%global_location_label%%108 (= idx~8@ (main!impl_u.l1.impl&%0.index_for_vaddr.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@)))))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_map_frame_structure_assertions. self~2@ base~4@ pte~6@ idx~8@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_map_frame_structure_assertions._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_map_frame_structure_assertions._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_map_frame_structure_assertions")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_map_frame_structure_assertions. (main!impl_u.l1.Directory. Int main!definitions_t.PageTableEntry. Int) Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int) (pte~6@ main!definitions_t.PageTableEntry.) (idx~8@ Int)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_map_frame_structure_assertions. self~2@ base~4@ pte~6@ idx~8@) (let ((tmp%%1$ (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))) (I idx~8@))))) (ite ((_ is main!impl_u.l1.NodeEntry./Page) tmp%%1$) (let ((p~65$ (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%1$))))) true) (ite ((_ is main!impl_u.l1.NodeEntry./Directory) tmp%%1$) (let ((d~71$ (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%1$))))) (and (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. d~71$)) (=> (not (= (main!impl_u.l1.impl&%0.entry_size.? (Poly%main!impl_u.l1.Directory. self~2@)) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (Poly%main!definitions_t.PageTableEntry. pte~6@)))))))) (main!impl_u.l1.impl&%0.accepted_mapping.? (Poly%main!impl_u.l1.Directory. d~71$) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))))) (=> (not (= (main!impl_u.l1.impl&%0.entry_size.? (Poly%main!impl_u.l1.Directory. self~2@)) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (Poly%main!definitions_t.PageTableEntry. pte~6@)))))))) (and (and (and (< (nClip (+ (main!impl_u.l1.Directory./Directory/layer (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@))) 1)) (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!impl_u.l1.Directory./Directory/arch (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@))))))))) (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.new_empty_dir.? (Poly%main!impl_u.l1.Directory. self~2@) (I idx~8@))))) (main!impl_u.l1.impl&%0.accepted_mapping.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.new_empty_dir.? (Poly%main!impl_u.l1.Directory. self~2@) (I idx~8@))) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))) (%B (B ((_ is core!result.Result./Ok) (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.new_empty_dir.? (Poly%main!impl_u.l1.Directory. self~2@) (I idx~8@))) (I base~4@) (Poly%main!definitions_t.PageTableEntry. pte~6@))))))))))))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_map_frame_structure_assertions. self~2@ base~4@ pte~6@ idx~8@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_map_frame_structure_assertions._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_map_frame_structure_assertions._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::accepted_unmap")
(declare-fun req%main!impl_u.l1.impl&%0.accepted_unmap. (Poly Poly) Bool)
(declare-const %%global_location_label%%109 Bool)
(assert (forall ((self~2@ Poly) (base~4@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.accepted_unmap. self~2@ base~4@) (=> %%global_location_label%%109 (main!impl_u.l1.impl&%0.well_formed.? self~2@))) :pattern ((req%main!impl_u.l1.impl&%0.accepted_unmap. self~2@ base~4@)) :qid internal_req__main!impl_u.l1.impl&__0.accepted_unmap._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.accepted_unmap._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::accepted_unmap")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.accepted_unmap.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.accepted_unmap.) (forall ((self~2@ Poly) (base~4@ Poly)) (! (= (main!impl_u.l1.impl&%0.accepted_unmap.? self~2@ base~4@) (main!impl_u.l0.impl&%0.accepted_unmap.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? self~2@)) base~4@)) :pattern ((main!impl_u.l1.impl&%0.accepted_unmap.? self~2@ base~4@)) :qid internal_main!impl_u.l1.impl&__0.accepted_unmap.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.accepted_unmap.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::unmap")
(declare-fun req%main!impl_u.l1.impl&%0.unmap. (Poly Poly) Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(assert (forall ((self~2@ Poly) (base~4@ Poly)) (! (= (req%main!impl_u.l1.impl&%0.unmap. self~2@ base~4@) (and (=> %%global_location_label%%110 (main!impl_u.l1.impl&%0.inv.? self~2@)) (=> %%global_location_label%%111 (main!impl_u.l1.impl&%0.accepted_unmap.? self~2@ base~4@)))) :pattern ((req%main!impl_u.l1.impl&%0.unmap. self~2@ base~4@)) :qid internal_req__main!impl_u.l1.impl&__0.unmap._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.unmap._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::unmap")
(assert (fuel_bool_default fuel%main!impl_u.l1.impl&%0.unmap.))
(declare-const fuel_nat%main!impl_u.l1.impl&%0.unmap. Fuel)
(assert (forall ((self~2@ Poly) (base~4@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%unmap.? self~2@ base~4@ fuel%@) (main!impl_u.l1.impl&%0.rec%unmap.? self~2@ base~4@ zero)) :pattern ((main!impl_u.l1.impl&%0.rec%unmap.? self~2@ base~4@ fuel%@)) :qid internal_main!impl_u.l1.impl&__0.unmap._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.unmap._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (base~4@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l1.impl&%0.rec%unmap.? self~2@ base~4@ (succ fuel%@)) (ite (and (main!impl_u.l1.impl&%0.inv.? self~2@) (main!impl_u.l1.impl&%0.accepted_unmap.? self~2@ base~4@)) (let ((entry~68$ (main!impl_u.l1.impl&%0.index_for_vaddr.? self~2@ base~4@))) (let ((tmp%%2$ (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. self~2@))) (I entry~68$))))) (ite ((_ is main!impl_u.l1.NodeEntry./Page) tmp%%2$) (let ((p~87$ (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%2$))))) (ite (main!definitions_t.aligned.? base~4@ (I (main!impl_u.l1.impl&%0.entry_size.? self~2@))) (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.update.? self~2@ (I entry~68$) (Poly%main!impl_u.l1.NodeEntry. main!impl_u.l1.NodeEntry./Empty)))) (core!result.Result./Err self~2@))) (ite ((_ is main!impl_u.l1.NodeEntry./Directory) tmp%%2$) (let ((d~127$ (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%2$))))) (let ((tmp%%1$ (main!impl_u.l1.impl&%0.rec%unmap.? (Poly%main!impl_u.l1.Directory. d~127$) base~4@ fuel%@))) (ite ((_ is core!result.Result./Ok) tmp%%1$) (let ((new_d~139$ (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%1$)))))) (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.update.? self~2@ (I entry~68$) (Poly%main!impl_u.l1.NodeEntry. (ite (main!impl_u.l1.impl&%0.empty.? (Poly%main!impl_u.l1.Directory. new_d~139$)) main!impl_u.l1.NodeEntry./Empty (main!impl_u.l1.NodeEntry./Directory (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. new_d~139$))))))))) (let ((new_d~172$ (%Poly%main!impl_u.l1.Directory. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%1$)))))) (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l1.impl&%0.update.? self~2@ (I entry~68$) (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l1.NodeEntry./Directory (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. new_d~172$))))))))))) (core!result.Result./Err self~2@))))) (%Poly%core!result.Result. (vstd!pervasive.arbitrary.? (TYPE%core!result.Result. TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l1.Directory.) (TYPE%core!result.Result. TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l1.Directory.))))) :pattern ((main!impl_u.l1.impl&%0.rec%unmap.? self~2@ base~4@ (succ fuel%@))) :qid internal_main!impl_u.l1.impl&__0.unmap._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.unmap._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l1.impl&%0.unmap.) (forall ((self~2@ Poly) (base~4@ Poly)) (! (= (main!impl_u.l1.impl&%0.unmap.? self~2@ base~4@) (main!impl_u.l1.impl&%0.rec%unmap.? self~2@ base~4@ (succ fuel_nat%main!impl_u.l1.impl&%0.unmap.))) :pattern ((main!impl_u.l1.impl&%0.unmap.? self~2@ base~4@)) :qid internal_main!impl_u.l1.impl&__0.unmap.?_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.unmap.?_definition))))
(assert (forall ((self~2@ Poly) (base~4@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l1.Directory.) (has_type base~4@ NAT)) (has_type (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? self~2@ base~4@)) (TYPE%core!result.Result. TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l1.Directory.))) :pattern ((main!impl_u.l1.impl&%0.unmap.? self~2@ base~4@)) :qid internal_main!impl_u.l1.impl&__0.unmap.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.impl&__0.unmap.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_unmap_preserves_inv")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_unmap_preserves_inv. (main!impl_u.l1.Directory. Int) Bool)
(declare-const %%global_location_label%%112 Bool)
(declare-const %%global_location_label%%113 Bool)
(declare-const %%global_location_label%%114 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int)) (! (= (req%main!impl_u.l1.impl&%0.lemma_unmap_preserves_inv. self~2@ base~4@) (and (=> %%global_location_label%%112 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@))) (=> %%global_location_label%%113 (main!impl_u.l1.impl&%0.accepted_unmap.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@))) (=> %%global_location_label%%114 (%B (B ((_ is core!result.Result./Ok) (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@)))))))))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_unmap_preserves_inv. self~2@ base~4@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_unmap_preserves_inv._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_unmap_preserves_inv._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_unmap_preserves_inv")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_unmap_preserves_inv. (main!impl_u.l1.Directory. Int) Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_unmap_preserves_inv. self~2@ base~4@) (main!impl_u.l1.impl&%0.inv.? (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@))))))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_unmap_preserves_inv. self~2@ base~4@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_unmap_preserves_inv._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_unmap_preserves_inv._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_unmap_refines_unmap")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_unmap_refines_unmap. (main!impl_u.l1.Directory. Int) Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int)) (! (= (req%main!impl_u.l1.impl&%0.lemma_unmap_refines_unmap. self~2@ base~4@) (and (=> %%global_location_label%%115 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@))) (=> %%global_location_label%%116 (main!impl_u.l1.impl&%0.accepted_unmap.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@))))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_unmap_refines_unmap. self~2@ base~4@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_unmap_refines_unmap._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_unmap_refines_unmap._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_unmap_refines_unmap")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_unmap_refines_unmap. (main!impl_u.l1.Directory. Int) Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_unmap_refines_unmap. self~2@ base~4@) (and (=> (%B (B ((_ is core!result.Result./Err) (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@))))))) (= (%Poly%main!impl_u.l1.Directory. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@)))))) self~2@)) (= (main!impl_u.l1.result_map.? TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l1.Directory. TYPE%main!impl_u.l0.PageTableContents. TYPE%main!impl_u.l0.PageTableContents. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@))) (Poly%fun%1. (mk_fun %%lambda%%4))) (main!impl_u.l0.impl&%0.unmap.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. self~2@))) (I base~4@))))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_unmap_refines_unmap. self~2@ base~4@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_unmap_refines_unmap._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_unmap_refines_unmap._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l1::Directory::lemma_unmap_structure_assertions")
(declare-fun req%main!impl_u.l1.impl&%0.lemma_unmap_structure_assertions. (main!impl_u.l1.Directory. Int Int) Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(declare-const %%global_location_label%%119 Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int) (idx~6@ Int)) (! (= (req%main!impl_u.l1.impl&%0.lemma_unmap_structure_assertions. self~2@ base~4@ idx~6@) (and (=> %%global_location_label%%117 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. self~2@))) (=> %%global_location_label%%118 (main!impl_u.l1.impl&%0.accepted_unmap.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@))) (=> %%global_location_label%%119 (= idx~6@ (main!impl_u.l1.impl&%0.index_for_vaddr.? (Poly%main!impl_u.l1.Directory. self~2@) (I base~4@)))))) :pattern ((req%main!impl_u.l1.impl&%0.lemma_unmap_structure_assertions. self~2@ base~4@ idx~6@)) :qid internal_req__main!impl_u.l1.impl&__0.lemma_unmap_structure_assertions._definition :skolemid skolem_internal_req__main!impl_u.l1.impl&__0.lemma_unmap_structure_assertions._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::Directory::lemma_unmap_structure_assertions")
(declare-fun ens%main!impl_u.l1.impl&%0.lemma_unmap_structure_assertions. (main!impl_u.l1.Directory. Int Int) Bool)
(assert (forall ((self~2@ main!impl_u.l1.Directory.) (base~4@ Int) (idx~6@ Int)) (! (= (ens%main!impl_u.l1.impl&%0.lemma_unmap_structure_assertions. self~2@ base~4@ idx~6@) (let ((tmp%%1$ (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@)))) (I idx~6@))))) (ite ((_ is main!impl_u.l1.NodeEntry./Page) tmp%%1$) (let ((p~61$ (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%1$))))) (=> (main!definitions_t.aligned.? (I base~4@) (I (main!impl_u.l1.impl&%0.entry_size.? (Poly%main!impl_u.l1.Directory. self~2@)))) (= base~4@ (nClip (+ (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. self~2@))) (nClip (Mul idx~6@ (main!impl_u.l1.impl&%0.entry_size.? (Poly%main!impl_u.l1.Directory. self~2@))))))))) (=> ((_ is main!impl_u.l1.NodeEntry./Directory) tmp%%1$) (let ((d~104$ (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (Poly%main!impl_u.l1.NodeEntry. tmp%%1$))))) (and (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. d~104$)) (main!impl_u.l1.impl&%0.accepted_unmap.? (Poly%main!impl_u.l1.Directory. d~104$) (I base~4@)))))))) :pattern ((ens%main!impl_u.l1.impl&%0.lemma_unmap_structure_assertions. self~2@ base~4@ idx~6@)) :qid internal_ens__main!impl_u.l1.impl&__0.lemma_unmap_structure_assertions._definition :skolemid skolem_internal_ens__main!impl_u.l1.impl&__0.lemma_unmap_structure_assertions._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l1::result_map_ok")
(assert (fuel_bool_default fuel%main!impl_u.l1.result_map_ok.))
(assert (=> (fuel_bool fuel%main!impl_u.l1.result_map_ok.) (forall ((A& Type) (A&. Type) (B& Type) (B&. Type) (C& Type) (C&. Type) (res~2@ Poly) (f~4@ Poly)) (! (= (main!impl_u.l1.result_map_ok.? A& A&. B& B&. C& C&. res~2@ f~4@) (ite ((_ is core!result.Result./Ok) (%Poly%core!result.Result. res~2@)) (let ((a~9$ (core!result.Result./Ok/_0 (%Poly%core!result.Result. res~2@)))) (core!result.Result./Ok (%%apply%%0 (%Poly%fun%1. f~4@) a~9$))) (let ((b~21$ (core!result.Result./Err/_0 (%Poly%core!result.Result. res~2@)))) (core!result.Result./Err b~21$)))) :pattern ((main!impl_u.l1.result_map_ok.? A& A&. B& B&. C& C&. res~2@ f~4@)) :qid internal_main!impl_u.l1.result_map_ok.?_definition :skolemid skolem_internal_main!impl_u.l1.result_map_ok.?_definition))))
(assert (forall ((A& Type) (A&. Type) (B& Type) (B&. Type) (C& Type) (C&. Type) (res~2@ Poly) (f~4@ Poly)) (! (=> (and (has_type res~2@ (TYPE%core!result.Result. A& B&)) (has_type f~4@ (TYPE%fun%1. A& C&))) (has_type (Poly%core!result.Result. (main!impl_u.l1.result_map_ok.? A& A&. B& B&. C& C&. res~2@ f~4@)) (TYPE%core!result.Result. C& B&))) :pattern ((main!impl_u.l1.result_map_ok.? A& A&. B& B&. C& C&. res~2@ f~4@)) :qid internal_main!impl_u.l1.result_map_ok.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l1.result_map_ok.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::layer")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%0.layer.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%0.layer.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l2_impl.impl&%0.layer.? self~2@) (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))) :pattern ((main!impl_u.l2_impl.impl&%0.layer.? self~2@)) :qid internal_main!impl_u.l2_impl.impl&__0.layer.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__0.layer.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!impl_u.l2_impl.PageDirectoryEntry.) (<= 0 (main!impl_u.l2_impl.impl&%0.layer.? self~2@))) :pattern ((main!impl_u.l2_impl.impl&%0.layer.? self~2@)) :qid internal_main!impl_u.l2_impl.impl&__0.layer.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__0.layer.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_FLAG_P")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_FLAG_P.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_FLAG_P.) (= main!impl_u.l2_impl.MASK_FLAG_P.? (uClip 64 (uintshl 64 (I 1) (I 0))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_FLAG_P.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_FLAG_RW")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_FLAG_RW.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_FLAG_RW.) (= main!impl_u.l2_impl.MASK_FLAG_RW.? (uClip 64 (uintshl 64 (I 1) (I 1))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_FLAG_RW.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_FLAG_US")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_FLAG_US.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_FLAG_US.) (= main!impl_u.l2_impl.MASK_FLAG_US.? (uClip 64 (uintshl 64 (I 1) (I 2))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_FLAG_US.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_FLAG_PWT")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_FLAG_PWT.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_FLAG_PWT.) (= main!impl_u.l2_impl.MASK_FLAG_PWT.? (uClip 64 (uintshl 64 (I 1) (I 3))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_FLAG_PWT.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_FLAG_PCD")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_FLAG_PCD.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_FLAG_PCD.) (= main!impl_u.l2_impl.MASK_FLAG_PCD.? (uClip 64 (uintshl 64 (I 1) (I 4))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_FLAG_PCD.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_FLAG_A")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_FLAG_A.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_FLAG_A.) (= main!impl_u.l2_impl.MASK_FLAG_A.? (uClip 64 (uintshl 64 (I 1) (I 5))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_FLAG_A.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_FLAG_XD")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_FLAG_XD.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_FLAG_XD.) (= main!impl_u.l2_impl.MASK_FLAG_XD.? (uClip 64 (uintshl 64 (I 1) (I 63))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_FLAG_XD.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_L1_PG_FLAG_PS")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.) (= main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.? (uClip 64 (uintshl 64 (I 1) (I 7))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.?))
(set-info :comment ";; Function-Axioms main::definitions_t::MAXPHYADDR_BITS")
(assert (fuel_bool_default fuel%main!definitions_t.MAXPHYADDR_BITS.))
(assert (=> (fuel_bool fuel%main!definitions_t.MAXPHYADDR_BITS.) (= main!definitions_t.MAXPHYADDR_BITS.? 52)))
(assert (uInv 64 main!definitions_t.MAXPHYADDR_BITS.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_L3_PG_ADDR")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_L3_PG_ADDR.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_L3_PG_ADDR.) (= main!impl_u.l2_impl.MASK_L3_PG_ADDR.? (uClip 64 (uintshl 64 (I (uClip 64 (uintnot 64 (I (uClip 64 (uintshl 64 (I (uClip 64 (uintnot 64 (I 0)))) (I (uClip 64 (- (uClip 64 (+ main!definitions_t.MAXPHYADDR_BITS.? 1)) 12))))))))) (I 12))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_L3_PG_ADDR.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_L2_PG_ADDR")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_L2_PG_ADDR.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_L2_PG_ADDR.) (= main!impl_u.l2_impl.MASK_L2_PG_ADDR.? (uClip 64 (uintshl 64 (I (uClip 64 (uintnot 64 (I (uClip 64 (uintshl 64 (I (uClip 64 (uintnot 64 (I 0)))) (I (uClip 64 (- (uClip 64 (+ main!definitions_t.MAXPHYADDR_BITS.? 1)) 21))))))))) (I 21))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_L2_PG_ADDR.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_L1_PG_ADDR")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_L1_PG_ADDR.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_L1_PG_ADDR.) (= main!impl_u.l2_impl.MASK_L1_PG_ADDR.? (uClip 64 (uintshl 64 (I (uClip 64 (uintnot 64 (I (uClip 64 (uintshl 64 (I (uClip 64 (uintnot 64 (I 0)))) (I (uClip 64 (- (uClip 64 (+ main!definitions_t.MAXPHYADDR_BITS.? 1)) 30))))))))) (I 30))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_L1_PG_ADDR.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_PG_FLAG_D")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_PG_FLAG_D.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_PG_FLAG_D.) (= main!impl_u.l2_impl.MASK_PG_FLAG_D.? (uClip 64 (uintshl 64 (I 1) (I 6))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_PG_FLAG_D.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_PG_FLAG_G")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_PG_FLAG_G.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_PG_FLAG_G.) (= main!impl_u.l2_impl.MASK_PG_FLAG_G.? (uClip 64 (uintshl 64 (I 1) (I 8))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_PG_FLAG_G.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_PG_FLAG_PAT")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_PG_FLAG_PAT.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_PG_FLAG_PAT.) (= main!impl_u.l2_impl.MASK_PG_FLAG_PAT.? (uClip 64 (uintshl 64 (I 1) (I 12))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_PG_FLAG_PAT.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_L3_PG_FLAG_PAT")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_L3_PG_FLAG_PAT.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_L3_PG_FLAG_PAT.) (= main!impl_u.l2_impl.MASK_L3_PG_FLAG_PAT.? (uClip 64 (uintshl 64 (I 1) (I 7))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_L3_PG_FLAG_PAT.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_ADDR")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_ADDR.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_ADDR.) (= main!impl_u.l2_impl.MASK_ADDR.? (uClip 64 (uintshl 64 (I (uClip 64 (uintnot 64 (I (uClip 64 (uintshl 64 (I (uClip 64 (uintnot 64 (I 0)))) (I (uClip 64 (- (uClip 64 (+ main!definitions_t.MAXPHYADDR_BITS.? 1)) 12))))))))) (I 12))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_ADDR.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::view")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%0.view.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%0.view.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l2_impl.impl&%0.view.? self~2@) (ite (<= (main!impl_u.l2_impl.impl&%0.layer.? self~2@) 3) (let ((v~22$ (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)))) (ite (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_FLAG_P.?))) main!impl_u.l2_impl.MASK_FLAG_P.?) (let ((flag_P~53$ (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_FLAG_P.?))) main!impl_u.l2_impl.MASK_FLAG_P.?))) (let ((flag_RW~69$ (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_FLAG_RW.?))) main!impl_u.l2_impl.MASK_FLAG_RW.?))) (let ((flag_US~85$ (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_FLAG_US.?))) main!impl_u.l2_impl.MASK_FLAG_US.?))) (let ((flag_PWT~101$ (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_FLAG_PWT.?))) main!impl_u.l2_impl.MASK_FLAG_PWT.?))) (let ((flag_PCD~117$ (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_FLAG_PCD.?))) main!impl_u.l2_impl.MASK_FLAG_PCD.?))) (let ((flag_A~133$ (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_FLAG_A.?))) main!impl_u.l2_impl.MASK_FLAG_A.?))) (let ((flag_XD~149$ (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_FLAG_XD.?))) main!impl_u.l2_impl.MASK_FLAG_XD.?))) (ite (or (= (main!impl_u.l2_impl.impl&%0.layer.? self~2@) 3) (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.?))) main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.?)) (let ((addr~265$ (ite (= (main!impl_u.l2_impl.impl&%0.layer.? self~2@) 3) (uClip SZ (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_L3_PG_ADDR.?)))) (ite (= (main!impl_u.l2_impl.impl&%0.layer.? self~2@) 2) (uClip SZ (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_L2_PG_ADDR.?)))) (uClip SZ (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_L1_PG_ADDR.?)))))))) (let ((flag_D~281$ (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_PG_FLAG_D.?))) main!impl_u.l2_impl.MASK_PG_FLAG_D.?))) (let ((flag_G~297$ (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_PG_FLAG_G.?))) main!impl_u.l2_impl.MASK_PG_FLAG_G.?))) (let ((flag_PAT~347$ (ite (= (main!impl_u.l2_impl.impl&%0.layer.? self~2@) 3) (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_PG_FLAG_PAT.?))) main!impl_u.l2_impl.MASK_PG_FLAG_PAT.?) (= (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_L3_PG_FLAG_PAT.?))) main!impl_u.l2_impl.MASK_L3_PG_FLAG_PAT.?)))) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page (%I (I addr~265$)) (%B (B flag_P~53$)) (%B (B flag_RW~69$)) (%B (B flag_US~85$)) (%B (B flag_PWT~101$)) (%B (B flag_PCD~117$)) (%B (B flag_A~133$)) (%B (B flag_D~281$)) (%B (B flag_G~297$)) (%B (B flag_PAT~347$)) (%B (B flag_XD~149$))))))) (let ((addr~403$ (uClip SZ (uClip 64 (uintand 64 (I v~22$) (I main!impl_u.l2_impl.MASK_ADDR.?)))))) (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory (%I (I addr~403$)) (%B (B flag_P~53$)) (%B (B flag_RW~69$)) (%B (B flag_US~85$)) (%B (B flag_PWT~101$)) (%B (B flag_PCD~117$)) (%B (B flag_A~133$)) (%B (B flag_XD~149$)))))))))))) main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty)) (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (vstd!pervasive.arbitrary.? TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry. TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)))) :pattern ((main!impl_u.l2_impl.impl&%0.view.? self~2@)) :qid internal_main!impl_u.l2_impl.impl&__0.view.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__0.view.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!impl_u.l2_impl.PageDirectoryEntry.) (has_type (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%0.view.? self~2@)) TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)) :pattern ((main!impl_u.l2_impl.impl&%0.view.? self~2@)) :qid internal_main!impl_u.l2_impl.impl&__0.view.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__0.view.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::addr_is_zero_padded")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.addr_is_zero_padded.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.addr_is_zero_padded.) (forall ((layer~2@ Poly) (addr~4@ Poly) (is_page~6@ Poly)) (! (= (main!impl_u.l2_impl.addr_is_zero_padded.? layer~2@ addr~4@ is_page~6@) (=> (%B is_page~6@) (ite (= (%I layer~2@) 1) (= (uClip 64 (uintand 64 (I (%I addr~4@)) (I main!impl_u.l2_impl.MASK_L1_PG_ADDR.?))) (uClip 64 (uintand 64 (I (%I addr~4@)) (I main!impl_u.l2_impl.MASK_ADDR.?)))) (ite (= (%I layer~2@) 2) (= (uClip 64 (uintand 64 (I (%I addr~4@)) (I main!impl_u.l2_impl.MASK_L2_PG_ADDR.?))) (uClip 64 (uintand 64 (I (%I addr~4@)) (I main!impl_u.l2_impl.MASK_ADDR.?)))) (=> (= (%I layer~2@) 3) (= (uClip 64 (uintand 64 (I (%I addr~4@)) (I main!impl_u.l2_impl.MASK_L3_PG_ADDR.?))) (uClip 64 (uintand 64 (I (%I addr~4@)) (I main!impl_u.l2_impl.MASK_ADDR.?))))))))) :pattern ((main!impl_u.l2_impl.addr_is_zero_padded.? layer~2@ addr~4@ is_page~6@)) :qid internal_main!impl_u.l2_impl.addr_is_zero_padded.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.addr_is_zero_padded.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::addr_is_zero_padded")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.? self~2@) (main!impl_u.l2_impl.addr_is_zero_padded.? (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))) (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))) (B ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) (main!impl_u.l2_impl.impl&%0.view.? self~2@))))) :pattern ((main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.? self~2@)) :qid internal_main!impl_u.l2_impl.impl&__0.addr_is_zero_padded.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__0.addr_is_zero_padded.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::lemma_zero_is_empty")
(declare-fun req%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. (main!impl_u.l2_impl.PageDirectoryEntry.) Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (req%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. self~2@) (and (=> %%global_location_label%%120 (= (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))) 0)) (=> %%global_location_label%%121 (<= (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))) 3)))) :pattern ((req%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. self~2@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.lemma_zero_is_empty._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.lemma_zero_is_empty._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::lemma_zero_is_empty")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. (main!impl_u.l2_impl.PageDirectoryEntry.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (ens%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. self~2@) ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. self~2@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.lemma_zero_is_empty._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.lemma_zero_is_empty._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::lemma_new_entry_addr_mask_is_address")
(declare-fun req%main!impl_u.l2_impl.impl&%0.lemma_new_entry_addr_mask_is_address. (Int Int Bool Bool Bool Bool Bool Bool) Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(declare-const %%global_location_label%%125 Bool)
(assert (forall ((layer~2@ Int) (address~4@ Int) (is_page~6@ Bool) (is_writable~8@ Bool) (is_supervisor~10@ Bool) (is_writethrough~12@ Bool) (disable_cache~14@ Bool) (disable_execute~16@ Bool)) (! (= (req%main!impl_u.l2_impl.impl&%0.lemma_new_entry_addr_mask_is_address. layer~2@ address~4@ is_page~6@ is_writable~8@ is_supervisor~10@ is_writethrough~12@ disable_cache~14@ disable_execute~16@) (and (=> %%global_location_label%%122 (<= layer~2@ 3)) (=> %%global_location_label%%123 (ite is_page~6@ (< 0 layer~2@) (< layer~2@ 3))) (=> %%global_location_label%%124 (main!impl_u.l2_impl.addr_is_zero_padded.? (I layer~2@) (I address~4@) (B is_page~6@))) (=> %%global_location_label%%125 (= (uClip 64 (uintand 64 (I address~4@) (I main!impl_u.l2_impl.MASK_ADDR.?))) address~4@)))) :pattern ((req%main!impl_u.l2_impl.impl&%0.lemma_new_entry_addr_mask_is_address. layer~2@ address~4@ is_page~6@ is_writable~8@ is_supervisor~10@ is_writethrough~12@ disable_cache~14@ disable_execute~16@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.lemma_new_entry_addr_mask_is_address._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.lemma_new_entry_addr_mask_is_address._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::lemma_new_entry_addr_mask_is_address")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.lemma_new_entry_addr_mask_is_address. (Int Int Bool Bool Bool Bool Bool Bool) Bool)
(assert (forall ((layer~2@ Int) (address~4@ Int) (is_page~6@ Bool) (is_writable~8@ Bool) (is_supervisor~10@ Bool) (is_writethrough~12@ Bool) (disable_cache~14@ Bool) (disable_execute~16@ Bool)) (! (= (ens%main!impl_u.l2_impl.impl&%0.lemma_new_entry_addr_mask_is_address. layer~2@ address~4@ is_page~6@ is_writable~8@ is_supervisor~10@ is_writethrough~12@ disable_cache~14@ disable_execute~16@) (let ((e~230$ (uClip 64 (uintor 64 (I (uClip 64 (uintor 64 (I (uClip 64 (uintor 64 (I (uClip 64 (uintor 64 (I (uClip 64 (uintor 64 (I (uClip 64 (uintor 64 (I (uClip 64 (uintor 64 (I address~4@) (I main!impl_u.l2_impl.MASK_FLAG_P.?)))) (I (ite (and is_page~6@ (not (= layer~2@ 3))) main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.? 0))))) (I (ite is_writable~8@ main!impl_u.l2_impl.MASK_FLAG_RW.? 0))))) (I (ite is_supervisor~10@ 0 main!impl_u.l2_impl.MASK_FLAG_US.?))))) (I (ite is_writethrough~12@ main!impl_u.l2_impl.MASK_FLAG_PWT.? 0))))) (I (ite disable_cache~14@ main!impl_u.l2_impl.MASK_FLAG_PCD.? 0))))) (I (ite disable_execute~16@ main!impl_u.l2_impl.MASK_FLAG_XD.? 0)))))) (and (and (and (and (and (and (and (and (= (uClip 64 (uintand 64 (I e~230$) (I main!impl_u.l2_impl.MASK_ADDR.?))) address~4@) (= (uClip 64 (uintand 64 (I e~230$) (I main!impl_u.l2_impl.MASK_FLAG_P.?))) main!impl_u.l2_impl.MASK_FLAG_P.?)) (= (= (uClip 64 (uintand 64 (I e~230$) (I main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.?))) main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.?) (and is_page~6@ (not (= layer~2@ 3))))) (= (= (uClip 64 (uintand 64 (I e~230$) (I main!impl_u.l2_impl.MASK_FLAG_RW.?))) main!impl_u.l2_impl.MASK_FLAG_RW.?) is_writable~8@)) (= (= (uClip 64 (uintand 64 (I e~230$) (I main!impl_u.l2_impl.MASK_FLAG_US.?))) main!impl_u.l2_impl.MASK_FLAG_US.?) (not is_supervisor~10@))) (= (= (uClip 64 (uintand 64 (I e~230$) (I main!impl_u.l2_impl.MASK_FLAG_PWT.?))) main!impl_u.l2_impl.MASK_FLAG_PWT.?) is_writethrough~12@)) (= (= (uClip 64 (uintand 64 (I e~230$) (I main!impl_u.l2_impl.MASK_FLAG_PCD.?))) main!impl_u.l2_impl.MASK_FLAG_PCD.?) disable_cache~14@)) (= (= (uClip 64 (uintand 64 (I e~230$) (I main!impl_u.l2_impl.MASK_FLAG_XD.?))) main!impl_u.l2_impl.MASK_FLAG_XD.?) disable_execute~16@)) (main!impl_u.l2_impl.addr_is_zero_padded.? (I layer~2@) (I e~230$) (B is_page~6@))))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.lemma_new_entry_addr_mask_is_address. layer~2@ address~4@ is_page~6@ is_writable~8@ is_supervisor~10@ is_writethrough~12@ disable_cache~14@ disable_execute~16@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.lemma_new_entry_addr_mask_is_address._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.lemma_new_entry_addr_mask_is_address._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::new_entry")
(declare-fun req%main!impl_u.l2_impl.impl&%0.new_entry. (Int Int Bool Bool Bool Bool Bool Bool) Bool)
(declare-const %%global_location_label%%126 Bool)
(declare-const %%global_location_label%%127 Bool)
(declare-const %%global_location_label%%128 Bool)
(declare-const %%global_location_label%%129 Bool)
(assert (forall ((layer~2@ Int) (address~4@ Int) (is_page~6@ Bool) (is_writable~8@ Bool) (is_supervisor~10@ Bool) (is_writethrough~12@ Bool) (disable_cache~14@ Bool) (disable_execute~16@ Bool)) (! (= (req%main!impl_u.l2_impl.impl&%0.new_entry. layer~2@ address~4@ is_page~6@ is_writable~8@ is_supervisor~10@ is_writethrough~12@ disable_cache~14@ disable_execute~16@) (and (=> %%global_location_label%%126 (<= layer~2@ 3)) (=> %%global_location_label%%127 (ite is_page~6@ (< 0 layer~2@) (< layer~2@ 3))) (=> %%global_location_label%%128 (main!impl_u.l2_impl.addr_is_zero_padded.? (I layer~2@) (I address~4@) (B is_page~6@))) (=> %%global_location_label%%129 (= (uClip 64 (uintand 64 (I address~4@) (I main!impl_u.l2_impl.MASK_ADDR.?))) address~4@)))) :pattern ((req%main!impl_u.l2_impl.impl&%0.new_entry. layer~2@ address~4@ is_page~6@ is_writable~8@ is_supervisor~10@ is_writethrough~12@ disable_cache~14@ disable_execute~16@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.new_entry._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.new_entry._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::new_entry")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.new_entry. (Int Int Bool Bool Bool Bool Bool Bool main!impl_u.l2_impl.PageDirectoryEntry.) Bool)
(assert (forall ((layer~2@ Int) (address~4@ Int) (is_page~6@ Bool) (is_writable~8@ Bool) (is_supervisor~10@ Bool) (is_writethrough~12@ Bool) (disable_cache~14@ Bool) (disable_execute~16@ Bool) (r~99@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (ens%main!impl_u.l2_impl.impl&%0.new_entry. layer~2@ address~4@ is_page~6@ is_writable~8@ is_supervisor~10@ is_writethrough~12@ disable_cache~14@ disable_execute~16@ r~99@) (and (has_type (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@) TYPE%main!impl_u.l2_impl.PageDirectoryEntry.) (ite is_page~6@ (and ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@))) (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@))))) address~4@)) (and ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@))) (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@))))) address~4@))) (main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@)) (= (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@))) layer~2@) (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@)))) (I main!impl_u.l2_impl.MASK_ADDR.?))) address~4@) (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@)))) (I main!impl_u.l2_impl.MASK_FLAG_P.?))) main!impl_u.l2_impl.MASK_FLAG_P.?) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@)))) (I main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.?))) main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.?) (and is_page~6@ (not (= layer~2@ 3)))) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@)))) (I main!impl_u.l2_impl.MASK_FLAG_RW.?))) main!impl_u.l2_impl.MASK_FLAG_RW.?) is_writable~8@) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@)))) (I main!impl_u.l2_impl.MASK_FLAG_US.?))) main!impl_u.l2_impl.MASK_FLAG_US.?) (not is_supervisor~10@)) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@)))) (I main!impl_u.l2_impl.MASK_FLAG_PWT.?))) main!impl_u.l2_impl.MASK_FLAG_PWT.?) is_writethrough~12@) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@)))) (I main!impl_u.l2_impl.MASK_FLAG_PCD.?))) main!impl_u.l2_impl.MASK_FLAG_PCD.?) disable_cache~14@) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~99@)))) (I main!impl_u.l2_impl.MASK_FLAG_XD.?))) main!impl_u.l2_impl.MASK_FLAG_XD.?) disable_execute~16@))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.new_entry. layer~2@ address~4@ is_page~6@ is_writable~8@ is_supervisor~10@ is_writethrough~12@ disable_cache~14@ disable_execute~16@ r~99@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.new_entry._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.new_entry._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::new_page_entry")
(declare-fun req%main!impl_u.l2_impl.impl&%0.new_page_entry. (Int main!definitions_t.PageTableEntryExec.) Bool)
(declare-const %%global_location_label%%130 Bool)
(declare-const %%global_location_label%%131 Bool)
(declare-const %%global_location_label%%132 Bool)
(assert (forall ((layer~2@ Int) (pte~4@ main!definitions_t.PageTableEntryExec.)) (! (= (req%main!impl_u.l2_impl.impl&%0.new_page_entry. layer~2@ pte~4@) (and (=> %%global_location_label%%130 (and (< 0 layer~2@) (<= layer~2@ 3))) (=> %%global_location_label%%131 (main!impl_u.l2_impl.addr_is_zero_padded.? (I layer~2@) (I (uClip 64 (main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. (Poly%main!definitions_t.MemRegionExec. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@)))))))) (B true))) (=> %%global_location_label%%132 (= (uClip 64 (uintand 64 (I (uClip 64 (main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. (Poly%main!definitions_t.MemRegionExec. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@)))))))) (I main!impl_u.l2_impl.MASK_ADDR.?))) (uClip 64 (main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. (Poly%main!definitions_t.MemRegionExec. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@))))))))))) :pattern ((req%main!impl_u.l2_impl.impl&%0.new_page_entry. layer~2@ pte~4@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.new_page_entry._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.new_page_entry._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::new_page_entry")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.new_page_entry. (Int main!definitions_t.PageTableEntryExec. main!impl_u.l2_impl.PageDirectoryEntry.) Bool)
(assert (forall ((layer~2@ Int) (pte~4@ main!definitions_t.PageTableEntryExec.) (r~112@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (ens%main!impl_u.l2_impl.impl&%0.new_page_entry. layer~2@ pte~4@ r~112@) (and (has_type (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@) TYPE%main!impl_u.l2_impl.PageDirectoryEntry.) (main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@)) ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@))) (= (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@))) layer~2@) (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@))))) (main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. (Poly%main!definitions_t.MemRegionExec. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@))))))) (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@)))) (I main!impl_u.l2_impl.MASK_ADDR.?))) (main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. (Poly%main!definitions_t.MemRegionExec. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@))))))) (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@)))) (I main!impl_u.l2_impl.MASK_FLAG_P.?))) main!impl_u.l2_impl.MASK_FLAG_P.?) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@)))) (I main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.?))) main!impl_u.l2_impl.MASK_L1_PG_FLAG_PS.?) (not (= layer~2@ 3))) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@)))) (I main!impl_u.l2_impl.MASK_FLAG_RW.?))) main!impl_u.l2_impl.MASK_FLAG_RW.?) (main!definitions_t.Flags./Flags/is_writable (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@))))))) (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_RW (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@))))) (main!definitions_t.Flags./Flags/is_writable (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@))))))) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@)))) (I main!impl_u.l2_impl.MASK_FLAG_US.?))) main!impl_u.l2_impl.MASK_FLAG_US.?) (not (main!definitions_t.Flags./Flags/is_supervisor (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@)))))))) (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_US (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@))))) (not (main!definitions_t.Flags./Flags/is_supervisor (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@)))))))) (not (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@)))) (I main!impl_u.l2_impl.MASK_FLAG_PWT.?))) main!impl_u.l2_impl.MASK_FLAG_PWT.?)) (not (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@)))) (I main!impl_u.l2_impl.MASK_FLAG_PCD.?))) main!impl_u.l2_impl.MASK_FLAG_PCD.?)) (= (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@)))) (I main!impl_u.l2_impl.MASK_FLAG_XD.?))) main!impl_u.l2_impl.MASK_FLAG_XD.?) (main!definitions_t.Flags./Flags/disable_execute (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@))))))) (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_XD (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~112@))))) (main!definitions_t.Flags./Flags/disable_execute (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%main!definitions_t.PageTableEntryExec. (Poly%main!definitions_t.PageTableEntryExec. pte~4@))))))))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.new_page_entry. layer~2@ pte~4@ r~112@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.new_page_entry._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.new_page_entry._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_DIR_ADDR")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_DIR_ADDR.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_DIR_ADDR.) (= main!impl_u.l2_impl.MASK_DIR_ADDR.? main!impl_u.l2_impl.MASK_ADDR.?)))
(assert (uInv 64 main!impl_u.l2_impl.MASK_DIR_ADDR.?))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::new_dir_entry")
(declare-fun req%main!impl_u.l2_impl.impl&%0.new_dir_entry. (Int Int) Bool)
(declare-const %%global_location_label%%133 Bool)
(declare-const %%global_location_label%%134 Bool)
(assert (forall ((layer~2@ Int) (address~4@ Int)) (! (= (req%main!impl_u.l2_impl.impl&%0.new_dir_entry. layer~2@ address~4@) (and (=> %%global_location_label%%133 (< layer~2@ 3)) (=> %%global_location_label%%134 (= (uClip 64 (uintand 64 (I address~4@) (I main!impl_u.l2_impl.MASK_DIR_ADDR.?))) address~4@)))) :pattern ((req%main!impl_u.l2_impl.impl&%0.new_dir_entry. layer~2@ address~4@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.new_dir_entry._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.new_dir_entry._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::new_dir_entry")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.new_dir_entry. (Int Int main!impl_u.l2_impl.PageDirectoryEntry.) Bool)
(assert (forall ((layer~2@ Int) (address~4@ Int) (r~42@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (ens%main!impl_u.l2_impl.impl&%0.new_dir_entry. layer~2@ address~4@ r~42@) (and (has_type (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~42@) TYPE%main!impl_u.l2_impl.PageDirectoryEntry.) (main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~42@)) ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~42@))) (= (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~42@))) layer~2@) (= (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. r~42@))))) address~4@))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.new_dir_entry. layer~2@ address~4@ r~42@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.new_dir_entry._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.new_dir_entry._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::flags")
(declare-fun req%main!impl_u.l2_impl.impl&%0.flags. (main!impl_u.l2_impl.PageDirectoryEntry.) Bool)
(declare-const %%global_location_label%%135 Bool)
(declare-const %%global_location_label%%136 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (req%main!impl_u.l2_impl.impl&%0.flags. self~2@) (and (=> %%global_location_label%%135 (<= (main!impl_u.l2_impl.impl&%0.layer.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)) 3)) (=> %%global_location_label%%136 ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)))))) :pattern ((req%main!impl_u.l2_impl.impl&%0.flags. self~2@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.flags._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.flags._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::flags")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.flags. (main!impl_u.l2_impl.PageDirectoryEntry. main!definitions_t.Flags.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.) (res~35@ main!definitions_t.Flags.)) (! (= (ens%main!impl_u.l2_impl.impl&%0.flags. self~2@ res~35@) (and (= (main!definitions_t.Flags./Flags/is_writable (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. res~35@))) (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)))) (I main!impl_u.l2_impl.MASK_FLAG_RW.?))) main!impl_u.l2_impl.MASK_FLAG_RW.?)) (= (main!definitions_t.Flags./Flags/is_supervisor (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. res~35@))) (not (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)))) (I main!impl_u.l2_impl.MASK_FLAG_US.?))) main!impl_u.l2_impl.MASK_FLAG_US.?))) (= (main!definitions_t.Flags./Flags/disable_execute (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. res~35@))) (= (uClip 64 (uintand 64 (I (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/entry (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)))) (I main!impl_u.l2_impl.MASK_FLAG_XD.?))) main!impl_u.l2_impl.MASK_FLAG_XD.?)))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.flags. self~2@ res~35@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.flags._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.flags._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::address")
(declare-fun req%main!impl_u.l2_impl.impl&%0.address. (main!impl_u.l2_impl.PageDirectoryEntry.) Bool)
(declare-const %%global_location_label%%137 Bool)
(declare-const %%global_location_label%%138 Bool)
(declare-const %%global_location_label%%139 Bool)
(declare-const %%global_location_label%%140 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (req%main!impl_u.l2_impl.impl&%0.address. self~2@) (and (=> %%global_location_label%%137 (<= (main!impl_u.l2_impl.impl&%0.layer.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)) 3)) (=> %%global_location_label%%138 (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))) (< 0 (main!impl_u.l2_impl.impl&%0.layer.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))))) (=> %%global_location_label%%139 (main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))) (=> %%global_location_label%%140 (not ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))))))) :pattern ((req%main!impl_u.l2_impl.impl&%0.address. self~2@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.address._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.address._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::address")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.address. (main!impl_u.l2_impl.PageDirectoryEntry. Int) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.) (res~63@ Int)) (! (= (ens%main!impl_u.l2_impl.impl&%0.address. self~2@ res~63@) (and (uInv 64 res~63@) (= (uClip SZ res~63@) (let ((tmp%%1$ (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)))) (ite ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) tmp%%1$) (let ((addr~88$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) addr~88$) (ite ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) tmp%%1$) (let ((addr~96$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) addr~96$) (%I (vstd!pervasive.arbitrary.? (UINT SZ) (UINT SZ))))))))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.address. self~2@ res~63@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.address._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.address._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::is_mapping")
(declare-fun req%main!impl_u.l2_impl.impl&%0.is_mapping. (main!impl_u.l2_impl.PageDirectoryEntry.) Bool)
(declare-const %%global_location_label%%141 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (req%main!impl_u.l2_impl.impl&%0.is_mapping. self~2@) (=> %%global_location_label%%141 (<= (main!impl_u.l2_impl.impl&%0.layer.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)) 3))) :pattern ((req%main!impl_u.l2_impl.impl&%0.is_mapping. self~2@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.is_mapping._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.is_mapping._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::is_mapping")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.is_mapping. (main!impl_u.l2_impl.PageDirectoryEntry. Bool) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.) (r~29@ Bool)) (! (= (ens%main!impl_u.l2_impl.impl&%0.is_mapping. self~2@ r~29@) (= r~29@ (not ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@)))))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.is_mapping. self~2@ r~29@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.is_mapping._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.is_mapping._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::is_page")
(declare-fun req%main!impl_u.l2_impl.impl&%0.is_page. (main!impl_u.l2_impl.PageDirectoryEntry. Int) Bool)
(declare-const %%global_location_label%%142 Bool)
(declare-const %%global_location_label%%143 Bool)
(declare-const %%global_location_label%%144 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.) (layer~4@ Int)) (! (= (req%main!impl_u.l2_impl.impl&%0.is_page. self~2@ layer~4@) (and (=> %%global_location_label%%142 (not ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))))) (=> %%global_location_label%%143 (= layer~4@ (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))))) (=> %%global_location_label%%144 (<= layer~4@ 3)))) :pattern ((req%main!impl_u.l2_impl.impl&%0.is_page. self~2@ layer~4@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.is_page._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.is_page._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::is_page")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.is_page. (main!impl_u.l2_impl.PageDirectoryEntry. Int Bool) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.) (layer~4@ Int) (r~56@ Bool)) (! (= (ens%main!impl_u.l2_impl.impl&%0.is_page. self~2@ layer~4@ r~56@) (ite r~56@ ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))) ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.is_page. self~2@ layer~4@ r~56@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.is_page._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.is_page._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageDirectoryEntry::is_dir")
(declare-fun req%main!impl_u.l2_impl.impl&%0.is_dir. (main!impl_u.l2_impl.PageDirectoryEntry. Int) Bool)
(declare-const %%global_location_label%%145 Bool)
(declare-const %%global_location_label%%146 Bool)
(declare-const %%global_location_label%%147 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.) (layer~4@ Int)) (! (= (req%main!impl_u.l2_impl.impl&%0.is_dir. self~2@ layer~4@) (and (=> %%global_location_label%%145 (not ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))))) (=> %%global_location_label%%146 (= layer~4@ (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))))) (=> %%global_location_label%%147 (<= layer~4@ 3)))) :pattern ((req%main!impl_u.l2_impl.impl&%0.is_dir. self~2@ layer~4@)) :qid internal_req__main!impl_u.l2_impl.impl&__0.is_dir._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__0.is_dir._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageDirectoryEntry::is_dir")
(declare-fun ens%main!impl_u.l2_impl.impl&%0.is_dir. (main!impl_u.l2_impl.PageDirectoryEntry. Int Bool) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageDirectoryEntry.) (layer~4@ Int) (r~56@ Bool)) (! (= (ens%main!impl_u.l2_impl.impl&%0.is_dir. self~2@ layer~4@ r~56@) (ite r~56@ ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))) ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. self~2@))))) :pattern ((ens%main!impl_u.l2_impl.impl&%0.is_dir. self~2@ layer~4@ r~56@)) :qid internal_ens__main!impl_u.l2_impl.impl&__0.is_dir._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__0.is_dir._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::PAGE_SIZE")
(assert (fuel_bool_default fuel%main!definitions_t.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%main!definitions_t.PAGE_SIZE.) (= main!definitions_t.PAGE_SIZE.? 4096)))
(assert (uInv SZ main!definitions_t.PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms main::definitions_t::L3_ENTRY_SIZE")
(assert (fuel_bool_default fuel%main!definitions_t.L3_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%main!definitions_t.L3_ENTRY_SIZE.) (= main!definitions_t.L3_ENTRY_SIZE.? main!definitions_t.PAGE_SIZE.?)))
(assert (uInv SZ main!definitions_t.L3_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms main::definitions_t::L2_ENTRY_SIZE")
(assert (fuel_bool_default fuel%main!definitions_t.L2_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%main!definitions_t.L2_ENTRY_SIZE.) (= main!definitions_t.L2_ENTRY_SIZE.? (uClip SZ (* 512 main!definitions_t.L3_ENTRY_SIZE.?)))))
(assert (uInv SZ main!definitions_t.L2_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms main::definitions_t::L1_ENTRY_SIZE")
(assert (fuel_bool_default fuel%main!definitions_t.L1_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%main!definitions_t.L1_ENTRY_SIZE.) (= main!definitions_t.L1_ENTRY_SIZE.? (uClip SZ (* 512 main!definitions_t.L2_ENTRY_SIZE.?)))))
(assert (uInv SZ main!definitions_t.L1_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms main::definitions_t::L0_ENTRY_SIZE")
(assert (fuel_bool_default fuel%main!definitions_t.L0_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%main!definitions_t.L0_ENTRY_SIZE.) (= main!definitions_t.L0_ENTRY_SIZE.? (uClip SZ (* 512 main!definitions_t.L1_ENTRY_SIZE.?)))))
(assert (uInv SZ main!definitions_t.L0_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms main::definitions_t::x86_arch_spec")
(assert (fuel_bool_default fuel%main!definitions_t.x86_arch_spec.))
(assert (=> (fuel_bool fuel%main!definitions_t.x86_arch_spec.) (= main!definitions_t.x86_arch_spec.? (main!definitions_t.Arch./Arch (%Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (vstd!seq.Seq.push.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (vstd!seq.Seq.push.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (vstd!seq.Seq.push.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (vstd!seq.Seq.push.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (vstd!seq.Seq.empty.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer.) (Poly%main!definitions_t.ArchLayer. (main!definitions_t.ArchLayer./ArchLayer (%I (I main!definitions_t.L0_ENTRY_SIZE.?)) (%I (I 512))))) (Poly%main!definitions_t.ArchLayer. (main!definitions_t.ArchLayer./ArchLayer (%I (I main!definitions_t.L1_ENTRY_SIZE.?)) (%I (I 512))))) (Poly%main!definitions_t.ArchLayer. (main!definitions_t.ArchLayer./ArchLayer (%I (I main!definitions_t.L2_ENTRY_SIZE.?)) (%I (I 512))))) (Poly%main!definitions_t.ArchLayer. (main!definitions_t.ArchLayer./ArchLayer (%I (I main!definitions_t.L3_ENTRY_SIZE.?)) (%I (I 512))))))))))
(set-info :comment ";; Function-Decl-Check-Recommends main::impl_u::l2_impl::PageTable::well_formed")
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::well_formed")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.well_formed.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.well_formed.) (forall ((self~2@ Poly) (ptr~4@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.well_formed.? self~2@ ptr~4@) (and (main!definitions_t.impl&%7.inv.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?)) (forall ((layer~17$ Poly)) (! (=> (has_type layer~17$ NAT) (=> (< (%I layer~17$) main!definitions_t.X86_NUM_LAYERS.?) (= (main!definitions_t.impl&%7.num_entries.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) layer~17$) 512))) :pattern ((main!definitions_t.impl&%7.num_entries.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) layer~17$)) :qid user_main__impl_u__l2_impl__PageTable__well_formed_105 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__well_formed_105)))) :pattern ((main!impl_u.l2_impl.impl&%1.well_formed.? self~2@ ptr~4@)) :qid internal_main!impl_u.l2_impl.impl&__1.well_formed.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.well_formed.?_definition))))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::cr3_spec")
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!spec_t.mem.PageTableMemory.) (has_type (Poly%main!definitions_t.MemRegionExec. (main!spec_t.mem.impl&%1.cr3_spec.? self~2@)) TYPE%main!definitions_t.MemRegionExec.)) :pattern ((main!spec_t.mem.impl&%1.cr3_spec.? self~2@)) :qid internal_main!spec_t.mem.impl&__1.cr3_spec.?_pre_post_definition :skolemid skolem_internal_main!spec_t.mem.impl&__1.cr3_spec.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::MemRegionExec::view")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%2.view.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%2.view.) (forall ((self~2@ Poly)) (! (= (main!definitions_t.impl&%2.view.? self~2@) (main!definitions_t.MemRegion./MemRegion (%I (I (main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. self~2@)))) (%I (I (main!definitions_t.MemRegionExec./MemRegionExec/size (%Poly%main!definitions_t.MemRegionExec. self~2@)))))) :pattern ((main!definitions_t.impl&%2.view.? self~2@)) :qid internal_main!definitions_t.impl&__2.view.?_definition :skolemid skolem_internal_main!definitions_t.impl&__2.view.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!definitions_t.MemRegionExec.) (has_type (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? self~2@)) TYPE%main!definitions_t.MemRegion.)) :pattern ((main!definitions_t.impl&%2.view.? self~2@)) :qid internal_main!definitions_t.impl&__2.view.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.impl&__2.view.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::phys_mem_ref_as_usize_spec")
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!spec_t.mem.PageTableMemory.) (uInv SZ (main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self~2@))) :pattern ((main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self~2@)) :qid internal_main!spec_t.mem.impl&__1.phys_mem_ref_as_usize_spec.?_pre_post_definition :skolemid skolem_internal_main!spec_t.mem.impl&__1.phys_mem_ref_as_usize_spec.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::inv")
(assert (fuel_bool_default fuel%main!spec_t.mem.impl&%1.inv.))
(assert (=> (fuel_bool fuel%main!spec_t.mem.impl&%1.inv.) (forall ((self~2@ Poly)) (! (= (main!spec_t.mem.impl&%1.inv.? self~2@) (and (<= (main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? self~2@) 9214364837600034816) (forall ((s1~23$ Poly) (s2~25$ Poly)) (! (=> (and (has_type s1~23$ TYPE%main!definitions_t.MemRegion.) (has_type s2~25$ TYPE%main!definitions_t.MemRegion.)) (=> (and (and (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? self~2@)) s1~23$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? self~2@)) s2~25$)) (not (= s1~23$ s2~25$))) (not (main!definitions_t.overlap.? s1~23$ s2~25$)))) :pattern ((main!definitions_t.overlap.? s1~23$ s2~25$)) :qid user_main__spec_t__mem__PageTableMemory__inv_107 :skolemid skolem_user_main__spec_t__mem__PageTableMemory__inv_107)))) :pattern ((main!spec_t.mem.impl&%1.inv.? self~2@)) :qid internal_main!spec_t.mem.impl&__1.inv.?_definition :skolemid skolem_internal_main!spec_t.mem.impl&__1.inv.?_definition))))
(set-info :comment ";; Function-Decl-Check-Recommends main::impl_u::l2_impl::PageTable::layer_in_range")
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::layer_in_range")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.layer_in_range.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.layer_in_range.) (forall ((self~2@ Poly) (layer~4@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.layer_in_range.? self~2@ layer~4@) (< (%I layer~4@) main!definitions_t.X86_NUM_LAYERS.?)) :pattern ((main!impl_u.l2_impl.impl&%1.layer_in_range.? self~2@ layer~4@)) :qid internal_main!impl_u.l2_impl.impl&__1.layer_in_range.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.layer_in_range.?_definition))))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::spec_read")
(assert (fuel_bool_default fuel%main!spec_t.mem.impl&%1.spec_read.))
(assert (=> (fuel_bool fuel%main!spec_t.mem.impl&%1.spec_read.) (forall ((self~2@ Poly) (idx~4@ Poly) (region~6@ Poly)) (! (= (main!spec_t.mem.impl&%1.spec_read.? self~2@ idx~4@ region~6@) (%I (vstd!seq.Seq.index.? (UINT 64) (UINT 64) (Poly%vstd!seq.Seq<u64.>. (main!spec_t.mem.impl&%1.region_view.? self~2@ region~6@)) idx~4@))) :pattern ((main!spec_t.mem.impl&%1.spec_read.? self~2@ idx~4@ region~6@)) :qid internal_main!spec_t.mem.impl&__1.spec_read.?_definition :skolemid skolem_internal_main!spec_t.mem.impl&__1.spec_read.?_definition))))
(assert (forall ((self~2@ Poly) (idx~4@ Poly) (region~6@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!spec_t.mem.PageTableMemory.) (has_type idx~4@ NAT) (has_type region~6@ TYPE%main!definitions_t.MemRegion.)) (uInv 64 (main!spec_t.mem.impl&%1.spec_read.? self~2@ idx~4@ region~6@))) :pattern ((main!spec_t.mem.impl&%1.spec_read.? self~2@ idx~4@ region~6@)) :qid internal_main!spec_t.mem.impl&__1.spec_read.?_pre_post_definition :skolemid skolem_internal_main!spec_t.mem.impl&__1.spec_read.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::view_at")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.view_at.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.view_at.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (i~8@ Poly) (pt~10@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~8@ pt~10@) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry (%I (I (main!spec_t.mem.impl&%1.spec_read.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. self~2@))) i~8@ (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. pt~10@)))))) (%I layer~4@))))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~8@ pt~10@)) :qid internal_main!impl_u.l2_impl.impl&__1.view_at.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.view_at.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (i~8@ Poly) (pt~10@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l2_impl.PageTable.) (has_type layer~4@ NAT) (has_type ptr~6@ (UINT SZ)) (has_type i~8@ NAT) (has_type pt~10@ TYPE%main!impl_u.l2_impl.PTDir.)) (has_type (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~8@ pt~10@)) TYPE%main!impl_u.l2_impl.GhostPageDirectoryEntry.)) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~8@ pt~10@)) :qid internal_main!impl_u.l2_impl.impl&__1.view_at.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.view_at.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::ghost_pt_matches_structure")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_matches_structure.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_matches_structure.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.ghost_pt_matches_structure.? self~2@ layer~4@ ptr~6@ pt~8@) (forall ((i~16$ Poly)) (! (=> (has_type i~16$ NAT) (=> (< (%I i~16$) main!definitions_t.X86_NUM_ENTRIES.?) (let ((entry~77$ (main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~16$ pt~8@))) (= ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~77$) (%B (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~16$))))))))) :pattern ((vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~16$) (main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~16$ pt~8@)) :qid user_main__impl_u__l2_impl__PageTable__ghost_pt_matches_structure_108 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__ghost_pt_matches_structure_108))) :pattern ((main!impl_u.l2_impl.impl&%1.ghost_pt_matches_structure.? self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_main!impl_u.l2_impl.impl&__1.ghost_pt_matches_structure.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.ghost_pt_matches_structure.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::ghost_pt_used_regions_rtrancl")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_rtrancl.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_rtrancl.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_rtrancl.? self~2@ layer~4@ ptr~6@ pt~8@) (and (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. pt~8@)))) (forall ((i~25$ Poly) (r~27$ Poly)) (! (=> (and (has_type i~25$ NAT) (has_type r~27$ TYPE%main!definitions_t.MemRegion.)) (=> (and (and (< (%I i~25$) (vstd!seq.Seq.len.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))))) (%B (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~25$)))))) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~25$)))))) r~27$)) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) r~27$))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~25$)))))) r~27$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) r~27$)) :qid user_main__impl_u__l2_impl__PageTable__ghost_pt_used_regions_rtrancl_109 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__ghost_pt_used_regions_rtrancl_109)))) :pattern ((main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_rtrancl.? self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_main!impl_u.l2_impl.impl&__1.ghost_pt_used_regions_rtrancl.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.ghost_pt_used_regions_rtrancl.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::ghost_pt_used_regions_pairwise_disjoint")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_pairwise_disjoint.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_pairwise_disjoint.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_pairwise_disjoint.? self~2@ layer~4@ ptr~6@ pt~8@) (forall ((i~16$ Poly) (j~18$ Poly) (r~20$ Poly)) (! (=> (and (has_type i~16$ NAT) (has_type j~18$ NAT) (has_type r~20$ TYPE%main!definitions_t.MemRegion.)) (=> (and (and (and (and (and (not (= i~16$ j~18$)) (< (%I i~16$) (vstd!seq.Seq.len.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) (%B (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~16$)))))) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~16$)))))) r~20$)) (< (%I j~18$) (vstd!seq.Seq.len.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) (%B (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) j~18$)))))) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) j~18$)))))) r~20$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~16$)))))) r~20$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) j~18$)))))) r~20$)) :qid user_main__impl_u__l2_impl__PageTable__ghost_pt_used_regions_pairwise_disjoint_110 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__ghost_pt_used_regions_pairwise_disjoint_110))) :pattern ((main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_pairwise_disjoint.? self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_main!impl_u.l2_impl.impl&__1.ghost_pt_used_regions_pairwise_disjoint.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.ghost_pt_used_regions_pairwise_disjoint.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::ghost_pt_region_notin_used_regions")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_region_notin_used_regions.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.ghost_pt_region_notin_used_regions.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.ghost_pt_region_notin_used_regions.? self~2@ layer~4@ ptr~6@ pt~8@) (forall ((i~16$ Poly)) (! (=> (has_type i~16$ NAT) (=> (and (< (%I i~16$) (vstd!seq.Seq.len.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))))) (%B (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~16$)))))) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~16$)))))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))))))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~16$)))))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))))) :qid user_main__impl_u__l2_impl__PageTable__ghost_pt_region_notin_used_regions_111 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__ghost_pt_region_notin_used_regions_111))) :pattern ((main!impl_u.l2_impl.impl&%1.ghost_pt_region_notin_used_regions.? self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_main!impl_u.l2_impl.impl&__1.ghost_pt_region_notin_used_regions.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.ghost_pt_region_notin_used_regions.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::entry_at_spec")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.entry_at_spec.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.entry_at_spec.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (i~8@ Poly) (pt~10@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.entry_at_spec.? self~2@ layer~4@ ptr~6@ i~8@ pt~10@) (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry (%I (I (main!spec_t.mem.impl&%1.spec_read.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. self~2@))) i~8@ (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. pt~10@)))))) (%I layer~4@))) :pattern ((main!impl_u.l2_impl.impl&%1.entry_at_spec.? self~2@ layer~4@ ptr~6@ i~8@ pt~10@)) :qid internal_main!impl_u.l2_impl.impl&__1.entry_at_spec.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.entry_at_spec.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (i~8@ Poly) (pt~10@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l2_impl.PageTable.) (has_type layer~4@ NAT) (has_type ptr~6@ (UINT SZ)) (has_type i~8@ NAT) (has_type pt~10@ TYPE%main!impl_u.l2_impl.PTDir.)) (has_type (Poly%main!impl_u.l2_impl.PageDirectoryEntry. (main!impl_u.l2_impl.impl&%1.entry_at_spec.? self~2@ layer~4@ ptr~6@ i~8@ pt~10@)) TYPE%main!impl_u.l2_impl.PageDirectoryEntry.)) :pattern ((main!impl_u.l2_impl.impl&%1.entry_at_spec.? self~2@ layer~4@ ptr~6@ i~8@ pt~10@)) :qid internal_main!impl_u.l2_impl.impl&__1.entry_at_spec.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.entry_at_spec.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::entry_addrs_are_zero_padded")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.entry_addrs_are_zero_padded.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.entry_addrs_are_zero_padded.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.entry_addrs_are_zero_padded.? self~2@ layer~4@ ptr~6@ pt~8@) (forall ((i~16$ Poly)) (! (=> (has_type i~16$ NAT) (=> (< (%I i~16$) main!definitions_t.X86_NUM_ENTRIES.?) (let ((entry~43$ (main!impl_u.l2_impl.impl&%1.entry_at_spec.? self~2@ layer~4@ ptr~6@ i~16$ pt~8@))) (and (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. entry~43$))) (< 0 (main!impl_u.l2_impl.impl&%0.layer.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. entry~43$)))) (main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. entry~43$)))))) :pattern ((main!impl_u.l2_impl.impl&%1.entry_at_spec.? self~2@ layer~4@ ptr~6@ i~16$ pt~8@)) :qid user_main__impl_u__l2_impl__PageTable__entry_addrs_are_zero_padded_112 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__entry_addrs_are_zero_padded_112))) :pattern ((main!impl_u.l2_impl.impl&%1.entry_addrs_are_zero_padded.? self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_main!impl_u.l2_impl.impl&__1.entry_addrs_are_zero_padded.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.entry_addrs_are_zero_padded.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::directories_obey_invariant_at")
(declare-fun req%main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%148 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (= (req%main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at. self~2@ layer~4@ ptr~6@ pt~8@) (=> %%global_location_label%%148 (and (main!impl_u.l2_impl.impl&%1.well_formed.? self~2@ ptr~6@) (main!impl_u.l2_impl.impl&%1.layer_in_range.? self~2@ layer~4@)))) :pattern ((req%main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at. self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.directories_obey_invariant_at._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.directories_obey_invariant_at._definition)))
(set-info :comment ";; Function-Termination main::impl_u::l2_impl::PageTable::directories_obey_invariant_at")
(set-info :comment ";; Function-Termination main::impl_u::l2_impl::PageTable::inv_at")
(set-info :comment ";; Function-Decl-Check-Recommends main::impl_u::l2_impl::PageTable::inv_at")
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::directories_obey_invariant_at")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.))
(declare-const fuel_nat%main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at. Fuel)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l2_impl.impl&%1.rec%directories_obey_invariant_at.? self~2@ layer~4@ ptr~6@ pt~8@ fuel%@) (main!impl_u.l2_impl.impl&%1.rec%directories_obey_invariant_at.? self~2@ layer~4@ ptr~6@ pt~8@ zero)) :pattern ((main!impl_u.l2_impl.impl&%1.rec%directories_obey_invariant_at.? self~2@ layer~4@ ptr~6@ pt~8@ fuel%@)) :qid internal_main!impl_u.l2_impl.impl&__1.directories_obey_invariant_at._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.directories_obey_invariant_at._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly) (fuel%@ Fuel)) (! (=> (and (main!impl_u.l2_impl.impl&%1.well_formed.? self~2@ ptr~6@) (main!impl_u.l2_impl.impl&%1.layer_in_range.? self~2@ layer~4@)) (= (main!impl_u.l2_impl.impl&%1.rec%directories_obey_invariant_at.? self~2@ layer~4@ ptr~6@ pt~8@ (succ fuel%@)) (forall ((i~52$ Poly)) (! (=> (has_type i~52$ NAT) (=> (< (%I i~52$) main!definitions_t.X86_NUM_ENTRIES.?) (let ((entry~79$ (main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~52$ pt~8@))) (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~79$) (main!impl_u.l2_impl.impl&%1.rec%inv_at.? self~2@ (I (nClip (+ (%I layer~4@) 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~79$)))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) i~52$))) fuel%@))))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~52$ pt~8@)) :qid user_main__impl_u__l2_impl__PageTable__directories_obey_invariant_at_114 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__directories_obey_invariant_at_114)))) :pattern ((main!impl_u.l2_impl.impl&%1.rec%directories_obey_invariant_at.? self~2@ layer~4@ ptr~6@ pt~8@ (succ fuel%@))) :qid internal_main!impl_u.l2_impl.impl&__1.directories_obey_invariant_at._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.directories_obey_invariant_at._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (=> (and (main!impl_u.l2_impl.impl&%1.well_formed.? self~2@ ptr~6@) (main!impl_u.l2_impl.impl&%1.layer_in_range.? self~2@ layer~4@)) (= (main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? self~2@ layer~4@ ptr~6@ pt~8@) (main!impl_u.l2_impl.impl&%1.rec%directories_obey_invariant_at.? self~2@ layer~4@ ptr~6@ pt~8@ (succ (succ fuel_nat%main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.))))) :pattern ((main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_main!impl_u.l2_impl.impl&__1.directories_obey_invariant_at.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.directories_obey_invariant_at.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::inv_at")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.inv_at.))
(declare-const fuel_nat%main!impl_u.l2_impl.impl&%1.inv_at. Fuel)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l2_impl.impl&%1.rec%inv_at.? self~2@ layer~4@ ptr~6@ pt~8@ fuel%@) (main!impl_u.l2_impl.impl&%1.rec%inv_at.? self~2@ layer~4@ ptr~6@ pt~8@ zero)) :pattern ((main!impl_u.l2_impl.impl&%1.rec%inv_at.? self~2@ layer~4@ ptr~6@ pt~8@ fuel%@)) :qid internal_main!impl_u.l2_impl.impl&__1.inv_at._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.inv_at._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l2_impl.impl&%1.rec%inv_at.? self~2@ layer~4@ ptr~6@ pt~8@ (succ fuel%@)) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (uClip SZ (EucMod (%I ptr~6@) main!definitions_t.PAGE_SIZE.?)) 0) (main!impl_u.l2_impl.impl&%1.well_formed.? self~2@ ptr~6@)) (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. self~2@))))) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. self~2@))))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))))) (= (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))))) (%I ptr~6@))) (= (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))))) main!definitions_t.PAGE_SIZE.?)) (= (vstd!seq.Seq.len.? (UINT 64) (UINT 64) (Poly%vstd!seq.Seq<u64.>. (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. self~2@))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) (vstd!seq.Seq.len.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) (main!impl_u.l2_impl.impl&%1.layer_in_range.? self~2@ layer~4@)) (= (vstd!seq.Seq.len.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~8@)))) main!definitions_t.X86_NUM_ENTRIES.?)) (main!impl_u.l2_impl.impl&%1.rec%directories_obey_invariant_at.? self~2@ layer~4@ ptr~6@ pt~8@ fuel%@)) (main!impl_u.l2_impl.impl&%1.ghost_pt_matches_structure.? self~2@ layer~4@ ptr~6@ pt~8@)) (main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_rtrancl.? self~2@ layer~4@ ptr~6@ pt~8@)) (main!impl_u.l2_impl.impl&%1.ghost_pt_used_regions_pairwise_disjoint.? self~2@ layer~4@ ptr~6@ pt~8@)) (main!impl_u.l2_impl.impl&%1.ghost_pt_region_notin_used_regions.? self~2@ layer~4@ ptr~6@ pt~8@)) (vstd!set.impl&%0.subset_of.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. pt~8@))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. self~2@))))))) (main!impl_u.l2_impl.impl&%1.entry_addrs_are_zero_padded.? self~2@ layer~4@ ptr~6@ pt~8@))) :pattern ((main!impl_u.l2_impl.impl&%1.rec%inv_at.? self~2@ layer~4@ ptr~6@ pt~8@ (succ fuel%@))) :qid internal_main!impl_u.l2_impl.impl&__1.inv_at._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.inv_at._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.inv_at.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~8@) (main!impl_u.l2_impl.impl&%1.rec%inv_at.? self~2@ layer~4@ ptr~6@ pt~8@ (succ (succ fuel_nat%main!impl_u.l2_impl.impl&%1.inv_at.)))) :pattern ((main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_main!impl_u.l2_impl.impl&__1.inv_at.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.inv_at.?_definition))))
(set-info :comment ";; Function-Decl-Check-Recommends main::impl_u::l2_impl::PageTable::inv")
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::inv")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.inv.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.inv.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.inv.? self~2@) (let ((cr3~10$ (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (and (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (%Poly%main!impl_u.l2_impl.PageTable. self~2@))))) (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. cr3~10$))) (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ (I 0) (I (main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. (Poly%main!definitions_t.MemRegionExec. cr3~10$)))) (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (%Poly%main!impl_u.l2_impl.PageTable. self~2@))))))) :pattern ((main!impl_u.l2_impl.impl&%1.inv.? self~2@)) :qid internal_main!impl_u.l2_impl.impl&__1.inv.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.inv.?_definition))))
(set-info :comment ";; Function-Axioms main::definitions_t::WORD_SIZE")
(assert (fuel_bool_default fuel%main!definitions_t.WORD_SIZE.))
(assert (=> (fuel_bool fuel%main!definitions_t.WORD_SIZE.) (= main!definitions_t.WORD_SIZE.? 8)))
(assert (uInv SZ main!definitions_t.WORD_SIZE.?))
(set-info :comment ";; Function-Specs main::spec_t::mem::PageTableMemory::read")
(declare-fun req%main!spec_t.mem.impl&%1.read. (main!spec_t.mem.PageTableMemory. Int Int main!definitions_t.MemRegion.) Bool)
(declare-const %%global_location_label%%149 Bool)
(declare-const %%global_location_label%%150 Bool)
(declare-const %%global_location_label%%151 Bool)
(declare-const %%global_location_label%%152 Bool)
(assert (forall ((self~2@ main!spec_t.mem.PageTableMemory.) (pbase~4@ Int) (idx~6@ Int) (region~8@ main!definitions_t.MemRegion.)) (! (= (req%main!spec_t.mem.impl&%1.read. self~2@ pbase~4@ idx~6@ region~8@) (and (=> %%global_location_label%%149 (= pbase~4@ (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. region~8@))))) (=> %%global_location_label%%150 (main!definitions_t.aligned.? (I pbase~4@) (I main!definitions_t.WORD_SIZE.?))) (=> %%global_location_label%%151 (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. self~2@))) (Poly%main!definitions_t.MemRegion. region~8@))) (=> %%global_location_label%%152 (< idx~6@ 512)))) :pattern ((req%main!spec_t.mem.impl&%1.read. self~2@ pbase~4@ idx~6@ region~8@)) :qid internal_req__main!spec_t.mem.impl&__1.read._definition :skolemid skolem_internal_req__main!spec_t.mem.impl&__1.read._definition)))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::read")
(declare-fun ens%main!spec_t.mem.impl&%1.read. (main!spec_t.mem.PageTableMemory. Int Int main!definitions_t.MemRegion. Int) Bool)
(assert (forall ((self~2@ main!spec_t.mem.PageTableMemory.) (pbase~4@ Int) (idx~6@ Int) (region~8@ main!definitions_t.MemRegion.) (res~78@ Int)) (! (= (ens%main!spec_t.mem.impl&%1.read. self~2@ pbase~4@ idx~6@ region~8@ res~78@) (and (uInv 64 res~78@) (= res~78@ (main!spec_t.mem.impl&%1.spec_read.? (Poly%main!spec_t.mem.PageTableMemory. self~2@) (I idx~6@) (Poly%main!definitions_t.MemRegion. region~8@))))) :pattern ((ens%main!spec_t.mem.impl&%1.read. self~2@ pbase~4@ idx~6@ region~8@ res~78@)) :qid internal_ens__main!spec_t.mem.impl&__1.read._definition :skolemid skolem_internal_ens__main!spec_t.mem.impl&__1.read._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::entry_at")
(declare-fun req%main!impl_u.l2_impl.impl&%1.entry_at. (main!impl_u.l2_impl.PageTable. Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%153 Bool)
(declare-const %%global_location_label%%154 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (i~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.entry_at. self~2@ layer~4@ ptr~6@ i~8@ pt~10@) (and (=> %%global_location_label%%153 (< i~8@ 512)) (=> %%global_location_label%%154 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.entry_at. self~2@ layer~4@ ptr~6@ i~8@ pt~10@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.entry_at._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.entry_at._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::entry_at")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.entry_at. (main!impl_u.l2_impl.PageTable. Int Int Int main!impl_u.l2_impl.PTDir. main!impl_u.l2_impl.PageDirectoryEntry.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (i~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.) (res~55@ main!impl_u.l2_impl.PageDirectoryEntry.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.entry_at. self~2@ layer~4@ ptr~6@ i~8@ pt~10@ res~55@) (and (has_type (Poly%main!impl_u.l2_impl.PageDirectoryEntry. res~55@) TYPE%main!impl_u.l2_impl.PageDirectoryEntry.) (= (main!impl_u.l2_impl.PageDirectoryEntry./PageDirectoryEntry/layer (%Poly%main!impl_u.l2_impl.PageDirectoryEntry. (Poly%main!impl_u.l2_impl.PageDirectoryEntry. res~55@))) layer~4@) (= (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. res~55@)) (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I i~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))) (main!impl_u.l2_impl.impl&%0.addr_is_zero_padded.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. res~55@)) (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. res~55@))) (< 0 (main!impl_u.l2_impl.impl&%0.layer.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. res~55@)))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.entry_at. self~2@ layer~4@ ptr~6@ i~8@ pt~10@ res~55@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.entry_at._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.entry_at._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::empty_at")
(declare-fun req%main!impl_u.l2_impl.impl&%1.empty_at. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%155 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (= (req%main!impl_u.l2_impl.impl&%1.empty_at. self~2@ layer~4@ ptr~6@ pt~8@) (=> %%global_location_label%%155 (main!impl_u.l2_impl.impl&%1.well_formed.? self~2@ ptr~6@))) :pattern ((req%main!impl_u.l2_impl.impl&%1.empty_at. self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.empty_at._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.empty_at._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::empty_at")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.empty_at.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.empty_at.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (pt~8@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.empty_at.? self~2@ layer~4@ ptr~6@ pt~8@) (forall ((i~29$ Poly)) (! (=> (has_type i~29$ NAT) (=> (< (%I i~29$) main!definitions_t.X86_NUM_ENTRIES.?) ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty) (main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~29$ pt~8@)))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ i~29$ pt~8@)) :qid user_main__impl_u__l2_impl__PageTable__empty_at_115 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__empty_at_115))) :pattern ((main!impl_u.l2_impl.impl&%1.empty_at.? self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_main!impl_u.l2_impl.impl&__1.empty_at.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.empty_at.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::interp_at_entry")
(declare-fun req%main!impl_u.l2_impl.impl&%1.interp_at_entry. (Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%156 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (idx~10@ Poly) (pt~12@ Poly)) (! (= (req%main!impl_u.l2_impl.impl&%1.interp_at_entry. self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@) (=> %%global_location_label%%156 (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~12@))) :pattern ((req%main!impl_u.l2_impl.impl&%1.interp_at_entry. self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.interp_at_entry._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.interp_at_entry._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::interp_at_aux")
(declare-fun req%main!impl_u.l2_impl.impl&%1.interp_at_aux. (Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%157 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (init~10@ Poly) (pt~12@ Poly)) (! (= (req%main!impl_u.l2_impl.impl&%1.interp_at_aux. self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@) (=> %%global_location_label%%157 (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~12@))) :pattern ((req%main!impl_u.l2_impl.impl&%1.interp_at_aux. self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.interp_at_aux._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.interp_at_aux._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::interp_at")
(declare-fun req%main!impl_u.l2_impl.impl&%1.interp_at. (Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%158 Bool)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (pt~10@ Poly)) (! (= (req%main!impl_u.l2_impl.impl&%1.interp_at. self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@) (=> %%global_location_label%%158 (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~10@))) :pattern ((req%main!impl_u.l2_impl.impl&%1.interp_at. self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.interp_at._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.interp_at._definition)))
(set-info :comment ";; Function-Termination main::impl_u::l2_impl::PageTable::interp_at_entry")
(set-info :comment ";; Function-Termination main::impl_u::l2_impl::PageTable::interp_at_aux")
(set-info :comment ";; Function-Termination main::impl_u::l2_impl::PageTable::interp_at")
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::interp_at_entry")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.interp_at_entry.))
(declare-const fuel_nat%main!impl_u.l2_impl.impl&%1.interp_at_entry. Fuel)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (idx~10@ Poly) (pt~12@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l2_impl.impl&%1.rec%interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@ fuel%@) (main!impl_u.l2_impl.impl&%1.rec%interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@ zero)) :pattern ((main!impl_u.l2_impl.impl&%1.rec%interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@ fuel%@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at_entry._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at_entry._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (idx~10@ Poly) (pt~12@ Poly) (fuel%@ Fuel)) (! (=> (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~12@) (= (main!impl_u.l2_impl.impl&%1.rec%interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@ (succ fuel%@)) (let ((tmp%%1$ (main!impl_u.l2_impl.impl&%1.view_at.? self~2@ layer~4@ ptr~6@ idx~10@ pt~12@))) (ite ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) tmp%%1$) (let ((dir_addr~68$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) (let ((entry_base~84$ (main!impl_u.indexing.entry_base_from_index.? base_vaddr~8@ idx~10@ (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) layer~4@))))) (main!impl_u.l1.NodeEntry./Directory (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.rec%interp_at.? self~2@ (I (nClip (+ (%I layer~4@) 1))) (I dir_addr~68$) (I entry_base~84$) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. pt~12@))) idx~10@))) fuel%@)))))) (ite ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) tmp%%1$) (let ((addr~129$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) (let ((flag_RW~131$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_RW (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) (let ((flag_US~133$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_US (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) (let ((flag_XD~135$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/flag_XD (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) (main!impl_u.l1.NodeEntry./Page (%Poly%main!definitions_t.PageTableEntry. (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.PageTableEntry./PageTableEntry (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.MemRegion./MemRegion (%I (I addr~129$)) (%I (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) layer~4@)))))) (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. (main!definitions_t.Flags./Flags (%B (B flag_RW~131$)) (%B (B (not flag_US~133$))) (%B (B flag_XD~135$))))))))))))) main!impl_u.l1.NodeEntry./Empty))))) :pattern ((main!impl_u.l2_impl.impl&%1.rec%interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@ (succ fuel%@))) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at_entry._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at_entry._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.interp_at_entry.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (idx~10@ Poly) (pt~12@ Poly)) (! (=> (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~12@) (= (main!impl_u.l2_impl.impl&%1.interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@) (main!impl_u.l2_impl.impl&%1.rec%interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@ (succ (succ (succ fuel_nat%main!impl_u.l2_impl.impl&%1.interp_at_entry.)))))) :pattern ((main!impl_u.l2_impl.impl&%1.interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at_entry.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at_entry.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (idx~10@ Poly) (pt~12@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l2_impl.PageTable.) (has_type layer~4@ NAT) (has_type ptr~6@ (UINT SZ)) (has_type base_vaddr~8@ NAT) (has_type idx~10@ NAT) (has_type pt~12@ TYPE%main!impl_u.l2_impl.PTDir.)) (has_type (Poly%main!impl_u.l1.NodeEntry. (main!impl_u.l2_impl.impl&%1.interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@)) TYPE%main!impl_u.l1.NodeEntry.)) :pattern ((main!impl_u.l2_impl.impl&%1.interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ idx~10@ pt~12@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at_entry.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at_entry.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::interp_at_aux")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.interp_at_aux.))
(declare-const fuel_nat%main!impl_u.l2_impl.impl&%1.interp_at_aux. Fuel)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (init~10@ Poly) (pt~12@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l2_impl.impl&%1.rec%interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@ fuel%@) (main!impl_u.l2_impl.impl&%1.rec%interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@ zero)) :pattern ((main!impl_u.l2_impl.impl&%1.rec%interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@ fuel%@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at_aux._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at_aux._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (init~10@ Poly) (pt~12@ Poly) (fuel%@ Fuel)) (! (=> (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~12@) (= (main!impl_u.l2_impl.impl&%1.rec%interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@ (succ fuel%@)) (ite (>= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. init~10@) main!definitions_t.X86_NUM_ENTRIES.?) (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (let ((entry~95$ (main!impl_u.l2_impl.impl&%1.rec%interp_at_entry.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ (I (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. init~10@)) pt~12@ fuel%@))) (main!impl_u.l2_impl.impl&%1.rec%interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ (vstd!seq.Seq.add.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. init~10@ (vstd!seq.Seq.push.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.empty.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry.) (Poly%main!impl_u.l1.NodeEntry. entry~95$))) pt~12@ fuel%@))))) :pattern ((main!impl_u.l2_impl.impl&%1.rec%interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@ (succ fuel%@))) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at_aux._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at_aux._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.interp_at_aux.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (init~10@ Poly) (pt~12@ Poly)) (! (=> (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~12@) (= (main!impl_u.l2_impl.impl&%1.interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@) (main!impl_u.l2_impl.impl&%1.rec%interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@ (succ fuel_nat%main!impl_u.l2_impl.impl&%1.interp_at_aux.)))) :pattern ((main!impl_u.l2_impl.impl&%1.interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at_aux.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at_aux.?_definition))))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::interp_at")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.interp_at.))
(declare-const fuel_nat%main!impl_u.l2_impl.impl&%1.interp_at. Fuel)
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (pt~10@ Poly) (fuel%@ Fuel)) (! (= (main!impl_u.l2_impl.impl&%1.rec%interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@ fuel%@) (main!impl_u.l2_impl.impl&%1.rec%interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@ zero)) :pattern ((main!impl_u.l2_impl.impl&%1.rec%interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@ fuel%@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at._fuel_to_zero_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at._fuel_to_zero_definition)))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (pt~10@ Poly) (fuel%@ Fuel)) (! (=> (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~10@) (= (main!impl_u.l2_impl.impl&%1.rec%interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@ (succ fuel%@)) (main!impl_u.l1.Directory./Directory (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l2_impl.impl&%1.rec%interp_at_aux.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ (vstd!seq.Seq.empty.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry.) pt~10@ fuel%@))) (%I layer~4@) (%I base_vaddr~8@) (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?))))) :pattern ((main!impl_u.l2_impl.impl&%1.rec%interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@ (succ fuel%@))) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at._fuel_to_body_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at._fuel_to_body_definition)))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.interp_at.) (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (pt~10@ Poly)) (! (=> (main!impl_u.l2_impl.impl&%1.inv_at.? self~2@ layer~4@ ptr~6@ pt~10@) (= (main!impl_u.l2_impl.impl&%1.interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@) (main!impl_u.l2_impl.impl&%1.rec%interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@ (succ (succ (succ fuel_nat%main!impl_u.l2_impl.impl&%1.interp_at.)))))) :pattern ((main!impl_u.l2_impl.impl&%1.interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at.?_definition))))
(assert (forall ((self~2@ Poly) (layer~4@ Poly) (ptr~6@ Poly) (base_vaddr~8@ Poly) (pt~10@ Poly)) (! (=> (and (has_type self~2@ TYPE%main!impl_u.l2_impl.PageTable.) (has_type layer~4@ NAT) (has_type ptr~6@ (UINT SZ)) (has_type base_vaddr~8@ NAT) (has_type pt~10@ TYPE%main!impl_u.l2_impl.PTDir.)) (has_type (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@)) TYPE%main!impl_u.l1.Directory.)) :pattern ((main!impl_u.l2_impl.impl&%1.interp_at.? self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp_at.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp_at.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::interp")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.interp.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.interp.) (forall ((self~2@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.interp.? self~2@) (let ((cr3~10$ (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (main!impl_u.l2_impl.impl&%1.interp_at.? self~2@ (I 0) (I (main!definitions_t.MemRegionExec./MemRegionExec/base (%Poly%main!definitions_t.MemRegionExec. (Poly%main!definitions_t.MemRegionExec. cr3~10$)))) (I 0) (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (%Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) :pattern ((main!impl_u.l2_impl.impl&%1.interp.? self~2@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!impl_u.l2_impl.PageTable.) (has_type (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? self~2@)) TYPE%main!impl_u.l1.Directory.)) :pattern ((main!impl_u.l2_impl.impl&%1.interp.? self~2@)) :qid internal_main!impl_u.l2_impl.impl&__1.interp.?_pre_post_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.interp.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_inv_at_different_memory")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%159 Bool)
(declare-const %%global_location_label%%160 Bool)
(declare-const %%global_location_label%%161 Bool)
(declare-const %%global_location_label%%162 Bool)
(declare-const %%global_location_label%%163 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (other~4@ main!impl_u.l2_impl.PageTable.) (layer~6@ Int) (ptr~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@ other~4@ layer~6@ ptr~8@ pt~10@) (and (=> %%global_location_label%%159 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~6@) (I ptr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))) (=> %%global_location_label%%160 (forall ((r~34$ Poly)) (! (=> (has_type r~34$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~10@)))) r~34$) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) r~34$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. other~4@)))) r~34$)))) :pattern ((main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) r~34$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_inv_at_different_memory_118 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_inv_at_different_memory_118))) (=> %%global_location_label%%161 (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. other~4@)))))) (=> %%global_location_label%%162 (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. other~4@)))))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~10@)))))) (=> %%global_location_label%%163 (vstd!set.impl&%0.subset_of.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~10@)))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. other~4@)))))))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@ other~4@ layer~6@ ptr~8@ pt~10@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_inv_at_different_memory._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_inv_at_different_memory._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_inv_at_different_memory")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (other~4@ main!impl_u.l2_impl.PageTable.) (layer~6@ Int) (ptr~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@ other~4@ layer~6@ ptr~8@ pt~10@) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. other~4@) (I layer~6@) (I ptr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@ other~4@ layer~6@ ptr~8@ pt~10@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_inv_at_different_memory._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_inv_at_different_memory._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_interp_at_aux_facts")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. (main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%164 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base_vaddr~8@ Int) (init~10@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (pt~12@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@) (=> %%global_location_label%%164 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_interp_at_aux_facts._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_interp_at_aux_facts._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_interp_at_aux_facts")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. (main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base_vaddr~8@ Int) (init~10@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (pt~12@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@) (and (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (ite (> (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@)) main!definitions_t.X86_NUM_ENTRIES.?) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@)) main!definitions_t.X86_NUM_ENTRIES.?)) (forall ((j~92$ Poly)) (! (=> (has_type j~92$ NAT) (=> (< (%I j~92$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@))) (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) j~92$) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) j~92$)))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) j~92$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_interp_at_aux_facts_119 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_interp_at_aux_facts_119)) (let ((res~170$ (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (and (forall ((j~179$ Poly)) (! (=> (has_type j~179$ NAT) (=> (and (<= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@)) (%I j~179$)) (< (%I j~179$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~170$)))) (let ((tmp%%1$ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) j~179$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (ite ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) tmp%%1$) (let ((dir_addr~239$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) (and ((_ is main!impl_u.l1.NodeEntry./Directory) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~170$) j~179$))) (= (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~170$) j~179$))) (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I (nClip (+ layer~4@ 1))) (I dir_addr~239$) (I (main!impl_u.indexing.entry_base_from_index.? (I base_vaddr~8@) j~179$ (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) (I layer~4@))))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) j~179$))))))) (ite ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) tmp%%1$) (let ((addr~336$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) (and ((_ is main!impl_u.l1.NodeEntry./Page) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~170$) j~179$))) (= (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (Poly%main!definitions_t.PageTableEntry. (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~170$) j~179$))))))))) addr~336$))) ((_ is main!impl_u.l1.NodeEntry./Empty) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~170$) j~179$)))))))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~170$) j~179$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_interp_at_aux_facts_120 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_interp_at_aux_facts_120)) (forall ((j~410$ Poly)) (! (=> (has_type j~410$ NAT) (=> (and (<= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@)) (%I j~410$)) (< (%I j~410$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~170$)))) (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~170$) j~410$)) (main!impl_u.l2_impl.impl&%1.interp_at_entry.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) j~410$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) :pattern ((main!impl_u.l2_impl.impl&%1.interp_at_entry.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) j~410$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :qid user_main__impl_u__l2_impl__PageTable__lemma_interp_at_aux_facts_121 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_interp_at_aux_facts_121)))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@ layer~4@ ptr~6@ base_vaddr~8@ init~10@ pt~12@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_interp_at_aux_facts._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_interp_at_aux_facts._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_interp_at_entry_different_memory")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int Int Int main!impl_u.l2_impl.PTDir. main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%165 Bool)
(declare-const %%global_location_label%%166 Bool)
(declare-const %%global_location_label%%167 Bool)
(declare-const %%global_location_label%%168 Bool)
(declare-const %%global_location_label%%169 Bool)
(declare-const %%global_location_label%%170 Bool)
(declare-const %%global_location_label%%171 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (other~4@ main!impl_u.l2_impl.PageTable.) (layer~6@ Int) (ptr~8@ Int) (base~10@ Int) (idx~12@ Int) (pt1~14@ main!impl_u.l2_impl.PTDir.) (pt2~16@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@ other~4@ layer~6@ ptr~8@ base~10@ idx~12@ pt1~14@ pt2~16@) (and (=> %%global_location_label%%165 (< idx~12@ main!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%166 (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt2~16@))) (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt1~14@))))) (=> %%global_location_label%%167 (= (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt2~16@)))) (I idx~12@)) (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt1~14@)))) (I idx~12@)))) (=> %%global_location_label%%168 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~6@) (I ptr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt1~14@))) (=> %%global_location_label%%169 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. other~4@) (I layer~6@) (I ptr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt2~16@))) (=> %%global_location_label%%170 (= (main!spec_t.mem.impl&%1.spec_read.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (I idx~12@) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt1~14@))))) (main!spec_t.mem.impl&%1.spec_read.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. other~4@)))) (I idx~12@) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt2~16@))))))) (=> %%global_location_label%%171 (=> (%B (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt2~16@)))) (I idx~12@)))))) (forall ((r~149$ Poly)) (! (=> (has_type r~149$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt2~16@)))) (I idx~12@))))))) r~149$) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) r~149$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. other~4@)))) r~149$)))) :pattern ((main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) r~149$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_interp_at_entry_different_memory_122 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_interp_at_entry_different_memory_122)))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@ other~4@ layer~6@ ptr~8@ base~10@ idx~12@ pt1~14@ pt2~16@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_interp_at_entry_different_memory._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_interp_at_entry_different_memory._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_interp_at_entry_different_memory")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int Int Int main!impl_u.l2_impl.PTDir. main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (other~4@ main!impl_u.l2_impl.PageTable.) (layer~6@ Int) (ptr~8@ Int) (base~10@ Int) (idx~12@ Int) (pt1~14@ main!impl_u.l2_impl.PTDir.) (pt2~16@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@ other~4@ layer~6@ ptr~8@ base~10@ idx~12@ pt1~14@ pt2~16@) (= (main!impl_u.l2_impl.impl&%1.interp_at_entry.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~6@) (I ptr~8@) (I base~10@) (I idx~12@) (Poly%main!impl_u.l2_impl.PTDir. pt1~14@)) (main!impl_u.l2_impl.impl&%1.interp_at_entry.? (Poly%main!impl_u.l2_impl.PageTable. other~4@) (I layer~6@) (I ptr~8@) (I base~10@) (I idx~12@) (Poly%main!impl_u.l2_impl.PTDir. pt2~16@)))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@ other~4@ layer~6@ ptr~8@ base~10@ idx~12@ pt1~14@ pt2~16@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_interp_at_entry_different_memory._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_interp_at_entry_different_memory._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_interp_at_facts")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_facts. (main!impl_u.l2_impl.PageTable. Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%172 Bool)
(declare-const %%global_location_label%%173 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base_vaddr~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_facts. self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@) (and (=> %%global_location_label%%172 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))) (=> %%global_location_label%%173 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_facts. self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_interp_at_facts._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_interp_at_facts._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_interp_at_facts")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_facts. (main!impl_u.l2_impl.PageTable. Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base_vaddr~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_facts. self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@) (and (= (main!impl_u.l1.Directory./Directory/base_vaddr (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))))) base_vaddr~8@) (= (main!impl_u.l1.impl&%0.upper_vaddr.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@)))) (main!definitions_t.impl&%7.upper_vaddr.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) (I layer~4@) (I base_vaddr~8@))) (= (main!impl_u.l0.PageTableContents./PageTableContents/lower (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))))))) base_vaddr~8@) (= (main!impl_u.l0.PageTableContents./PageTableContents/upper (%Poly%main!impl_u.l0.PageTableContents. (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))))))) (main!definitions_t.impl&%7.upper_vaddr.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) (I layer~4@) (I base_vaddr~8@))) (let ((res~160$ (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@)))) (and (forall ((j~169$ Poly)) (! (=> (has_type j~169$ NAT) (=> (< (%I j~169$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~160$)))))) (let ((tmp%%1$ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) j~169$ (Poly%main!impl_u.l2_impl.PTDir. pt~10@)))) (ite ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) tmp%%1$) (let ((dir_addr~222$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) (and ((_ is main!impl_u.l1.NodeEntry./Directory) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~160$)))) j~169$))) (= (main!impl_u.l1.NodeEntry./Directory/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~160$)))) j~169$))) (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I (nClip (+ layer~4@ 1))) (I dir_addr~222$) (I (main!impl_u.indexing.entry_base_from_index.? (I base_vaddr~8@) j~169$ (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) (I layer~4@))))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~10@)))) j~169$))))))) (ite ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Page) tmp%%1$) (let ((addr~321$ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Page/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. tmp%%1$))))) (and ((_ is main!impl_u.l1.NodeEntry./Page) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~160$)))) j~169$))) (= (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. (Poly%main!definitions_t.PageTableEntry. (main!impl_u.l1.NodeEntry./Page/_0 (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~160$)))) j~169$))))))))) addr~321$))) ((_ is main!impl_u.l1.NodeEntry./Empty) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~160$)))) j~169$)))))))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~160$)))) j~169$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_interp_at_facts_123 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_interp_at_facts_123)) (forall ((j~398$ Poly)) (! (=> (has_type j~398$ NAT) (=> (< (%I j~398$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~160$)))))) (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~160$)))) j~398$)) (main!impl_u.l2_impl.impl&%1.interp_at_entry.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) j~398$ (Poly%main!impl_u.l2_impl.PTDir. pt~10@))))) :pattern ((main!impl_u.l2_impl.impl&%1.interp_at_entry.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base_vaddr~8@) j~398$ (Poly%main!impl_u.l2_impl.PTDir. pt~10@))) :qid user_main__impl_u__l2_impl__PageTable__lemma_interp_at_facts_124 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_interp_at_facts_124)))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_facts. self~2@ layer~4@ ptr~6@ base_vaddr~8@ pt~10@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_interp_at_facts._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_interp_at_facts._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::MAX_BASE")
(assert (fuel_bool_default fuel%main!definitions_t.MAX_BASE.))
(assert (=> (fuel_bool fuel%main!definitions_t.MAX_BASE.) (= main!definitions_t.MAX_BASE.? (nClip (Mul main!definitions_t.X86_MAX_ENTRY_SIZE.? main!definitions_t.X86_NUM_ENTRIES.?)))))
(assert (<= 0 main!definitions_t.MAX_BASE.?))
(set-info :comment ";; Function-Axioms main::definitions_t::PageTableEntryExec::view")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%3.view.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%3.view.) (forall ((self~2@ Poly)) (! (= (main!definitions_t.impl&%3.view.? self~2@) (main!definitions_t.PageTableEntry./PageTableEntry (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/frame (%Poly%main!definitions_t.PageTableEntryExec. self~2@)))))) (%Poly%main!definitions_t.Flags. (Poly%main!definitions_t.Flags. (main!definitions_t.PageTableEntryExec./PageTableEntryExec/flags (%Poly%main!definitions_t.PageTableEntryExec. self~2@)))))) :pattern ((main!definitions_t.impl&%3.view.? self~2@)) :qid internal_main!definitions_t.impl&__3.view.?_definition :skolemid skolem_internal_main!definitions_t.impl&__3.view.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!definitions_t.PageTableEntryExec.) (has_type (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? self~2@)) TYPE%main!definitions_t.PageTableEntry.)) :pattern ((main!definitions_t.impl&%3.view.? self~2@)) :qid internal_main!definitions_t.impl&__3.view.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.impl&__3.view.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::ArchLayerExec::view")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%5.view.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%5.view.) (forall ((self~2@ Poly)) (! (= (main!definitions_t.impl&%5.view.? self~2@) (main!definitions_t.ArchLayer./ArchLayer (%I (I (main!definitions_t.ArchLayerExec./ArchLayerExec/entry_size (%Poly%main!definitions_t.ArchLayerExec. self~2@)))) (%I (I (main!definitions_t.ArchLayerExec./ArchLayerExec/num_entries (%Poly%main!definitions_t.ArchLayerExec. self~2@)))))) :pattern ((main!definitions_t.impl&%5.view.? self~2@)) :qid internal_main!definitions_t.impl&__5.view.?_definition :skolemid skolem_internal_main!definitions_t.impl&__5.view.?_definition))))
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!definitions_t.ArchLayerExec.) (has_type (Poly%main!definitions_t.ArchLayer. (main!definitions_t.impl&%5.view.? self~2@)) TYPE%main!definitions_t.ArchLayer.)) :pattern ((main!definitions_t.impl&%5.view.? self~2@)) :qid internal_main!definitions_t.impl&__5.view.?_pre_post_definition :skolemid skolem_internal_main!definitions_t.impl&__5.view.?_pre_post_definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::ArchExec::view")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%6.view.))
(declare-fun %%lambda%%5 () %%Function%%)
(assert (forall ((i~20$ Poly) (l~22$ Poly)) (! (= (%%apply%%1 %%lambda%%5 i~20$ l~22$) (Poly%main!definitions_t.ArchLayer. (main!definitions_t.impl&%5.view.? l~22$))) :pattern ((%%apply%%1 %%lambda%%5 i~20$ l~22$)))))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%6.view.) (forall ((self~2@ Poly)) (! (= (main!definitions_t.impl&%6.view.? self~2@) (main!definitions_t.Arch./Arch (%Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (vstd!seq_lib.impl&%0.map.? TYPE%main!definitions_t.ArchLayerExec. TYPE%main!definitions_t.ArchLayerExec. TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (vstd!std_specs.vec.VecAdditionalSpecFns.view.? (TYPE%alloc!vec.Vec. TYPE%main!definitions_t.ArchLayerExec. TYPE%alloc!alloc.Global.) (TYPE%alloc!vec.Vec. TYPE%main!definitions_t.ArchLayerExec. TYPE%alloc!alloc.Global.) TYPE%main!definitions_t.ArchLayerExec. TYPE%main!definitions_t.ArchLayerExec. (Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. (main!definitions_t.ArchExec./ArchExec/layers (%Poly%main!definitions_t.ArchExec. self~2@)))) (Poly%fun%2. (mk_fun %%lambda%%5)))))) :pattern ((main!definitions_t.impl&%6.view.? self~2@)) :qid internal_main!definitions_t.impl&__6.view.?_definition :skolemid skolem_internal_main!definitions_t.impl&__6.view.?_definition))))
(set-info :comment ";; Function-Specs main::definitions_t::ArchExec::entry_size")
(declare-fun req%main!definitions_t.impl&%6.entry_size. (main!definitions_t.ArchExec. Int) Bool)
(declare-const %%global_location_label%%174 Bool)
(assert (forall ((self~2@ main!definitions_t.ArchExec.) (layer~4@ Int)) (! (= (req%main!definitions_t.impl&%6.entry_size. self~2@ layer~4@) (=> %%global_location_label%%174 (< layer~4@ (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@)))))))))) :pattern ((req%main!definitions_t.impl&%6.entry_size. self~2@ layer~4@)) :qid internal_req__main!definitions_t.impl&__6.entry_size._definition :skolemid skolem_internal_req__main!definitions_t.impl&__6.entry_size._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::ArchExec::entry_size")
(declare-fun ens%main!definitions_t.impl&%6.entry_size. (main!definitions_t.ArchExec. Int Int) Bool)
(assert (forall ((self~2@ main!definitions_t.ArchExec.) (layer~4@ Int) (res~30@ Int)) (! (= (ens%main!definitions_t.impl&%6.entry_size. self~2@ layer~4@ res~30@) (and (uInv SZ res~30@) (= res~30@ (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@))) (I layer~4@))))) :pattern ((ens%main!definitions_t.impl&%6.entry_size. self~2@ layer~4@ res~30@)) :qid internal_ens__main!definitions_t.impl&__6.entry_size._definition :skolemid skolem_internal_ens__main!definitions_t.impl&__6.entry_size._definition)))
(set-info :comment ";; Function-Specs main::definitions_t::ArchExec::index_for_vaddr")
(declare-fun req%main!definitions_t.impl&%6.index_for_vaddr. (main!definitions_t.ArchExec. Int Int Int) Bool)
(declare-const %%global_location_label%%175 Bool)
(declare-const %%global_location_label%%176 Bool)
(declare-const %%global_location_label%%177 Bool)
(assert (forall ((self~2@ main!definitions_t.ArchExec.) (layer~4@ Int) (base~6@ Int) (vaddr~8@ Int)) (! (= (req%main!definitions_t.impl&%6.index_for_vaddr. self~2@ layer~4@ base~6@ vaddr~8@) (and (=> %%global_location_label%%175 (main!definitions_t.impl&%7.inv.? (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@))))) (=> %%global_location_label%%176 (< layer~4@ (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@))))))))) (=> %%global_location_label%%177 (>= vaddr~8@ base~6@)))) :pattern ((req%main!definitions_t.impl&%6.index_for_vaddr. self~2@ layer~4@ base~6@ vaddr~8@)) :qid internal_req__main!definitions_t.impl&__6.index_for_vaddr._definition :skolemid skolem_internal_req__main!definitions_t.impl&__6.index_for_vaddr._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::ArchExec::index_for_vaddr")
(declare-fun ens%main!definitions_t.impl&%6.index_for_vaddr. (main!definitions_t.ArchExec. Int Int Int Int) Bool)
(assert (forall ((self~2@ main!definitions_t.ArchExec.) (layer~4@ Int) (base~6@ Int) (vaddr~8@ Int) (res~46@ Int)) (! (= (ens%main!definitions_t.impl&%6.index_for_vaddr. self~2@ layer~4@ base~6@ vaddr~8@ res~46@) (and (uInv SZ res~46@) (= res~46@ (main!impl_u.indexing.index_from_base_and_addr.? (I base~6@) (I vaddr~8@) (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@))) (I layer~4@))))) (= res~46@ (main!impl_u.indexing.index_from_base_and_addr.? (I base~6@) (I vaddr~8@) (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@))) (I layer~4@))))))) :pattern ((ens%main!definitions_t.impl&%6.index_for_vaddr. self~2@ layer~4@ base~6@ vaddr~8@ res~46@)) :qid internal_ens__main!definitions_t.impl&__6.index_for_vaddr._definition :skolemid skolem_internal_ens__main!definitions_t.impl&__6.index_for_vaddr._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::x86_arch_exec")
(declare-fun ens%main!definitions_t.x86_arch_exec. (Int main!definitions_t.ArchExec.) Bool)
(assert (forall ((no%param@ Int) (res~8@ main!definitions_t.ArchExec.)) (! (= (ens%main!definitions_t.x86_arch_exec. no%param@ res~8@) (and (= (vstd!std_specs.vec.VecAdditionalSpecFns.view.? (TYPE%alloc!vec.Vec. TYPE%main!definitions_t.ArchLayerExec. TYPE%alloc!alloc.Global.) (TYPE%alloc!vec.Vec. TYPE%main!definitions_t.ArchLayerExec. TYPE%alloc!alloc.Global.) TYPE%main!definitions_t.ArchLayerExec. TYPE%main!definitions_t.ArchLayerExec. (Poly%alloc!vec.Vec<main!definitions_t.ArchLayerExec./alloc!alloc.Global.>. (main!definitions_t.ArchExec./ArchExec/layers (%Poly%main!definitions_t.ArchExec. (Poly%main!definitions_t.ArchExec. res~8@))))) (vstd!seq.Seq.push.? TYPE%main!definitions_t.ArchLayerExec. TYPE%main!definitions_t.ArchLayerExec. (vstd!seq.Seq.push.? TYPE%main!definitions_t.ArchLayerExec. TYPE%main!definitions_t.ArchLayerExec. (vstd!seq.Seq.push.? TYPE%main!definitions_t.ArchLayerExec. TYPE%main!definitions_t.ArchLayerExec. (vstd!seq.Seq.push.? TYPE%main!definitions_t.ArchLayerExec. TYPE%main!definitions_t.ArchLayerExec. (vstd!seq.Seq.empty.? TYPE%main!definitions_t.ArchLayerExec. TYPE%main!definitions_t.ArchLayerExec.) (Poly%main!definitions_t.ArchLayerExec. (main!definitions_t.ArchLayerExec./ArchLayerExec (%I (I main!definitions_t.L0_ENTRY_SIZE.?)) (%I (I 512))))) (Poly%main!definitions_t.ArchLayerExec. (main!definitions_t.ArchLayerExec./ArchLayerExec (%I (I main!definitions_t.L1_ENTRY_SIZE.?)) (%I (I 512))))) (Poly%main!definitions_t.ArchLayerExec. (main!definitions_t.ArchLayerExec./ArchLayerExec (%I (I main!definitions_t.L2_ENTRY_SIZE.?)) (%I (I 512))))) (Poly%main!definitions_t.ArchLayerExec. (main!definitions_t.ArchLayerExec./ArchLayerExec (%I (I main!definitions_t.L3_ENTRY_SIZE.?)) (%I (I 512)))))) (= (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. res~8@)) main!definitions_t.x86_arch_spec.?) (= res~8@ (main!definitions_t.x86_arch_exec_spec.? (I 0))))) :pattern ((ens%main!definitions_t.x86_arch_exec. no%param@ res~8@)) :qid internal_ens__main!definitions_t.x86_arch_exec._definition :skolemid skolem_internal_ens__main!definitions_t.x86_arch_exec._definition)))
(set-info :comment ";; Function-Specs main::definitions_t::ArchExec::entry_base")
(declare-fun req%main!definitions_t.impl&%6.entry_base. (main!definitions_t.ArchExec. Int Int Int) Bool)
(declare-const %%global_location_label%%178 Bool)
(declare-const %%global_location_label%%179 Bool)
(declare-const %%global_location_label%%180 Bool)
(declare-const %%global_location_label%%181 Bool)
(assert (forall ((self~2@ main!definitions_t.ArchExec.) (layer~4@ Int) (base~6@ Int) (idx~8@ Int)) (! (= (req%main!definitions_t.impl&%6.entry_base. self~2@ layer~4@ base~6@ idx~8@) (and (=> %%global_location_label%%178 (main!definitions_t.impl&%7.inv.? (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@))))) (=> %%global_location_label%%179 (< layer~4@ (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@))))))))) (=> %%global_location_label%%180 (<= base~6@ main!definitions_t.MAX_BASE.?)) (=> %%global_location_label%%181 (<= idx~8@ main!definitions_t.X86_NUM_ENTRIES.?)))) :pattern ((req%main!definitions_t.impl&%6.entry_base. self~2@ layer~4@ base~6@ idx~8@)) :qid internal_req__main!definitions_t.impl&__6.entry_base._definition :skolemid skolem_internal_req__main!definitions_t.impl&__6.entry_base._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::ArchExec::entry_base")
(declare-fun ens%main!definitions_t.impl&%6.entry_base. (main!definitions_t.ArchExec. Int Int Int Int) Bool)
(assert (forall ((self~2@ main!definitions_t.ArchExec.) (layer~4@ Int) (base~6@ Int) (idx~8@ Int) (res~52@ Int)) (! (= (ens%main!definitions_t.impl&%6.entry_base. self~2@ layer~4@ base~6@ idx~8@ res~52@) (and (uInv SZ res~52@) (= res~52@ (main!impl_u.indexing.entry_base_from_index.? (I base~6@) (I idx~8@) (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@))) (I layer~4@))))))) :pattern ((ens%main!definitions_t.impl&%6.entry_base. self~2@ layer~4@ base~6@ idx~8@ res~52@)) :qid internal_ens__main!definitions_t.impl&__6.entry_base._definition :skolemid skolem_internal_ens__main!definitions_t.impl&__6.entry_base._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::resolve_aux")
(declare-fun req%main!impl_u.l2_impl.impl&%1.resolve_aux. (main!impl_u.l2_impl.PageTable. Int Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%182 Bool)
(declare-const %%global_location_label%%183 Bool)
(declare-const %%global_location_label%%184 Bool)
(declare-const %%global_location_label%%185 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (vaddr~10@ Int) (pt~12@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.resolve_aux. self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pt~12@) (and (=> %%global_location_label%%182 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (=> %%global_location_label%%183 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (=> %%global_location_label%%184 (main!impl_u.l0.impl&%0.accepted_resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (I vaddr~10@))) (=> %%global_location_label%%185 (and (<= base~8@ vaddr~10@) (< vaddr~10@ main!definitions_t.MAX_BASE.?))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.resolve_aux. self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pt~12@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.resolve_aux._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.resolve_aux._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::resolve_aux")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.resolve_aux. (main!impl_u.l2_impl.PageTable. Int Int Int Int main!impl_u.l2_impl.PTDir. core!result.Result.) Bool)
(declare-fun %%lambda%%6 () %%Function%%)
(assert (forall ((v~169$ Poly)) (! (= (%%apply%%0 %%lambda%%6 v~169$) (Poly%tuple%2. (tuple%2./tuple%2 (tuple%2./tuple%2/field%0 (%Poly%tuple%2. v~169$)) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (tuple%2./tuple%2/field%1 (%Poly%tuple%2. v~169$))))))) :pattern ((%%apply%%0 %%lambda%%6 v~169$)))))
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (vaddr~10@ Int) (pt~12@ main!impl_u.l2_impl.PTDir.) (res~149@ core!result.Result.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.resolve_aux. self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pt~12@ res~149@) (and (has_type (Poly%core!result.Result. res~149@) (TYPE%core!result.Result. (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) TYPE%tuple%0.)) (= (main!impl_u.l1.result_map_ok.? (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) TYPE%tuple%0. TYPE%tuple%0. (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) (Poly%core!result.Result. res~149@) (Poly%fun%1. (mk_fun %%lambda%%6))) (main!impl_u.l1.impl&%0.resolve.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))) (= (main!impl_u.l1.result_map_ok.? (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) TYPE%tuple%0. TYPE%tuple%0. (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) (Poly%core!result.Result. res~149@) (Poly%fun%1. (mk_fun %%lambda%%6))) (main!impl_u.l0.impl&%0.resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (I vaddr~10@))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.resolve_aux. self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pt~12@ res~149@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.resolve_aux._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.resolve_aux._definition)))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::cr3")
(declare-fun ens%main!spec_t.mem.impl&%1.cr3. (main!spec_t.mem.PageTableMemory. main!definitions_t.MemRegionExec.) Bool)
(assert (forall ((self~2@ main!spec_t.mem.PageTableMemory.) (res~10@ main!definitions_t.MemRegionExec.)) (! (= (ens%main!spec_t.mem.impl&%1.cr3. self~2@ res~10@) (and (has_type (Poly%main!definitions_t.MemRegionExec. res~10@) TYPE%main!definitions_t.MemRegionExec.) (= res~10@ (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. self~2@))))) :pattern ((ens%main!spec_t.mem.impl&%1.cr3. self~2@ res~10@)) :qid internal_ens__main!spec_t.mem.impl&__1.cr3._definition :skolemid skolem_internal_ens__main!spec_t.mem.impl&__1.cr3._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::resolve")
(declare-fun req%main!impl_u.l2_impl.impl&%1.resolve. (main!impl_u.l2_impl.PageTable. Int) Bool)
(declare-const %%global_location_label%%186 Bool)
(declare-const %%global_location_label%%187 Bool)
(declare-const %%global_location_label%%188 Bool)
(declare-const %%global_location_label%%189 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (vaddr~4@ Int)) (! (= (req%main!impl_u.l2_impl.impl&%1.resolve. self~2@ vaddr~4@) (and (=> %%global_location_label%%186 (main!impl_u.l2_impl.impl&%1.inv.? (Poly%main!impl_u.l2_impl.PageTable. self~2@))) (=> %%global_location_label%%187 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@))))) (=> %%global_location_label%%188 (main!impl_u.l0.impl&%0.accepted_resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@))))) (I vaddr~4@))) (=> %%global_location_label%%189 (< vaddr~4@ main!definitions_t.MAX_BASE.?)))) :pattern ((req%main!impl_u.l2_impl.impl&%1.resolve. self~2@ vaddr~4@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.resolve._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.resolve._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::resolve")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.resolve. (main!impl_u.l2_impl.PageTable. Int core!result.Result.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (vaddr~4@ Int) (res~53@ core!result.Result.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.resolve. self~2@ vaddr~4@ res~53@) (and (has_type (Poly%core!result.Result. res~53@) (TYPE%core!result.Result. (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) TYPE%tuple%0.)) (= (main!impl_u.l1.result_map_ok.? (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) TYPE%tuple%0. TYPE%tuple%0. (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) (Poly%core!result.Result. res~53@) (Poly%fun%1. (mk_fun %%lambda%%6))) (main!impl_u.l1.impl&%0.resolve.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@))) (I vaddr~4@))) (= (main!impl_u.l1.result_map_ok.? (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) (TYPE%tuple%2. (UINT SZ) TYPE%main!definitions_t.PageTableEntryExec.) TYPE%tuple%0. TYPE%tuple%0. (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) (TYPE%tuple%2. NAT TYPE%main!definitions_t.PageTableEntry.) (Poly%core!result.Result. res~53@) (Poly%fun%1. (mk_fun %%lambda%%6))) (main!impl_u.l0.impl&%0.resolve.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@))))) (I vaddr~4@))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.resolve. self~2@ vaddr~4@ res~53@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.resolve._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.resolve._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::MAXPHYADDR")
(assert (fuel_bool_default fuel%main!definitions_t.MAXPHYADDR.))
(assert (=> (fuel_bool fuel%main!definitions_t.MAXPHYADDR.) (= main!definitions_t.MAXPHYADDR.? 4503599627370495)))
(assert (<= 0 main!definitions_t.MAXPHYADDR.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::accepted_mapping")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.impl&%1.accepted_mapping.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.impl&%1.accepted_mapping.) (forall ((self~2@ Poly) (vaddr~4@ Poly) (pte~6@ Poly)) (! (= (main!impl_u.l2_impl.impl&%1.accepted_mapping.? self~2@ vaddr~4@ pte~6@) (and (main!definitions_t.impl&%7.contains_entry_size_at_index_atleast.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) (I (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@)))))) (I 1)) (<= (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.PageTableEntry./PageTableEntry/frame (%Poly%main!definitions_t.PageTableEntry. pte~6@))))) main!definitions_t.MAXPHYADDR.?))) :pattern ((main!impl_u.l2_impl.impl&%1.accepted_mapping.? self~2@ vaddr~4@ pte~6@)) :qid internal_main!impl_u.l2_impl.impl&__1.accepted_mapping.?_definition :skolemid skolem_internal_main!impl_u.l2_impl.impl&__1.accepted_mapping.?_definition))))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::alloc_available_pages")
(assert (forall ((self~2@ Poly)) (! (=> (has_type self~2@ TYPE%main!spec_t.mem.PageTableMemory.) (<= 0 (main!spec_t.mem.impl&%1.alloc_available_pages.? self~2@))) :pattern ((main!spec_t.mem.impl&%1.alloc_available_pages.? self~2@)) :qid internal_main!spec_t.mem.impl&__1.alloc_available_pages.?_pre_post_definition :skolemid skolem_internal_main!spec_t.mem.impl&__1.alloc_available_pages.?_pre_post_definition)))
(set-info :comment ";; Function-Specs main::definitions_t::Arch::lemma_entry_sizes_increase")
(declare-fun req%main!definitions_t.impl&%7.lemma_entry_sizes_increase. (main!definitions_t.Arch. Int Int) Bool)
(declare-const %%global_location_label%%190 Bool)
(declare-const %%global_location_label%%191 Bool)
(declare-const %%global_location_label%%192 Bool)
(assert (forall ((self~2@ main!definitions_t.Arch.) (i~4@ Int) (j~6@ Int)) (! (= (req%main!definitions_t.impl&%7.lemma_entry_sizes_increase. self~2@ i~4@ j~6@) (and (=> %%global_location_label%%190 (main!definitions_t.impl&%7.inv.? (Poly%main!definitions_t.Arch. self~2@))) (=> %%global_location_label%%191 (< i~4@ j~6@)) (=> %%global_location_label%%192 (< j~6@ (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. self~2@))))))))) :pattern ((req%main!definitions_t.impl&%7.lemma_entry_sizes_increase. self~2@ i~4@ j~6@)) :qid internal_req__main!definitions_t.impl&__7.lemma_entry_sizes_increase._definition :skolemid skolem_internal_req__main!definitions_t.impl&__7.lemma_entry_sizes_increase._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::Arch::lemma_entry_sizes_increase")
(declare-fun ens%main!definitions_t.impl&%7.lemma_entry_sizes_increase. (main!definitions_t.Arch. Int Int) Bool)
(assert (forall ((self~2@ main!definitions_t.Arch.) (i~4@ Int) (j~6@ Int)) (! (= (ens%main!definitions_t.impl&%7.lemma_entry_sizes_increase. self~2@ i~4@ j~6@) (>= (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. self~2@) (I i~4@)) (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. self~2@) (I j~6@)))) :pattern ((ens%main!definitions_t.impl&%7.lemma_entry_sizes_increase. self~2@ i~4@ j~6@)) :qid internal_ens__main!definitions_t.impl&__7.lemma_entry_sizes_increase._definition :skolemid skolem_internal_ens__main!definitions_t.impl&__7.lemma_entry_sizes_increase._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::lemma_page_aligned_implies_mask_dir_addr_is_identity")
(declare-fun ens%main!impl_u.l2_impl.lemma_page_aligned_implies_mask_dir_addr_is_identity. (Int) Bool)
(assert (forall ((no%param@ Int)) (! (= (ens%main!impl_u.l2_impl.lemma_page_aligned_implies_mask_dir_addr_is_identity. no%param@) (forall ((addr~14$ Poly)) (! (=> (has_type addr~14$ (UINT 64)) (=> (<= (%I addr~14$) main!definitions_t.MAXPHYADDR.?) (=> (main!definitions_t.aligned.? addr~14$ (I main!definitions_t.PAGE_SIZE.?)) (= (uClip 64 (uintand 64 (I (%I addr~14$)) (I main!impl_u.l2_impl.MASK_DIR_ADDR.?))) (%I addr~14$))))) :pattern ((main!definitions_t.aligned.? addr~14$ (I main!definitions_t.PAGE_SIZE.?))) :qid user_main__impl_u__l2_impl__lemma_page_aligned_implies_mask_dir_addr_is_identity_125 :skolemid skolem_user_main__impl_u__l2_impl__lemma_page_aligned_implies_mask_dir_addr_is_identity_125))) :pattern ((ens%main!impl_u.l2_impl.lemma_page_aligned_implies_mask_dir_addr_is_identity. no%param@)) :qid internal_ens__main!impl_u.l2_impl.lemma_page_aligned_implies_mask_dir_addr_is_identity._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.lemma_page_aligned_implies_mask_dir_addr_is_identity._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::lemma_aligned_addr_mask_facts")
(declare-fun ens%main!impl_u.l2_impl.lemma_aligned_addr_mask_facts. (Int) Bool)
(assert (forall ((addr~2@ Int)) (! (= (ens%main!impl_u.l2_impl.lemma_aligned_addr_mask_facts. addr~2@) (and (=> (main!definitions_t.aligned.? (I addr~2@) (I main!definitions_t.L1_ENTRY_SIZE.?)) (= (uClip 64 (uintand 64 (I addr~2@) (I main!impl_u.l2_impl.MASK_L1_PG_ADDR.?))) (uClip 64 (uintand 64 (I addr~2@) (I main!impl_u.l2_impl.MASK_ADDR.?))))) (=> (main!definitions_t.aligned.? (I addr~2@) (I main!definitions_t.L2_ENTRY_SIZE.?)) (= (uClip 64 (uintand 64 (I addr~2@) (I main!impl_u.l2_impl.MASK_L2_PG_ADDR.?))) (uClip 64 (uintand 64 (I addr~2@) (I main!impl_u.l2_impl.MASK_ADDR.?))))) (= (uClip 64 (uintand 64 (I addr~2@) (I main!impl_u.l2_impl.MASK_L3_PG_ADDR.?))) (uClip 64 (uintand 64 (I addr~2@) (I main!impl_u.l2_impl.MASK_ADDR.?)))) (=> (and (<= addr~2@ main!definitions_t.MAXPHYADDR.?) (main!definitions_t.aligned.? (I addr~2@) (I main!definitions_t.L1_ENTRY_SIZE.?))) (= (uClip 64 (uintand 64 (I addr~2@) (I main!impl_u.l2_impl.MASK_ADDR.?))) addr~2@)) (=> (and (<= addr~2@ main!definitions_t.MAXPHYADDR.?) (main!definitions_t.aligned.? (I addr~2@) (I main!definitions_t.L2_ENTRY_SIZE.?))) (= (uClip 64 (uintand 64 (I addr~2@) (I main!impl_u.l2_impl.MASK_ADDR.?))) addr~2@)) (=> (and (<= addr~2@ main!definitions_t.MAXPHYADDR.?) (main!definitions_t.aligned.? (I addr~2@) (I main!definitions_t.L3_ENTRY_SIZE.?))) (= (uClip 64 (uintand 64 (I addr~2@) (I main!impl_u.l2_impl.MASK_ADDR.?))) addr~2@)))) :pattern ((ens%main!impl_u.l2_impl.lemma_aligned_addr_mask_facts. addr~2@)) :qid internal_ens__main!impl_u.l2_impl.lemma_aligned_addr_mask_facts._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.lemma_aligned_addr_mask_facts._definition)))
(set-info :comment ";; Function-Specs main::spec_t::mem::PageTableMemory::write")
(declare-fun req%main!spec_t.mem.impl&%1.write. (main!spec_t.mem.PageTableMemory. Int Int main!definitions_t.MemRegion. Int) Bool)
(declare-const %%global_location_label%%193 Bool)
(declare-const %%global_location_label%%194 Bool)
(declare-const %%global_location_label%%195 Bool)
(declare-const %%global_location_label%%196 Bool)
(declare-const %%global_location_label%%197 Bool)
(assert (forall ((pre%self~2@ main!spec_t.mem.PageTableMemory.) (pbase~4@ Int) (idx~6@ Int) (region~8@ main!definitions_t.MemRegion.) (value~10@ Int)) (! (= (req%main!spec_t.mem.impl&%1.write. pre%self~2@ pbase~4@ idx~6@ region~8@ value~10@) (and (=> %%global_location_label%%193 (= pbase~4@ (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. region~8@))))) (=> %%global_location_label%%194 (main!definitions_t.aligned.? (I pbase~4@) (I main!definitions_t.WORD_SIZE.?))) (=> %%global_location_label%%195 (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (=> %%global_location_label%%196 (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (Poly%main!definitions_t.MemRegion. region~8@))) (=> %%global_location_label%%197 (< idx~6@ 512)))) :pattern ((req%main!spec_t.mem.impl&%1.write. pre%self~2@ pbase~4@ idx~6@ region~8@ value~10@)) :qid internal_req__main!spec_t.mem.impl&__1.write._definition :skolemid skolem_internal_req__main!spec_t.mem.impl&__1.write._definition)))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::write")
(declare-fun ens%main!spec_t.mem.impl&%1.write. (main!spec_t.mem.PageTableMemory. main!spec_t.mem.PageTableMemory. Int Int main!definitions_t.MemRegion. Int) Bool)
(assert (forall ((pre%self~2@ main!spec_t.mem.PageTableMemory.) (self~2@ main!spec_t.mem.PageTableMemory.) (pbase~4@ Int) (idx~6@ Int) (region~8@ main!definitions_t.MemRegion.) (value~10@ Int)) (! (= (ens%main!spec_t.mem.impl&%1.write. pre%self~2@ self~2@ pbase~4@ idx~6@ region~8@ value~10@) (and (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. self~2@) (Poly%main!definitions_t.MemRegion. region~8@)) (%Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq.update.? (UINT 64) (UINT 64) (Poly%vstd!seq.Seq<u64.>. (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@) (Poly%main!definitions_t.MemRegion. region~8@))) (I idx~6@) (I value~10@)))) (forall ((r~134$ Poly)) (! (=> (has_type r~134$ TYPE%main!definitions_t.MemRegion.) (=> (not (= (%Poly%main!definitions_t.MemRegion. r~134$) region~8@)) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. self~2@) r~134$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@) r~134$)))) :pattern ((main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. self~2@) r~134$)) :pattern ((main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@) r~134$)) :qid user_main__spec_t__mem__PageTableMemory__write_126 :skolemid skolem_user_main__spec_t__mem__PageTableMemory__write_126)) (= (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (= (main!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (main!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (= (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (= (main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))))) :pattern ((ens%main!spec_t.mem.impl&%1.write. pre%self~2@ self~2@ pbase~4@ idx~6@ region~8@ value~10@)) :qid internal_ens__main!spec_t.mem.impl&__1.write._definition :skolemid skolem_internal_ens__main!spec_t.mem.impl&__1.write._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::lemma_set_union_empty_equals_set")
(declare-fun ens%main!impl_u.l2_impl.lemma_set_union_empty_equals_set. (Type Type Poly) Bool)
(assert (forall ((T& Type) (T&. Type) (s~2@ Poly)) (! (= (ens%main!impl_u.l2_impl.lemma_set_union_empty_equals_set. T& T&. s~2@) (= (vstd!set.impl&%0.union.? T& T&. s~2@ (vstd!set.impl&%0.empty.? T& T&.)) s~2@)) :pattern ((ens%main!impl_u.l2_impl.lemma_set_union_empty_equals_set. T& T&. s~2@)) :qid internal_ens__main!impl_u.l2_impl.lemma_set_union_empty_equals_set._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.lemma_set_union_empty_equals_set._definition)))
(set-info :comment ";; Function-Specs main::spec_t::mem::PageTableMemory::alloc_page")
(declare-fun req%main!spec_t.mem.impl&%1.alloc_page. (main!spec_t.mem.PageTableMemory.) Bool)
(declare-const %%global_location_label%%198 Bool)
(declare-const %%global_location_label%%199 Bool)
(assert (forall ((pre%self~2@ main!spec_t.mem.PageTableMemory.)) (! (= (req%main!spec_t.mem.impl&%1.alloc_page. pre%self~2@) (and (=> %%global_location_label%%198 (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (=> %%global_location_label%%199 (< 0 (main!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@)))))) :pattern ((req%main!spec_t.mem.impl&%1.alloc_page. pre%self~2@)) :qid internal_req__main!spec_t.mem.impl&__1.alloc_page._definition :skolemid skolem_internal_req__main!spec_t.mem.impl&__1.alloc_page._definition)))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::alloc_page")
(declare-fun ens%main!spec_t.mem.impl&%1.alloc_page. (main!spec_t.mem.PageTableMemory. main!spec_t.mem.PageTableMemory. main!definitions_t.MemRegionExec.) Bool)
(assert (forall ((pre%self~2@ main!spec_t.mem.PageTableMemory.) (self~2@ main!spec_t.mem.PageTableMemory.) (r~39@ main!definitions_t.MemRegionExec.)) (! (= (ens%main!spec_t.mem.impl&%1.alloc_page. pre%self~2@ self~2@ r~39@) (and (has_type (Poly%main!definitions_t.MemRegionExec. r~39@) TYPE%main!definitions_t.MemRegionExec.) (= (main!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (- (main!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@)) 1)) (= (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~39@))))) main!definitions_t.PAGE_SIZE.?) (<= (+ (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~39@))))) main!definitions_t.PAGE_SIZE.?) main!definitions_t.MAXPHYADDR.?) (main!definitions_t.aligned.? (I (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~39@)))))) (I main!definitions_t.PAGE_SIZE.?)) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~39@))))) (= (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~39@)))))) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. self~2@) (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~39@)))) (%Poly%vstd!seq.Seq<u64.>. (main!definitions_t.new_seq.? (UINT 64) (UINT 64) (I 512) (I 0)))) (forall ((r2~176$ Poly)) (! (=> (has_type r2~176$ TYPE%main!definitions_t.MemRegion.) (=> (not (= (%Poly%main!definitions_t.MemRegion. r2~176$) (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~39@)))) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. self~2@) r2~176$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@) r2~176$)))) :pattern ((main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. self~2@) r2~176$)) :qid user_main__spec_t__mem__PageTableMemory__alloc_page_127 :skolemid skolem_user_main__spec_t__mem__PageTableMemory__alloc_page_127)) (= (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (= (main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)))) :pattern ((ens%main!spec_t.mem.impl&%1.alloc_page. pre%self~2@ self~2@ r~39@)) :qid internal_ens__main!spec_t.mem.impl&__1.alloc_page._definition :skolemid skolem_internal_ens__main!spec_t.mem.impl&__1.alloc_page._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::MemRegion::contains")
(assert (fuel_bool_default fuel%main!definitions_t.impl&%1.contains.))
(assert (=> (fuel_bool fuel%main!definitions_t.impl&%1.contains.) (forall ((self~2@ Poly) (addr~4@ Poly)) (! (= (main!definitions_t.impl&%1.contains.? self~2@ addr~4@) (main!definitions_t.between.? addr~4@ (I (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. self~2@))) (I (nClip (+ (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. self~2@)) (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. self~2@))))))) :pattern ((main!definitions_t.impl&%1.contains.? self~2@ addr~4@)) :qid internal_main!definitions_t.impl&__1.contains.?_definition :skolemid skolem_internal_main!definitions_t.impl&__1.contains.?_definition))))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_zeroed_page_implies_empty_at")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_zeroed_page_implies_empty_at. (main!impl_u.l2_impl.PageTable. Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%200 Bool)
(declare-const %%global_location_label%%201 Bool)
(declare-const %%global_location_label%%202 Bool)
(declare-const %%global_location_label%%203 Bool)
(declare-const %%global_location_label%%204 Bool)
(declare-const %%global_location_label%%205 Bool)
(declare-const %%global_location_label%%206 Bool)
(declare-const %%global_location_label%%207 Bool)
(declare-const %%global_location_label%%208 Bool)
(declare-const %%global_location_label%%209 Bool)
(declare-const %%global_location_label%%210 Bool)
(declare-const %%global_location_label%%211 Bool)
(declare-const %%global_location_label%%212 Bool)
(declare-const %%global_location_label%%213 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (pt~8@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_zeroed_page_implies_empty_at. self~2@ layer~4@ ptr~6@ pt~8@) (and (=> %%global_location_label%%200 (= (uClip SZ (EucMod ptr~6@ main!definitions_t.PAGE_SIZE.?)) 0)) (=> %%global_location_label%%201 (main!impl_u.l2_impl.impl&%1.well_formed.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I ptr~6@))) (=> %%global_location_label%%202 (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (=> %%global_location_label%%203 (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) (=> %%global_location_label%%204 (= (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) ptr~6@)) (=> %%global_location_label%%205 (= (main!definitions_t.MemRegion./MemRegion/size (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) main!definitions_t.PAGE_SIZE.?)) (=> %%global_location_label%%206 (= (vstd!seq.Seq.len.? (UINT 64) (UINT 64) (Poly%vstd!seq.Seq<u64.>. (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@))))))) (vstd!seq.Seq.len.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@))))))) (=> %%global_location_label%%207 (= (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) ptr~6@)) (=> %%global_location_label%%208 (= ptr~6@ (main!definitions_t.MemRegion./MemRegion/base (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))))) (=> %%global_location_label%%209 (= (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (vstd!set.impl&%0.empty.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion.) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))))) (=> %%global_location_label%%210 (main!impl_u.l2_impl.impl&%1.layer_in_range.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@))) (=> %%global_location_label%%211 (= (vstd!seq.Seq.len.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@))))) main!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%212 (forall ((i~162$ Poly)) (! (=> (has_type i~162$ NAT) (=> (< (%I i~162$) main!definitions_t.X86_NUM_ENTRIES.?) (= (%I (vstd!seq.Seq.index.? (UINT 64) (UINT 64) (Poly%vstd!seq.Seq<u64.>. (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) i~162$)) 0))) :pattern ((vstd!seq.Seq.index.? (UINT 64) (UINT 64) (Poly%vstd!seq.Seq<u64.>. (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))))) i~162$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_zeroed_page_implies_empty_at_128 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_zeroed_page_implies_empty_at_128))) (=> %%global_location_label%%213 (forall ((i~209$ Poly)) (! (=> (has_type i~209$ NAT) (=> (< (%I i~209$) main!definitions_t.X86_NUM_ENTRIES.?) (%B (B ((_ is core!option.Option./None) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))) i~209$))))))) :pattern ((vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))) i~209$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_zeroed_page_implies_empty_at_129 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_zeroed_page_implies_empty_at_129))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_zeroed_page_implies_empty_at. self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_zeroed_page_implies_empty_at._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_zeroed_page_implies_empty_at._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_zeroed_page_implies_empty_at")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_zeroed_page_implies_empty_at. (main!impl_u.l2_impl.PageTable. Int Int main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (pt~8@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_zeroed_page_implies_empty_at. self~2@ layer~4@ ptr~6@ pt~8@) (and (main!impl_u.l2_impl.impl&%1.empty_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~8@)) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~8@)))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_zeroed_page_implies_empty_at. self~2@ layer~4@ ptr~6@ pt~8@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_zeroed_page_implies_empty_at._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_zeroed_page_implies_empty_at._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_empty_at_interp_at_aux_equal_l1_empty_dir")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. (main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%214 Bool)
(declare-const %%global_location_label%%215 Bool)
(declare-const %%global_location_label%%216 Bool)
(declare-const %%global_location_label%%217 Bool)
(declare-const %%global_location_label%%218 Bool)
(declare-const %%global_location_label%%219 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (init~10@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (idx~12@ Int) (pt~14@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. self~2@ layer~4@ ptr~6@ base~8@ init~10@ idx~12@ pt~14@) (and (=> %%global_location_label%%214 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))) (=> %%global_location_label%%215 (forall ((i~38$ Poly)) (! (=> (has_type i~38$ NAT) (=> (< (%I i~38$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@))) (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) i~38$)) main!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) i~38$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_empty_at_interp_at_aux_equal_l1_empty_dir_130 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_empty_at_interp_at_aux_equal_l1_empty_dir_130))) (=> %%global_location_label%%216 (<= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@)) main!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%217 (< idx~12@ main!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%218 ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I idx~12@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) (=> %%global_location_label%%219 (main!impl_u.l2_impl.impl&%1.empty_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I idx~12@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) (I idx~12@)))))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. self~2@ layer~4@ ptr~6@ base~8@ init~10@ idx~12@ pt~14@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_empty_at_interp_at_aux_equal_l1_empty_dir")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. (main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. Int main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (init~10@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (idx~12@ Int) (pt~14@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. self~2@ layer~4@ ptr~6@ base~8@ init~10@ idx~12@ pt~14@) (let ((res~226$ (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I idx~12@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))))) (I (main!impl_u.indexing.entry_base_from_index.? (I base~8@) (I idx~12@) (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) (I layer~4@))))) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) (I idx~12@))))))) (and (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~226$)) main!definitions_t.X86_NUM_ENTRIES.?) (forall ((i~254$ Poly)) (! (=> (has_type i~254$ NAT) (=> (< (%I i~254$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~226$))) (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~226$) i~254$)) main!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. res~226$) i~254$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_empty_at_interp_at_aux_equal_l1_empty_dir_131 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_empty_at_interp_at_aux_equal_l1_empty_dir_131))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir. self~2@ layer~4@ ptr~6@ base~8@ init~10@ idx~12@ pt~14@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_empty_at_interp_at_aux_equal_l1_empty_dir._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_empty_at_interp_at_equal_l1_empty_dir")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_equal_l1_empty_dir. (main!impl_u.l2_impl.PageTable. Int Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%220 Bool)
(declare-const %%global_location_label%%221 Bool)
(declare-const %%global_location_label%%222 Bool)
(declare-const %%global_location_label%%223 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (idx~10@ Int) (pt~12@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_equal_l1_empty_dir. self~2@ layer~4@ ptr~6@ base~8@ idx~10@ pt~12@) (and (=> %%global_location_label%%220 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (=> %%global_location_label%%221 (< idx~10@ main!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%222 ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I idx~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (=> %%global_location_label%%223 (main!impl_u.l2_impl.impl&%1.empty_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I idx~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~10@)))))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_equal_l1_empty_dir. self~2@ layer~4@ ptr~6@ base~8@ idx~10@ pt~12@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_empty_at_interp_at_equal_l1_empty_dir._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_empty_at_interp_at_equal_l1_empty_dir._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_empty_at_interp_at_equal_l1_empty_dir")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_equal_l1_empty_dir. (main!impl_u.l2_impl.PageTable. Int Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (idx~10@ Int) (pt~12@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_equal_l1_empty_dir. self~2@ layer~4@ ptr~6@ base~8@ idx~10@ pt~12@) (let ((res~167$ (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I idx~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) (I (main!impl_u.indexing.entry_base_from_index.? (I base~8@) (I idx~10@) (I (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) (I layer~4@))))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~10@))))))) (and (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~167$))))) main!definitions_t.X86_NUM_ENTRIES.?) (forall ((i~196$ Poly)) (! (=> (has_type i~196$ NAT) (=> (< (%I i~196$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~167$)))))) (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~167$)))) i~196$)) main!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. res~167$)))) i~196$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_empty_at_interp_at_equal_l1_empty_dir_132 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_empty_at_interp_at_equal_l1_empty_dir_132))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_interp_at_equal_l1_empty_dir. self~2@ layer~4@ ptr~6@ base~8@ idx~10@ pt~12@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_empty_at_interp_at_equal_l1_empty_dir._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_empty_at_interp_at_equal_l1_empty_dir._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::map_frame_aux")
(declare-fun req%main!impl_u.l2_impl.impl&%1.map_frame_aux. (main!impl_u.l2_impl.PageTable. Int Int Int Int main!definitions_t.PageTableEntryExec. main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%224 Bool)
(declare-const %%global_location_label%%225 Bool)
(declare-const %%global_location_label%%226 Bool)
(declare-const %%global_location_label%%227 Bool)
(declare-const %%global_location_label%%228 Bool)
(declare-const %%global_location_label%%229 Bool)
(declare-const %%global_location_label%%230 Bool)
(assert (forall ((pre%self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (vaddr~10@ Int) (pte~12@ main!definitions_t.PageTableEntryExec.) (pt~14@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.map_frame_aux. pre%self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pte~12@ pt~14@) (and (=> %%global_location_label%%224 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))) (=> %%global_location_label%%225 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))))) (=> %%global_location_label%%226 (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))))) (=> %%global_location_label%%227 (>= (main!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))) (- 3 layer~4@))) (=> %%global_location_label%%228 (main!impl_u.l2_impl.impl&%1.accepted_mapping.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I vaddr~10@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~12@))))) (=> %%global_location_label%%229 (main!impl_u.l1.impl&%0.accepted_mapping.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))) (I vaddr~10@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~12@))))) (=> %%global_location_label%%230 (and (<= base~8@ vaddr~10@) (< vaddr~10@ main!definitions_t.MAX_BASE.?))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.map_frame_aux. pre%self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pte~12@ pt~14@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.map_frame_aux._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.map_frame_aux._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::map_frame_aux")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.map_frame_aux. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int Int Int main!definitions_t.PageTableEntryExec. main!impl_u.l2_impl.PTDir. core!result.Result.) Bool)
(assert (forall ((pre%self~2@ main!impl_u.l2_impl.PageTable.) (self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (vaddr~10@ Int) (pte~12@ main!definitions_t.PageTableEntryExec.) (pt~14@ main!impl_u.l2_impl.PTDir.) (res~211@ core!result.Result.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.map_frame_aux. pre%self~2@ self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pte~12@ pt~14@ res~211@) (and (has_type (Poly%core!result.Result. res~211@) (TYPE%core!result.Result. (TYPE%tuple%2. TYPE%main!impl_u.l2_impl.PTDir. (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.)) TYPE%tuple%0.)) (has_type (Poly%main!impl_u.l2_impl.PageTable. self~2@) TYPE%main!impl_u.l2_impl.PageTable.) (ite ((_ is core!result.Result./Ok) res~211@) (let ((resv~217$ (%Poly%tuple%2. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~211@)))))) (let ((pt_res~227$ (%Poly%main!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/field%0 (%Poly%tuple%2. (Poly%tuple%2. resv~217$)))))) (let ((new_regions~228$ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (tuple%2./tuple%2/field%1 (%Poly%tuple%2. (Poly%tuple%2. resv~217$)))))) (and (and (and (and (and (and (= (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@))))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. new_regions~228$)))) (= (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~227$))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. new_regions~228$))))) (forall ((r~282$ Poly)) (! (=> (has_type r~282$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. new_regions~228$) r~282$) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))))) r~282$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))))) r~282$)) :qid user_main__impl_u__l2_impl__PageTable__map_frame_aux_133 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__map_frame_aux_133))) (forall ((r~316$ Poly)) (! (=> (has_type r~316$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. new_regions~228$) r~316$) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) r~316$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) r~316$)) :qid user_main__impl_u__l2_impl__PageTable__map_frame_aux_134 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__map_frame_aux_134))) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~227$))) (forall ((r~365$ Poly)) (! (=> (has_type r~365$ TYPE%main!definitions_t.MemRegion.) (=> (and (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) r~365$)) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. new_regions~228$) r~365$))) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) r~365$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))) r~365$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) r~365$)) :qid user_main__impl_u__l2_impl__PageTable__map_frame_aux_135 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__map_frame_aux_135))) (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~227$))) (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))))))) (let ((e~428$ (%Poly%tuple%0. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~211@)))))) (= self~2@ pre%self~2@))) (ite ((_ is core!result.Result./Ok) res~211@) (let ((resv~449$ (%Poly%tuple%2. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~211@)))))) (let ((pt_res~459$ (%Poly%main!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/field%0 (%Poly%tuple%2. (Poly%tuple%2. resv~449$)))))) (let ((new_regions~460$ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (tuple%2./tuple%2/field%1 (%Poly%tuple%2. (Poly%tuple%2. resv~449$)))))) (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~459$)))) (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))) (I vaddr~10@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~12@)))))))) (let ((e~549$ (%Poly%tuple%0. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~211@)))))) (= (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))) (I vaddr~10@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~12@))))))) (= (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@))))) (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.map_frame_aux. pre%self~2@ self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pte~12@ pt~14@ res~211@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.map_frame_aux._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.map_frame_aux._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_not_empty_at_implies_interp_at_aux_not_empty")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_aux_not_empty. (main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%231 Bool)
(declare-const %%global_location_label%%232 Bool)
(declare-const %%global_location_label%%233 Bool)
(declare-const %%global_location_label%%234 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (init~10@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (nonempty_idx~12@ Int) (pt~14@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_aux_not_empty. self~2@ layer~4@ ptr~6@ base~8@ init~10@ nonempty_idx~12@ pt~14@) (and (=> %%global_location_label%%231 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))) (=> %%global_location_label%%232 (< nonempty_idx~12@ main!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%233 (not ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty) (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I nonempty_idx~12@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))))) (=> %%global_location_label%%234 (=> (< nonempty_idx~12@ (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@))) (not ((_ is main!impl_u.l1.NodeEntry./Empty) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (I nonempty_idx~12@))))))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_aux_not_empty. self~2@ layer~4@ ptr~6@ base~8@ init~10@ nonempty_idx~12@ pt~14@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_not_empty_at_implies_interp_at_aux_not_empty._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_not_empty_at_implies_interp_at_aux_not_empty._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_not_empty_at_implies_interp_at_aux_not_empty")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_aux_not_empty. (main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. Int main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (init~10@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (nonempty_idx~12@ Int) (pt~14@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_aux_not_empty. self~2@ layer~4@ ptr~6@ base~8@ init~10@ nonempty_idx~12@ pt~14@) (not ((_ is main!impl_u.l1.NodeEntry./Empty) (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))) (I nonempty_idx~12@)))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_aux_not_empty. self~2@ layer~4@ ptr~6@ base~8@ init~10@ nonempty_idx~12@ pt~14@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_not_empty_at_implies_interp_at_aux_not_empty._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_not_empty_at_implies_interp_at_aux_not_empty._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_empty_at_implies_interp_at_aux_empty")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_aux_empty. (main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%235 Bool)
(declare-const %%global_location_label%%236 Bool)
(declare-const %%global_location_label%%237 Bool)
(declare-const %%global_location_label%%238 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (init~10@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (pt~12@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_aux_empty. self~2@ layer~4@ ptr~6@ base~8@ init~10@ pt~12@) (and (=> %%global_location_label%%235 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (=> %%global_location_label%%236 (main!impl_u.l2_impl.impl&%1.empty_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (=> %%global_location_label%%237 (<= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@)) main!definitions_t.X86_NUM_ENTRIES.?)) (=> %%global_location_label%%238 (forall ((i~54$ Poly)) (! (=> (has_type i~54$ NAT) (=> (< (%I i~54$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@))) (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) i~54$)) main!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) i~54$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_empty_at_implies_interp_at_aux_empty_136 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_empty_at_implies_interp_at_aux_empty_136))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_aux_empty. self~2@ layer~4@ ptr~6@ base~8@ init~10@ pt~12@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_empty_at_implies_interp_at_aux_empty._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_empty_at_implies_interp_at_aux_empty._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_empty_at_implies_interp_at_aux_empty")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_aux_empty. (main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (init~10@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (pt~12@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_aux_empty. self~2@ layer~4@ ptr~6@ base~8@ init~10@ pt~12@) (forall ((i~108$ Poly)) (! (=> (has_type i~108$ NAT) (=> (< (%I i~108$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) i~108$)) main!impl_u.l1.NodeEntry./Empty))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~10@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) i~108$)) :qid user_main__impl_u__l2_impl__PageTable__lemma_empty_at_implies_interp_at_aux_empty_137 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__lemma_empty_at_implies_interp_at_aux_empty_137))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_aux_empty. self~2@ layer~4@ ptr~6@ base~8@ init~10@ pt~12@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_empty_at_implies_interp_at_aux_empty._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_empty_at_implies_interp_at_aux_empty._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_empty_at_implies_interp_at_empty")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_empty. (main!impl_u.l2_impl.PageTable. Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%239 Bool)
(declare-const %%global_location_label%%240 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_empty. self~2@ layer~4@ ptr~6@ base~8@ pt~10@) (and (=> %%global_location_label%%239 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))) (=> %%global_location_label%%240 (main!impl_u.l2_impl.impl&%1.empty_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_empty. self~2@ layer~4@ ptr~6@ base~8@ pt~10@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_empty_at_implies_interp_at_empty._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_empty_at_implies_interp_at_empty._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_empty_at_implies_interp_at_empty")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_empty. (main!impl_u.l2_impl.PageTable. Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_empty. self~2@ layer~4@ ptr~6@ base~8@ pt~10@) (main!impl_u.l1.impl&%0.empty.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_empty. self~2@ layer~4@ ptr~6@ base~8@ pt~10@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_empty_at_implies_interp_at_empty._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_empty_at_implies_interp_at_empty._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_not_empty_at_implies_interp_at_not_empty")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_not_empty. (main!impl_u.l2_impl.PageTable. Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%241 Bool)
(declare-const %%global_location_label%%242 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_not_empty. self~2@ layer~4@ ptr~6@ base~8@ pt~10@) (and (=> %%global_location_label%%241 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))) (=> %%global_location_label%%242 (not (main!impl_u.l2_impl.impl&%1.empty_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@)))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_not_empty. self~2@ layer~4@ ptr~6@ base~8@ pt~10@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_not_empty_at_implies_interp_at_not_empty._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_not_empty_at_implies_interp_at_not_empty._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_not_empty_at_implies_interp_at_not_empty")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_not_empty. (main!impl_u.l2_impl.PageTable. Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_not_empty. self~2@ layer~4@ ptr~6@ base~8@ pt~10@) (not (main!impl_u.l1.impl&%0.empty.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@)))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_not_empty. self~2@ layer~4@ ptr~6@ base~8@ pt~10@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_not_empty_at_implies_interp_at_not_empty._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_not_empty_at_implies_interp_at_not_empty._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_inv_at_doesnt_use_ghost_pt")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_inv_at_doesnt_use_ghost_pt. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%243 Bool)
(declare-const %%global_location_label%%244 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (other~4@ main!impl_u.l2_impl.PageTable.) (layer~6@ Int) (ptr~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_inv_at_doesnt_use_ghost_pt. self~2@ other~4@ layer~6@ ptr~8@ pt~10@) (and (=> %%global_location_label%%243 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~6@) (I ptr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))) (=> %%global_location_label%%244 (= (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. other~4@))) (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@))))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_inv_at_doesnt_use_ghost_pt. self~2@ other~4@ layer~6@ ptr~8@ pt~10@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_inv_at_doesnt_use_ghost_pt._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_inv_at_doesnt_use_ghost_pt._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_inv_at_doesnt_use_ghost_pt")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_inv_at_doesnt_use_ghost_pt. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (other~4@ main!impl_u.l2_impl.PageTable.) (layer~6@ Int) (ptr~8@ Int) (pt~10@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_inv_at_doesnt_use_ghost_pt. self~2@ other~4@ layer~6@ ptr~8@ pt~10@) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. other~4@) (I layer~6@) (I ptr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~10@))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_inv_at_doesnt_use_ghost_pt. self~2@ other~4@ layer~6@ ptr~8@ pt~10@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_inv_at_doesnt_use_ghost_pt._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_inv_at_doesnt_use_ghost_pt._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::lemma_interp_at_aux_doesnt_use_ghost_pt")
(declare-fun req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_doesnt_use_ghost_pt. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%245 Bool)
(declare-const %%global_location_label%%246 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (other~4@ main!impl_u.l2_impl.PageTable.) (layer~6@ Int) (ptr~8@ Int) (base~10@ Int) (init~12@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (pt~14@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_doesnt_use_ghost_pt. self~2@ other~4@ layer~6@ ptr~8@ base~10@ init~12@ pt~14@) (and (=> %%global_location_label%%245 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~6@) (I ptr~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@))) (=> %%global_location_label%%246 (= (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. other~4@))) (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@))))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_doesnt_use_ghost_pt. self~2@ other~4@ layer~6@ ptr~8@ base~10@ init~12@ pt~14@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.lemma_interp_at_aux_doesnt_use_ghost_pt._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.lemma_interp_at_aux_doesnt_use_ghost_pt._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::lemma_interp_at_aux_doesnt_use_ghost_pt")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_doesnt_use_ghost_pt. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int Int vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. main!impl_u.l2_impl.PTDir.) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (other~4@ main!impl_u.l2_impl.PageTable.) (layer~6@ Int) (ptr~8@ Int) (base~10@ Int) (init~12@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.) (pt~14@ main!impl_u.l2_impl.PTDir.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_doesnt_use_ghost_pt. self~2@ other~4@ layer~6@ ptr~8@ base~10@ init~12@ pt~14@) (= (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~6@) (I ptr~8@) (I base~10@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~12@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@)) (main!impl_u.l2_impl.impl&%1.interp_at_aux.? (Poly%main!impl_u.l2_impl.PageTable. other~4@) (I layer~6@) (I ptr~8@) (I base~10@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. init~12@) (Poly%main!impl_u.l2_impl.PTDir. pt~14@)))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_doesnt_use_ghost_pt. self~2@ other~4@ layer~6@ ptr~8@ base~10@ init~12@ pt~14@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.lemma_interp_at_aux_doesnt_use_ghost_pt._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.lemma_interp_at_aux_doesnt_use_ghost_pt._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::map_frame")
(declare-fun req%main!impl_u.l2_impl.impl&%1.map_frame. (main!impl_u.l2_impl.PageTable. Int main!definitions_t.PageTableEntryExec.) Bool)
(declare-const %%global_location_label%%247 Bool)
(declare-const %%global_location_label%%248 Bool)
(declare-const %%global_location_label%%249 Bool)
(declare-const %%global_location_label%%250 Bool)
(declare-const %%global_location_label%%251 Bool)
(declare-const %%global_location_label%%252 Bool)
(declare-const %%global_location_label%%253 Bool)
(assert (forall ((pre%self~2@ main!impl_u.l2_impl.PageTable.) (vaddr~4@ Int) (pte~6@ main!definitions_t.PageTableEntryExec.)) (! (= (req%main!impl_u.l2_impl.impl&%1.map_frame. pre%self~2@ vaddr~4@ pte~6@) (and (=> %%global_location_label%%247 (main!impl_u.l2_impl.impl&%1.inv.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))) (=> %%global_location_label%%248 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))) (=> %%global_location_label%%249 (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))))) (=> %%global_location_label%%250 (>= (main!spec_t.mem.impl&%1.alloc_available_pages.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))) 3)) (=> %%global_location_label%%251 (main!impl_u.l2_impl.impl&%1.accepted_mapping.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I vaddr~4@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~6@))))) (=> %%global_location_label%%252 (main!impl_u.l1.impl&%0.accepted_mapping.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))) (I vaddr~4@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~6@))))) (=> %%global_location_label%%253 (< vaddr~4@ main!definitions_t.MAX_BASE.?)))) :pattern ((req%main!impl_u.l2_impl.impl&%1.map_frame. pre%self~2@ vaddr~4@ pte~6@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.map_frame._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.map_frame._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::map_frame")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.map_frame. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int main!definitions_t.PageTableEntryExec. main!definitions_t.MapResult.) Bool)
(assert (forall ((pre%self~2@ main!impl_u.l2_impl.PageTable.) (self~2@ main!impl_u.l2_impl.PageTable.) (vaddr~4@ Int) (pte~6@ main!definitions_t.PageTableEntryExec.) (res~111@ main!definitions_t.MapResult.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.map_frame. pre%self~2@ self~2@ vaddr~4@ pte~6@ res~111@) (and (has_type (Poly%main!impl_u.l2_impl.PageTable. self~2@) TYPE%main!impl_u.l2_impl.PageTable.) (main!impl_u.l2_impl.impl&%1.inv.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)) (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))))) (ite ((_ is main!definitions_t.MapResult./Ok) res~111@) (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))) (I vaddr~4@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~6@))))) (= (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (main!impl_u.l1.impl&%0.map_frame.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))) (I vaddr~4@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~6@)))))) (ite ((_ is main!definitions_t.MapResult./Ok) res~111@) (= (core!result.Result./Ok (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (main!impl_u.l0.impl&%0.map_frame.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))) (I vaddr~4@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~6@))))) (= (core!result.Result./Err (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (main!impl_u.l0.impl&%0.map_frame.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))) (I vaddr~4@) (Poly%main!definitions_t.PageTableEntry. (main!definitions_t.impl&%3.view.? (Poly%main!definitions_t.PageTableEntryExec. pte~6@)))))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.map_frame. pre%self~2@ self~2@ vaddr~4@ pte~6@ res~111@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.map_frame._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.map_frame._definition)))
(set-info :comment ";; Function-Specs main::definitions_t::ArchExec::num_entries")
(declare-fun req%main!definitions_t.impl&%6.num_entries. (main!definitions_t.ArchExec. Int) Bool)
(declare-const %%global_location_label%%254 Bool)
(assert (forall ((self~2@ main!definitions_t.ArchExec.) (layer~4@ Int)) (! (= (req%main!definitions_t.impl&%6.num_entries. self~2@ layer~4@) (=> %%global_location_label%%254 (< layer~4@ (vstd!seq.Seq.len.? TYPE%main!definitions_t.ArchLayer. TYPE%main!definitions_t.ArchLayer. (Poly%vstd!seq.Seq<main!definitions_t.ArchLayer.>. (main!definitions_t.Arch./Arch/layers (%Poly%main!definitions_t.Arch. (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@)))))))))) :pattern ((req%main!definitions_t.impl&%6.num_entries. self~2@ layer~4@)) :qid internal_req__main!definitions_t.impl&__6.num_entries._definition :skolemid skolem_internal_req__main!definitions_t.impl&__6.num_entries._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::ArchExec::num_entries")
(declare-fun ens%main!definitions_t.impl&%6.num_entries. (main!definitions_t.ArchExec. Int Int) Bool)
(assert (forall ((self~2@ main!definitions_t.ArchExec.) (layer~4@ Int) (res~30@ Int)) (! (= (ens%main!definitions_t.impl&%6.num_entries. self~2@ layer~4@ res~30@) (and (uInv SZ res~30@) (= res~30@ (main!definitions_t.impl&%7.num_entries.? (Poly%main!definitions_t.Arch. (main!definitions_t.impl&%6.view.? (Poly%main!definitions_t.ArchExec. self~2@))) (I layer~4@))))) :pattern ((ens%main!definitions_t.impl&%6.num_entries. self~2@ layer~4@ res~30@)) :qid internal_ens__main!definitions_t.impl&__6.num_entries._definition :skolemid skolem_internal_ens__main!definitions_t.impl&__6.num_entries._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::is_directory_empty")
(declare-fun req%main!impl_u.l2_impl.impl&%1.is_directory_empty. (main!impl_u.l2_impl.PageTable. Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%255 Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (pt~11@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.is_directory_empty. self~2@ layer~4@ ptr~6@ pt~11@) (=> %%global_location_label%%255 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~11@)))) :pattern ((req%main!impl_u.l2_impl.impl&%1.is_directory_empty. self~2@ layer~4@ ptr~6@ pt~11@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.is_directory_empty._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.is_directory_empty._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::is_directory_empty")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.is_directory_empty. (main!impl_u.l2_impl.PageTable. Int Int main!impl_u.l2_impl.PTDir. Bool) Bool)
(assert (forall ((self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (pt~11@ main!impl_u.l2_impl.PTDir.) (res~54@ Bool)) (! (= (ens%main!impl_u.l2_impl.impl&%1.is_directory_empty. self~2@ layer~4@ ptr~6@ pt~11@ res~54@) (= res~54@ (main!impl_u.l2_impl.impl&%1.empty_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~11@)))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.is_directory_empty. self~2@ layer~4@ ptr~6@ pt~11@ res~54@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.is_directory_empty._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.is_directory_empty._definition)))
(set-info :comment ";; Function-Specs main::spec_t::mem::PageTableMemory::dealloc_page")
(declare-fun req%main!spec_t.mem.impl&%1.dealloc_page. (main!spec_t.mem.PageTableMemory. main!definitions_t.MemRegionExec.) Bool)
(declare-const %%global_location_label%%256 Bool)
(declare-const %%global_location_label%%257 Bool)
(assert (forall ((pre%self~2@ main!spec_t.mem.PageTableMemory.) (r~4@ main!definitions_t.MemRegionExec.)) (! (= (req%main!spec_t.mem.impl&%1.dealloc_page. pre%self~2@ r~4@) (and (=> %%global_location_label%%256 (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (=> %%global_location_label%%257 (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~4@))))))) :pattern ((req%main!spec_t.mem.impl&%1.dealloc_page. pre%self~2@ r~4@)) :qid internal_req__main!spec_t.mem.impl&__1.dealloc_page._definition :skolemid skolem_internal_req__main!spec_t.mem.impl&__1.dealloc_page._definition)))
(set-info :comment ";; Function-Axioms main::spec_t::mem::PageTableMemory::dealloc_page")
(declare-fun ens%main!spec_t.mem.impl&%1.dealloc_page. (main!spec_t.mem.PageTableMemory. main!spec_t.mem.PageTableMemory. main!definitions_t.MemRegionExec.) Bool)
(assert (forall ((pre%self~2@ main!spec_t.mem.PageTableMemory.) (self~2@ main!spec_t.mem.PageTableMemory.) (r~4@ main!definitions_t.MemRegionExec.)) (! (= (ens%main!spec_t.mem.impl&%1.dealloc_page. pre%self~2@ self~2@ r~4@) (and (= (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.remove.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (Poly%main!definitions_t.MemRegion. (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~4@)))))) (forall ((r2~67$ Poly)) (! (=> (has_type r2~67$ TYPE%main!definitions_t.MemRegion.) (=> (not (= (%Poly%main!definitions_t.MemRegion. r2~67$) (main!definitions_t.impl&%2.view.? (Poly%main!definitions_t.MemRegionExec. r~4@)))) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. self~2@) r2~67$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@) r2~67$)))) :pattern ((main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. self~2@) r2~67$)) :qid user_main__spec_t__mem__PageTableMemory__dealloc_page_138 :skolemid skolem_user_main__spec_t__mem__PageTableMemory__dealloc_page_138)) (= (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (= (main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)) (main!spec_t.mem.impl&%1.phys_mem_ref_as_usize_spec.? (Poly%main!spec_t.mem.PageTableMemory. pre%self~2@))) (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. self~2@)))) :pattern ((ens%main!spec_t.mem.impl&%1.dealloc_page. pre%self~2@ self~2@ r~4@)) :qid internal_ens__main!spec_t.mem.impl&__1.dealloc_page._definition :skolemid skolem_internal_ens__main!spec_t.mem.impl&__1.dealloc_page._definition)))
(set-info :comment ";; Function-Specs main::definitions_t::aligned_exec")
(declare-fun req%main!definitions_t.aligned_exec. (Int Int) Bool)
(declare-const %%global_location_label%%258 Bool)
(assert (forall ((addr~2@ Int) (size~4@ Int)) (! (= (req%main!definitions_t.aligned_exec. addr~2@ size~4@) (=> %%global_location_label%%258 (> size~4@ 0))) :pattern ((req%main!definitions_t.aligned_exec. addr~2@ size~4@)) :qid internal_req__main!definitions_t.aligned_exec._definition :skolemid skolem_internal_req__main!definitions_t.aligned_exec._definition)))
(set-info :comment ";; Function-Axioms main::definitions_t::aligned_exec")
(declare-fun ens%main!definitions_t.aligned_exec. (Int Int Bool) Bool)
(assert (forall ((addr~2@ Int) (size~4@ Int) (res~29@ Bool)) (! (= (ens%main!definitions_t.aligned_exec. addr~2@ size~4@ res~29@) (= res~29@ (main!definitions_t.aligned.? (I addr~2@) (I size~4@)))) :pattern ((ens%main!definitions_t.aligned_exec. addr~2@ size~4@ res~29@)) :qid internal_ens__main!definitions_t.aligned_exec._definition :skolemid skolem_internal_ens__main!definitions_t.aligned_exec._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::unmap_aux")
(declare-fun req%main!impl_u.l2_impl.impl&%1.unmap_aux. (main!impl_u.l2_impl.PageTable. Int Int Int Int main!impl_u.l2_impl.PTDir.) Bool)
(declare-const %%global_location_label%%259 Bool)
(declare-const %%global_location_label%%260 Bool)
(declare-const %%global_location_label%%261 Bool)
(declare-const %%global_location_label%%262 Bool)
(declare-const %%global_location_label%%263 Bool)
(assert (forall ((pre%self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (vaddr~10@ Int) (pt~12@ main!impl_u.l2_impl.PTDir.)) (! (= (req%main!impl_u.l2_impl.impl&%1.unmap_aux. pre%self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pt~12@) (and (=> %%global_location_label%%259 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (=> %%global_location_label%%260 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (=> %%global_location_label%%261 (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))))) (=> %%global_location_label%%262 (main!impl_u.l1.impl&%0.accepted_unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))) (=> %%global_location_label%%263 (and (<= base~8@ vaddr~10@) (< vaddr~10@ main!definitions_t.MAX_BASE.?))))) :pattern ((req%main!impl_u.l2_impl.impl&%1.unmap_aux. pre%self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pt~12@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.unmap_aux._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.unmap_aux._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::unmap_aux")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.unmap_aux. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int Int Int Int main!impl_u.l2_impl.PTDir. core!result.Result.) Bool)
(assert (forall ((pre%self~2@ main!impl_u.l2_impl.PageTable.) (self~2@ main!impl_u.l2_impl.PageTable.) (layer~4@ Int) (ptr~6@ Int) (base~8@ Int) (vaddr~10@ Int) (pt~12@ main!impl_u.l2_impl.PTDir.) (res~164@ core!result.Result.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.unmap_aux. pre%self~2@ self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pt~12@ res~164@) (and (has_type (Poly%core!result.Result. res~164@) (TYPE%core!result.Result. (TYPE%tuple%2. TYPE%main!impl_u.l2_impl.PTDir. (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.)) TYPE%tuple%0.)) (has_type (Poly%main!impl_u.l2_impl.PageTable. self~2@) TYPE%main!impl_u.l2_impl.PageTable.) (ite ((_ is core!result.Result./Ok) res~164@) (let ((resv~170$ (%Poly%tuple%2. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~164@)))))) (let ((pt_res~180$ (%Poly%main!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/field%0 (%Poly%tuple%2. (Poly%tuple%2. resv~170$)))))) (let ((removed_regions~181$ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (tuple%2./tuple%2/field%1 (%Poly%tuple%2. (Poly%tuple%2. resv~170$)))))) (and (and (and (and (and (and (= (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~181$)))) (= (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~181$))))) (forall ((r~235$ Poly)) (! (=> (has_type r~235$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~181$) r~235$) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) r~235$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) r~235$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_139 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_139))) (forall ((r~266$ Poly)) (! (=> (has_type r~266$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~181$) r~266$) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) r~266$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) r~266$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_140 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_140))) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$))) (forall ((r~313$ Poly)) (! (=> (has_type r~313$ TYPE%main!definitions_t.MemRegion.) (=> (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) r~313$)) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) r~313$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))) r~313$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) r~313$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_141 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_141))) (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$))) (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))))) (let ((e~366$ (%Poly%tuple%0. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~164@)))))) (= self~2@ pre%self~2@))) (ite ((_ is core!result.Result./Ok) res~164@) (let ((resv~387$ (%Poly%tuple%2. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~164@)))))) (let ((pt_res~397$ (%Poly%main!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/field%0 (%Poly%tuple%2. (Poly%tuple%2. resv~387$)))))) (let ((removed_regions~398$ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (tuple%2./tuple%2/field%1 (%Poly%tuple%2. (Poly%tuple%2. resv~387$)))))) (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~397$)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))) (let ((e~483$ (%Poly%tuple%0. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~164@)))))) (= (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))))) (= (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@))))) (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.unmap_aux. pre%self~2@ self~2@ layer~4@ ptr~6@ base~8@ vaddr~10@ pt~12@ res~164@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.unmap_aux._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.unmap_aux._definition)))
(set-info :comment ";; Function-Specs main::impl_u::l2_impl::PageTable::unmap")
(declare-fun req%main!impl_u.l2_impl.impl&%1.unmap. (main!impl_u.l2_impl.PageTable. Int) Bool)
(declare-const %%global_location_label%%264 Bool)
(declare-const %%global_location_label%%265 Bool)
(declare-const %%global_location_label%%266 Bool)
(declare-const %%global_location_label%%267 Bool)
(declare-const %%global_location_label%%268 Bool)
(assert (forall ((pre%self~2@ main!impl_u.l2_impl.PageTable.) (vaddr~4@ Int)) (! (= (req%main!impl_u.l2_impl.impl&%1.unmap. pre%self~2@ vaddr~4@) (and (=> %%global_location_label%%264 (main!impl_u.l2_impl.impl&%1.inv.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))) (=> %%global_location_label%%265 (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))) (=> %%global_location_label%%266 (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@)))))) (=> %%global_location_label%%267 (main!impl_u.l1.impl&%0.accepted_unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))) (I vaddr~4@))) (=> %%global_location_label%%268 (< vaddr~4@ main!definitions_t.MAX_BASE.?)))) :pattern ((req%main!impl_u.l2_impl.impl&%1.unmap. pre%self~2@ vaddr~4@)) :qid internal_req__main!impl_u.l2_impl.impl&__1.unmap._definition :skolemid skolem_internal_req__main!impl_u.l2_impl.impl&__1.unmap._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::PageTable::unmap")
(declare-fun ens%main!impl_u.l2_impl.impl&%1.unmap. (main!impl_u.l2_impl.PageTable. main!impl_u.l2_impl.PageTable. Int main!definitions_t.UnmapResult.) Bool)
(assert (forall ((pre%self~2@ main!impl_u.l2_impl.PageTable.) (self~2@ main!impl_u.l2_impl.PageTable.) (vaddr~4@ Int) (res~68@ main!definitions_t.UnmapResult.)) (! (= (ens%main!impl_u.l2_impl.impl&%1.unmap. pre%self~2@ self~2@ vaddr~4@ res~68@) (and (has_type (Poly%main!impl_u.l2_impl.PageTable. self~2@) TYPE%main!impl_u.l2_impl.PageTable.) (main!impl_u.l2_impl.impl&%1.inv.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)) (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))))) (ite ((_ is main!definitions_t.UnmapResult./Ok) res~68@) (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))) (I vaddr~4@))) (= (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))) (I vaddr~4@)))) (ite ((_ is main!definitions_t.UnmapResult./Ok) res~68@) (= (core!result.Result./Ok (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (main!impl_u.l0.impl&%0.unmap.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))) (I vaddr~4@))) (= (core!result.Result./Err (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. self~2@)))))) (main!impl_u.l0.impl&%0.unmap.? (Poly%main!impl_u.l0.PageTableContents. (main!impl_u.l1.impl&%0.interp.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp.? (Poly%main!impl_u.l2_impl.PageTable. pre%self~2@))))) (I vaddr~4@)))))) :pattern ((ens%main!impl_u.l2_impl.impl&%1.unmap. pre%self~2@ self~2@ vaddr~4@ res~68@)) :qid internal_ens__main!impl_u.l2_impl.impl&__1.unmap._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.impl&__1.unmap._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::MASK_L2_PG_FLAG_PS")
(assert (fuel_bool_default fuel%main!impl_u.l2_impl.MASK_L2_PG_FLAG_PS.))
(assert (=> (fuel_bool fuel%main!impl_u.l2_impl.MASK_L2_PG_FLAG_PS.) (= main!impl_u.l2_impl.MASK_L2_PG_FLAG_PS.? (uClip 64 (uintshl 64 (I 1) (I 7))))))
(assert (uInv 64 main!impl_u.l2_impl.MASK_L2_PG_FLAG_PS.?))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::lemma_addr_masks_facts")
(declare-fun ens%main!impl_u.l2_impl.lemma_addr_masks_facts. (Int) Bool)
(assert (forall ((address~2@ Int)) (! (= (ens%main!impl_u.l2_impl.lemma_addr_masks_facts. address~2@) (and (=> (= (uClip 64 (uintand 64 (I main!impl_u.l2_impl.MASK_L2_PG_ADDR.?) (I address~2@))) address~2@) (= (uClip 64 (uintand 64 (I main!impl_u.l2_impl.MASK_L3_PG_ADDR.?) (I address~2@))) address~2@)) (=> (= (uClip 64 (uintand 64 (I main!impl_u.l2_impl.MASK_L1_PG_ADDR.?) (I address~2@))) address~2@) (= (uClip 64 (uintand 64 (I main!impl_u.l2_impl.MASK_L3_PG_ADDR.?) (I address~2@))) address~2@)))) :pattern ((ens%main!impl_u.l2_impl.lemma_addr_masks_facts. address~2@)) :qid internal_ens__main!impl_u.l2_impl.lemma_addr_masks_facts._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.lemma_addr_masks_facts._definition)))
(set-info :comment ";; Function-Axioms main::impl_u::l2_impl::lemma_addr_masks_facts2")
(declare-fun ens%main!impl_u.l2_impl.lemma_addr_masks_facts2. (Int) Bool)
(assert (forall ((address~2@ Int)) (! (= (ens%main!impl_u.l2_impl.lemma_addr_masks_facts2. address~2@) (and (= (uClip 64 (uintand 64 (I (uClip 64 (uintand 64 (I address~2@) (I main!impl_u.l2_impl.MASK_L3_PG_ADDR.?)))) (I main!impl_u.l2_impl.MASK_L2_PG_ADDR.?))) (uClip 64 (uintand 64 (I address~2@) (I main!impl_u.l2_impl.MASK_L2_PG_ADDR.?)))) (= (uClip 64 (uintand 64 (I (uClip 64 (uintand 64 (I address~2@) (I main!impl_u.l2_impl.MASK_L3_PG_ADDR.?)))) (I main!impl_u.l2_impl.MASK_L1_PG_ADDR.?))) (uClip 64 (uintand 64 (I address~2@) (I main!impl_u.l2_impl.MASK_L1_PG_ADDR.?)))))) :pattern ((ens%main!impl_u.l2_impl.lemma_addr_masks_facts2. address~2@)) :qid internal_ens__main!impl_u.l2_impl.lemma_addr_masks_facts2._definition :skolemid skolem_internal_ens__main!impl_u.l2_impl.lemma_addr_masks_facts2._definition)))
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::lemma_zero_is_empty")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::lemma_new_entry_addr_mask_is_address")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::new_page_entry")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::new_dir_entry")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::new_entry")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::flags")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::address")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::is_mapping")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::is_page")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageDirectoryEntry::is_dir")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::entry_at")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_inv_at_different_memory")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_interp_at_entry_different_memory")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_interp_at_facts")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_interp_at_aux_facts")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::resolve_aux")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::resolve")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::map_frame_aux")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_zeroed_page_implies_empty_at")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_empty_at_interp_at_aux_equal_l1_empty_dir")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_empty_at_interp_at_equal_l1_empty_dir")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_not_empty_at_implies_interp_at_aux_not_empty")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_empty_at_implies_interp_at_aux_empty")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_empty_at_implies_interp_at_empty")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_not_empty_at_implies_interp_at_not_empty")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_inv_at_doesnt_use_ghost_pt")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::lemma_interp_at_aux_doesnt_use_ghost_pt")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::map_frame")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::is_directory_empty")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::is_directory_empty")
(set-info :comment ";; Function-Def main::impl_u::l2_impl::PageTable::unmap_aux")
(push 1)
(declare-const res~164@ core!result.Result.)
(declare-const self~2@0 main!impl_u.l2_impl.PageTable.)
(declare-const layer~4@ Int)
(declare-const ptr~6@ Int)
(declare-const base~8@ Int)
(declare-const vaddr~10@ Int)
(declare-const pt~12@ main!impl_u.l2_impl.PTDir.)
(declare-const tmp%1@ main!definitions_t.ArchExec.)
(declare-const tmp%2@ Int)
(declare-const tmp%3@ Int)
(declare-const tmp%4@ main!definitions_t.ArchExec.)
(declare-const tmp%5@ Int)
(declare-const tmp%6@ Bool)
(declare-const tmp%7@ Bool)
(declare-const tmp%8@ Bool)
(declare-const tmp%9@ Int)
(declare-const tmp%10@ Bool)
(declare-const tmp%11@ Bool)
(declare-const tmp%12@ Bool)
(declare-const tmp%13@ Int)
(declare-const tmp%14@ Bool)
(declare-const tmp%15@ Bool)
(declare-const tmp%16@ Bool)
(declare-const tmp%17@ Bool)
(declare-const tmp%18@ Bool)
(declare-const tmp%19@ Bool)
(declare-const tmp%20@ Bool)
(declare-const tmp%21@ Bool)
(declare-const tmp%22@ Int)
(declare-const tmp%23@ main!definitions_t.MemRegion.)
(declare-const tmp%24@ main!definitions_t.MemRegionExec.)
(declare-const tmp%25@ Bool)
(declare-const tmp%26@ Bool)
(declare-const tmp%27@ Bool)
(declare-const tmp%28@ Bool)
(declare-const tmp%29@ Bool)
(declare-const tmp%30@ main!impl_u.l2_impl.PageDirectoryEntry.)
(declare-const i~2076@ Poly)
(declare-const tmp%31@ Int)
(declare-const tmp%32@ Int)
(declare-const tmp%33@ main!impl_u.l2_impl.PTDir.)
(declare-const entry~2203@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)
(declare-const tmp%34@ Bool)
(declare-const elem~2389@ Poly)
(declare-const tmp%35@ Bool)
(declare-const elem~2510@ Poly)
(declare-const tmp%36@ Bool)
(declare-const tmp%37@ Bool)
(declare-const tmp%38@ Bool)
(declare-const tmp%39@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-const i~2829@ Poly)
(declare-const tmp%40@ Int)
(declare-const tmp%41@ Bool)
(declare-const tmp%42@ Bool)
(declare-const tmp%43@ Bool)
(declare-const idx~3422@ Poly)
(declare-const tmp%44@ Bool)
(declare-const s1~3328@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-const s2~3384@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-const s1~2347@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const s2~2366@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const s1~2468@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const s2~2487@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const self_with_empty~1400@ main!impl_u.l2_impl.PageTable.)
(declare-const pt_with_empty~1451@ main!impl_u.l2_impl.PTDir.)
(declare-const removed_regions~1511@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const pt_res~1563@ main!impl_u.l2_impl.PTDir.)
(declare-const res~1589@ tuple%2.)
(declare-const tmp%45@ Bool)
(declare-const tmp%46@ Bool)
(declare-const tmp%47@ Bool)
(declare-const tmp%48@ Bool)
(declare-const tmp%49@ Bool)
(declare-const i~4049@ Poly)
(declare-const tmp%50@ Int)
(declare-const tmp%51@ Int)
(declare-const tmp%52@ main!impl_u.l2_impl.PTDir.)
(declare-const entry~4176@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)
(declare-const elem~4323@ Poly)
(declare-const tmp%53@ Bool)
(declare-const elem~4444@ Poly)
(declare-const tmp%54@ Bool)
(declare-const tmp%55@ Bool)
(declare-const tmp%56@ Bool)
(declare-const tmp%57@ Bool)
(declare-const tmp%58@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-const i~4745@ Poly)
(declare-const tmp%59@ Bool)
(declare-const tmp%60@ Bool)
(declare-const tmp%61@ Bool)
(declare-const tmp%62@ Int)
(declare-const tmp%63@ Bool)
(declare-const tmp%64@ Bool)
(declare-const tmp%65@ Bool)
(declare-const idx~5594@ Poly)
(declare-const tmp%66@ Bool)
(declare-const s1~5500@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-const s2~5556@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-const s1~4281@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const s2~4300@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const s1~4402@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const s2~4421@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const pt_res~3569@ main!impl_u.l2_impl.PTDir.)
(declare-const res~3595@ tuple%2.)
(declare-const tmp%67@ core!result.Result.)
(declare-const dir_pt_res~1081@ main!impl_u.l2_impl.PTDir.)
(declare-const removed_regions~1100@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const rec_res~1061@ tuple%2.)
(declare-const tmp%68@ Bool)
(declare-const tmp%69@ Bool)
(declare-const e~5685@ tuple%0.)
(declare-const tmp%70@ core!result.Result.)
(declare-const tmp%%1@ core!result.Result.)
(declare-const dir_addr~900@ Int)
(declare-const dir_pt~958@ main!impl_u.l2_impl.PTDir.)
(declare-const tmp%71@ main!definitions_t.ArchExec.)
(declare-const tmp%72@ Int)
(declare-const tmp%73@ Bool)
(declare-const tmp%74@ main!definitions_t.MemRegion.)
(declare-const tmp%75@ Bool)
(declare-const tmp%76@ Bool)
(declare-const tmp%77@ Bool)
(declare-const tmp%78@ Bool)
(declare-const tmp%79@ Bool)
(declare-const i~6271@ Poly)
(declare-const tmp%80@ Bool)
(declare-const tmp%81@ Int)
(declare-const tmp%82@ Int)
(declare-const tmp%83@ main!impl_u.l2_impl.PTDir.)
(declare-const tmp%84@ Bool)
(declare-const entry~6398@ main!impl_u.l2_impl.GhostPageDirectoryEntry.)
(declare-const elem~6625@ Poly)
(declare-const tmp%85@ Bool)
(declare-const elem~6746@ Poly)
(declare-const tmp%86@ Bool)
(declare-const tmp%87@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-const tmp%88@ Bool)
(declare-const tmp%89@ Bool)
(declare-const i~7058@ Poly)
(declare-const tmp%90@ Bool)
(declare-const tmp%91@ Bool)
(declare-const idx~7496@ Poly)
(declare-const tmp%92@ Bool)
(declare-const s1~7402@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-const s2~7458@ vstd!seq.Seq<main!impl_u.l1.NodeEntry.>.)
(declare-const new_entry~6011@ main!impl_u.l2_impl.PageDirectoryEntry.)
(declare-const s1~6583@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const s2~6602@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const s1~6704@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const s2~6723@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const removed_regions~5862@ vstd!set.Set<main!definitions_t.MemRegion.>.)
(declare-const res~5888@ tuple%2.)
(declare-const tmp%93@ Bool)
(declare-const tmp%94@ Bool)
(declare-const tmp%95@ core!result.Result.)
(declare-const tmp%96@ core!result.Result.)
(declare-const tmp%97@ Bool)
(declare-const tmp%98@ Bool)
(declare-const tmp%99@ core!result.Result.)
(declare-const idx~649@ Int)
(declare-const entry~716@ main!impl_u.l2_impl.PageDirectoryEntry.)
(declare-const interp~759@ main!impl_u.l1.Directory.)
(declare-const entry_base~822@ Int)
(assert fuel_defaults)
(assert (has_type (Poly%main!impl_u.l2_impl.PageTable. self~2@0) TYPE%main!impl_u.l2_impl.PageTable.))
(assert (uInv SZ layer~4@))
(assert (uInv SZ ptr~6@))
(assert (uInv SZ base~8@))
(assert (uInv SZ vaddr~10@))
(assert (has_type (Poly%main!impl_u.l2_impl.PTDir. pt~12@) TYPE%main!impl_u.l2_impl.PTDir.))
(assert (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))
(assert (main!impl_u.l1.impl&%0.inv.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))
(assert (main!spec_t.mem.impl&%1.inv.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0))))))
(assert (main!impl_u.l1.impl&%0.accepted_unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))
(assert (and (<= base~8@ vaddr~10@) (< vaddr~10@ main!definitions_t.MAX_BASE.?)))
(declare-const self~2@1 main!impl_u.l2_impl.PageTable.)
(declare-const self~2@2 main!impl_u.l2_impl.PageTable.)
(declare-const self~2@3 main!impl_u.l2_impl.PageTable.)
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%switch_label%%4 Bool)
(declare-const %%switch_label%%5 Bool)
(declare-const %%switch_label%%6 Bool)
(declare-const %%switch_label%%7 Bool)
(declare-const %%switch_label%%8 Bool)
(declare-const %%switch_label%%9 Bool)
(declare-const %%switch_label%%10 Bool)
(declare-const %%switch_label%%11 Bool)
(declare-const %%switch_label%%12 Bool)
(declare-const %%switch_label%%13 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%41 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%42 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%43 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%44 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%45 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%46 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%47 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%48 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%49 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%50 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%51 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%52 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%53 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%54 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%55 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%56 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%57 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%58 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%59 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%60 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%61 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%62 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%63 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%64 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%65 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%66 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%67 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%68 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%69 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%70 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%71 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%72 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%73 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%74 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%75 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%76 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%77 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%78 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%79 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%80 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%81 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%82 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%83 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%84 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%85 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%86 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%87 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%88 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%89 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%90 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%91 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%92 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%93 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%94 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%95 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%96 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%97 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%98 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%99 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%100 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%101 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%102 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%103 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%104 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%105 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%106 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%107 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%108 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%109 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%110 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%111 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%112 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%113 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%114 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%115 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%116 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%117 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%118 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%119 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%120 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%121 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%122 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%123 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%124 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%125 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%126 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%127 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%128 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%129 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%130 Bool)
(declare-const %%query%% Bool)
(assert (=> %%query%% (not (and (=> %%location_label%%0 (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_facts. self~2@0 layer~4@ ptr~6@ base~8@ pt~12@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_facts. self~2@0 layer~4@ ptr~6@ base~8@ pt~12@) (=> (ens%main!definitions_t.x86_arch_exec. 0 tmp%1@) (and (=> %%location_label%%1 (req%main!definitions_t.impl&%6.index_for_vaddr. tmp%1@ layer~4@ base~8@ vaddr~10@)) (=> (ens%main!definitions_t.impl&%6.index_for_vaddr. tmp%1@ layer~4@ base~8@ vaddr~10@ idx~649@) (=> (= tmp%2@ (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) (I layer~4@))) (=> (= tmp%3@ main!definitions_t.X86_NUM_ENTRIES.?) (and (=> %%location_label%%2 (req%main!impl_u.indexing.lemma_index_from_base_and_addr. base~8@ vaddr~10@ tmp%2@ tmp%3@)) (=> (ens%main!impl_u.indexing.lemma_index_from_base_and_addr. base~8@ vaddr~10@ tmp%2@ tmp%3@) (and (=> %%location_label%%3 (req%main!impl_u.l2_impl.impl&%1.entry_at. self~2@0 layer~4@ ptr~6@ idx~649@ pt~12@)) (=> (ens%main!impl_u.l2_impl.impl&%1.entry_at. self~2@0 layer~4@ ptr~6@ idx~649@ pt~12@ entry~716@) (=> (= interp~759@ (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (and (=> %%location_label%%4 (req%main!impl_u.l1.impl&%0.lemma_unmap_structure_assertions. interp~759@ vaddr~10@ idx~649@)) (=> (ens%main!impl_u.l1.impl&%0.lemma_unmap_structure_assertions. interp~759@ vaddr~10@ idx~649@) (and (=> %%location_label%%5 (req%main!impl_u.l1.impl&%0.lemma_unmap_refines_unmap. interp~759@ vaddr~10@)) (=> (ens%main!impl_u.l1.impl&%0.lemma_unmap_refines_unmap. interp~759@ vaddr~10@) (=> (ens%main!definitions_t.x86_arch_exec. 0 tmp%4@) (and (=> %%location_label%%6 (req%main!definitions_t.impl&%6.entry_base. tmp%4@ layer~4@ base~8@ idx~649@)) (=> (ens%main!definitions_t.impl&%6.entry_base. tmp%4@ layer~4@ base~8@ idx~649@ entry_base~822@) (=> (= tmp%5@ (main!definitions_t.impl&%7.entry_size.? (Poly%main!definitions_t.Arch. main!definitions_t.x86_arch_spec.?) (I layer~4@))) (and (=> %%location_label%%7 (req%main!impl_u.indexing.lemma_entry_base_from_index. base~8@ idx~649@ tmp%5@)) (=> (ens%main!impl_u.indexing.lemma_entry_base_from_index. base~8@ idx~649@ tmp%5@) (=> (= tmp%6@ (<= entry_base~822@ vaddr~10@)) (and (=> %%location_label%%8 tmp%6@) (=> tmp%6@ (and (=> %%location_label%%9 (req%main!impl_u.l2_impl.impl&%0.is_mapping. entry~716@)) (=> (ens%main!impl_u.l2_impl.impl&%0.is_mapping. entry~716@ tmp%7@) (or (and (=> tmp%7@ (and (=> %%location_label%%10 (req%main!impl_u.l2_impl.impl&%0.is_dir. entry~716@ layer~4@)) (=> (ens%main!impl_u.l2_impl.impl&%0.is_dir. entry~716@ layer~4@ tmp%8@) (or (and (=> tmp%8@ (and (=> %%location_label%%11 (req%main!impl_u.l2_impl.impl&%0.address. entry~716@)) (=> (ens%main!impl_u.l2_impl.impl&%0.address. entry~716@ tmp%9@) (=> (= dir_addr~900@ (uClip SZ tmp%9@)) (=> (= tmp%10@ (%B (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~649@))))))) (and (=> %%location_label%%12 tmp%10@) (=> tmp%10@ (=> (= dir_pt~958@ (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~649@)))))) (=> (= tmp%11@ (main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (and (=> %%location_label%%13 tmp%11@) (=> tmp%11@ (=> (= tmp%12@ (forall ((r~1000$ Poly)) (! (=> (has_type r~1000$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~649@))))))) r~1000$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) r~1000$))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) r~1000$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_297 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_297))) (and (=> %%location_label%%14 tmp%12@) (=> tmp%12@ (and (=> %%location_label%%15 (uInv SZ (+ layer~4@ 1))) (=> (= tmp%13@ (uClip SZ (+ layer~4@ 1))) (and (=> %%location_label%%16 (req%main!impl_u.l2_impl.impl&%1.unmap_aux. self~2@0 tmp%13@ dir_addr~900@ entry_base~822@ vaddr~10@ dir_pt~958@)) (=> (has_type (Poly%main!impl_u.l2_impl.PageTable. self~2@1) TYPE%main!impl_u.l2_impl.PageTable.) (=> (ens%main!impl_u.l2_impl.impl&%1.unmap_aux. self~2@0 self~2@1 tmp%13@ dir_addr~900@ entry_base~822@ vaddr~10@ dir_pt~958@ tmp%%1@) (or (and (=> ((_ is core!result.Result./Ok) tmp%%1@) (=> (= rec_res~1061@ (%Poly%tuple%2. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%1@))))) (=> (= dir_pt_res~1081@ (%Poly%main!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/field%0 (%Poly%tuple%2. (Poly%tuple%2. rec_res~1061@))))) (=> (= removed_regions~1100@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (tuple%2./tuple%2/field%1 (%Poly%tuple%2. (Poly%tuple%2. rec_res~1061@))))) (=> (= tmp%14@ (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I (nClip (+ layer~4@ 1))) (I dir_addr~900@) (Poly%main!impl_u.l2_impl.PTDir. dir_pt_res~1081@))) (and (=> %%location_label%%17 tmp%14@) (=> tmp%14@ (=> (= tmp%15@ (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I (nClip (+ layer~4@ 1))) (I dir_addr~900@) (I entry_base~822@) (Poly%main!impl_u.l2_impl.PTDir. dir_pt_res~1081@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I (nClip (+ layer~4@ 1))) (I dir_addr~900@) (I entry_base~822@) (Poly%main!impl_u.l2_impl.PTDir. dir_pt~958@))) (I vaddr~10@)))) (and (=> %%location_label%%18 tmp%15@) (=> tmp%15@ (=> (= tmp%16@ (< idx~649@ (vstd!seq.Seq.len.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))))) (and (=> %%location_label%%19 tmp%16@) (=> tmp%16@ (=> (= tmp%17@ (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~649@))))))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))))) (and (=> %%location_label%%20 tmp%17@) (=> tmp%17@ (=> (= tmp%18@ (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1100@) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))))) (and (=> %%location_label%%21 tmp%18@) (=> tmp%18@ (=> (= tmp%19@ (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. dir_pt_res~1081@)))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))))) (and (=> %%location_label%%22 tmp%19@) (=> tmp%19@ (=> (= tmp%20@ (= (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0))))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1)))))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1100@))))) (and (=> %%location_label%%23 tmp%20@) (=> tmp%20@ (and (=> %%location_label%%24 (uInv SZ (+ layer~4@ 1))) (=> (= tmp%22@ (uClip SZ (+ layer~4@ 1))) (and (=> %%location_label%%25 (req%main!impl_u.l2_impl.impl&%1.is_directory_empty. self~2@1 tmp%22@ dir_addr~900@ dir_pt_res~1081@)) (=> (ens%main!impl_u.l2_impl.impl&%1.is_directory_empty. self~2@1 tmp%22@ dir_addr~900@ dir_pt_res~1081@ tmp%21@) (or (and (=> tmp%21@ (=> (= self_with_empty~1400@ self~2@1) (=> (= pt_with_empty~1451@ (main!impl_u.l2_impl.PTDir./PTDir (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (%Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (vstd!seq.Seq.update.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~649@) (Poly%core!option.Option. (core!option.Option./Some (Poly%main!impl_u.l2_impl.PTDir. dir_pt_res~1081@))))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))))) (=> (= tmp%23@ (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (and (=> %%location_label%%26 (req%main!spec_t.mem.impl&%1.write. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1))) ptr~6@ idx~649@ tmp%23@ 0)) (=> (and (= (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt self~2@1) (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt self~2@2))) (=> (has_type (Poly%main!impl_u.l2_impl.PageTable. self~2@2) TYPE%main!impl_u.l2_impl.PageTable.) (=> (ens%main!spec_t.mem.impl&%1.write. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1))) (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@2))) ptr~6@ idx~649@ tmp%23@ 0) (=> (= tmp%24@ (main!definitions_t.MemRegionExec./MemRegionExec (%I (I dir_addr~900@)) (%I (I main!definitions_t.PAGE_SIZE.?)))) (and (=> %%location_label%%27 (req%main!spec_t.mem.impl&%1.dealloc_page. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@2))) tmp%24@)) (=> (and (= (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt self~2@2) (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt self~2@3))) (=> (has_type (Poly%main!impl_u.l2_impl.PageTable. self~2@3) TYPE%main!impl_u.l2_impl.PageTable.) (=> (ens%main!spec_t.mem.impl&%1.dealloc_page. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@2))) (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3))) tmp%24@) (=> (= removed_regions~1511@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.insert.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1100@) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. dir_pt_res~1081@))))))) (=> (= pt_res~1563@ (main!impl_u.l2_impl.PTDir./PTDir (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (%Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (vstd!seq.Seq.update.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~649@) (Poly%core!option.Option. core!option.Option./None))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.difference.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1511@))))) (=> (= res~1589@ (tuple%2./tuple%2 (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1511@))) (=> (= tmp%25@ (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@))) (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (and (=> %%location_label%%28 tmp%25@) (=> tmp%25@ (=> (= tmp%26@ (forall ((i~1624$ Poly)) (! (=> (has_type i~1624$ NAT) (=> (and (< (%I i~1624$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~1624$) idx~649@))) (= (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) i~1624$) (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) i~1624$)))) :pattern ((vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) i~1624$)) :pattern ((vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) i~1624$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_298 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_298))) (and (=> %%location_label%%29 tmp%26@) (=> tmp%26@ (=> (= tmp%27@ (forall ((i~1701$ Poly)) (! (=> (has_type i~1701$ NAT) (=> (and (< (%I i~1701$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~1701$) idx~649@))) (= (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) i~1701$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)) (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~1701$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) i~1701$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~1701$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_299 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_299))) (and (=> %%location_label%%30 tmp%27@) (=> tmp%27@ (=> (= tmp%28@ (forall ((i~1791$ Poly)) (! (=> (has_type i~1791$ NAT) (=> (and (< (%I i~1791$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~1791$) idx~649@))) (= (main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) i~1791$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)) (main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~1791$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) :pattern ((main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) i~1791$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@))) :pattern ((main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~1791$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_300 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_300))) (and (=> %%location_label%%31 tmp%28@) (=> tmp%28@ (=> (= tmp%29@ (forall ((i~1881$ Poly) (r~1883$ Poly)) (! (=> (and (has_type i~1881$ NAT) (has_type r~1883$ TYPE%main!definitions_t.MemRegion.)) (=> (and (and (and (< (%I i~1881$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~1881$) idx~649@))) (%B (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) i~1881$)))))) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) i~1881$)))))) r~1883$)) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~649@))))))) r~1883$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) i~1881$)))))) r~1883$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_301 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_301))) (and (=> %%location_label%%32 tmp%29@) (=> tmp%29@ (=> (= tmp%30@ (main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I idx~649@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@))) (and (=> %%location_label%%33 (req%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. tmp%30@)) (=> (ens%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. tmp%30@) (and (and (and (=> (has_type i~2076@ NAT) (=> (< (%I i~2076@) main!definitions_t.X86_NUM_ENTRIES.?) (=> (= entry~2203@ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) i~2076@ (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@))) (or (and (=> (= (%I i~2076@) idx~649@) %%switch_label%%5) (=> (not (= (%I i~2076@) idx~649@)) (or (and (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~2203@) (=> (= tmp%31@ (nClip (+ layer~4@ 1))) (=> (= tmp%32@ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~2203@)))) (=> (= tmp%33@ (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) i~2076@))))) (and (=> %%location_label%%34 (req%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@0 self~2@3 tmp%31@ tmp%32@ tmp%33@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@0 self~2@3 tmp%31@ tmp%32@ tmp%33@) %%switch_label%%6)))))) (=> (not ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~2203@)) %%switch_label%%6)) (and (not %%switch_label%%6) %%switch_label%%5)))) (and (not %%switch_label%%5) (=> %%location_label%%35 (let ((entry~2120$ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) i~2076@ (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~2120$) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~2120$)))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) i~2076@)))))))))))) (=> (forall ((i~2076$ Poly)) (! (=> (has_type i~2076$ NAT) (=> (< (%I i~2076$) main!definitions_t.X86_NUM_ENTRIES.?) (let ((entry~2120$ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) i~2076$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~2120$) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~2120$)))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) i~2076$)))))))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) i~2076$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@))) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_302 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_302)) (=> %%location_label%%36 (main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@))))) (=> (main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)) (=> %%location_label%%37 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@))))) (=> (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)) (=> (= tmp%34@ (forall ((r~2305$ Poly)) (! (=> (has_type r~2305$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1511@) r~2305$) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3)))))) r~2305$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3)))))) r~2305$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_305 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_305))) (and (=> %%location_label%%38 tmp%34@) (=> tmp%34@ (=> (= s1~2347@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0)))))))) (=> (= s2~2366@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3)))))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1511@)))) (and (and (=> (has_type elem~2389@ TYPE%main!definitions_t.MemRegion.) (=> %%location_label%%39 (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2347@) elem~2389@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2366@) elem~2389@)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2366@) elem~2389@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2347@) elem~2389@))))) (=> (forall ((elem~2389$ Poly)) (! (=> (has_type elem~2389$ TYPE%main!definitions_t.MemRegion.) (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2347@) elem~2389$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2366@) elem~2389$)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2366@) elem~2389$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2347@) elem~2389$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2347@) elem~2389$)) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2366@) elem~2389$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_306 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_306)) (=> (= tmp%35@ (ext_eq false (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2347@) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2366@))) (and (=> %%location_label%%40 tmp%35@) (=> tmp%35@ (=> %%location_label%%41 (= s1~2347@ s2~2366@))))))) (=> (= s1~2347@ s2~2366@) (=> (= s1~2468@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) (=> (= s2~2487@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1511@)))) (and (and (=> (has_type elem~2510@ TYPE%main!definitions_t.MemRegion.) (=> %%location_label%%42 (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2468@) elem~2510@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2487@) elem~2510@)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2487@) elem~2510@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2468@) elem~2510@))))) (=> (forall ((elem~2510$ Poly)) (! (=> (has_type elem~2510$ TYPE%main!definitions_t.MemRegion.) (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2468@) elem~2510$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2487@) elem~2510$)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2487@) elem~2510$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2468@) elem~2510$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2468@) elem~2510$)) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2487@) elem~2510$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_308 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_308)) (=> (= tmp%36@ (ext_eq false (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~2468@) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~2487@))) (and (=> %%location_label%%43 tmp%36@) (=> tmp%36@ (=> %%location_label%%44 (= s1~2468@ s2~2487@))))))) (=> (= s1~2468@ s2~2487@) (=> (= tmp%37@ (forall ((r~2589$ Poly)) (! (=> (has_type r~2589$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1511@) r~2589$) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) r~2589$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) r~2589$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_310 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_310))) (and (=> %%location_label%%45 tmp%37@) (=> tmp%37@ (=> (forall ((r~2628$ Poly)) (! (=> (has_type r~2628$ TYPE%main!definitions_t.MemRegion.) (=> (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) r~2628$)) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3)))) r~2628$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0)))) r~2628$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) r~2628$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_311 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_311)) (=> (= tmp%38@ (= (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3))))) (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0))))))) (and (=> %%location_label%%46 tmp%38@) (=> tmp%38@ (and (=> (= tmp%39@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.empty.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry.))) (and (=> %%location_label%%47 (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@3 layer~4@ ptr~6@ base~8@ tmp%39@ pt_res~1563@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@3 layer~4@ ptr~6@ base~8@ tmp%39@ pt_res~1563@) (and (=> (has_type i~2829@ NAT) (=> (< (%I i~2829@) main!definitions_t.X86_NUM_ENTRIES.?) (or (and (=> (= (%I i~2829@) idx~649@) (=> (= tmp%40@ (nClip (+ layer~4@ 1))) (and (=> %%location_label%%48 (req%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_empty. self_with_empty~1400@ tmp%40@ dir_addr~900@ entry_base~822@ dir_pt_res~1081@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_empty_at_implies_interp_at_empty. self_with_empty~1400@ tmp%40@ dir_addr~900@ entry_base~822@ dir_pt_res~1081@) (=> (= tmp%41@ (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))))) (I idx~649@)) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) (I idx~649@)))) (and (=> %%location_label%%49 tmp%41@) (=> tmp%41@ %%switch_label%%4))))))) (=> (not (= (%I i~2829@) idx~649@)) (and (=> %%location_label%%50 (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@0 self~2@3 layer~4@ ptr~6@ base~8@ (%I i~2829@) pt~12@ pt_res~1563@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@0 self~2@3 layer~4@ ptr~6@ base~8@ (%I i~2829@) pt~12@ pt_res~1563@) (=> (= tmp%42@ (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))))) i~2829@) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) i~2829@))) (and (=> %%location_label%%51 tmp%42@) (=> tmp%42@ %%switch_label%%4))))))) (and (not %%switch_label%%4) (=> %%location_label%%52 (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))))) i~2829@) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) i~2829@))))))) (=> (forall ((i~2829$ Poly)) (! (=> (has_type i~2829$ NAT) (=> (< (%I i~2829$) main!definitions_t.X86_NUM_ENTRIES.?) (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))))) i~2829$) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) i~2829$)))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))))) i~2829$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_312 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_312)) (=> (= s1~3328@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))))))) (=> (= s2~3384@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))))) (and (=> (= tmp%43@ (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~3328@)) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~3384@)))) (and (=> %%location_label%%53 tmp%43@) (=> tmp%43@ (and (=> (has_type idx~3422@ INT) (=> (and (<= 0 (%I idx~3422@)) (< (%I idx~3422@) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~3328@)))) (=> %%location_label%%54 (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~3328@) idx~3422@) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~3384@) idx~3422@))))) (=> (forall ((idx~3422$ Poly)) (! (=> (has_type idx~3422$ INT) (=> (and (<= 0 (%I idx~3422$)) (< (%I idx~3422$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~3328@)))) (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~3328@) idx~3422$) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~3384@) idx~3422$)))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~3328@) idx~3422$)) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~3384@) idx~3422$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_313 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_313)) (=> (= tmp%44@ (ext_eq false (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.) (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~3328@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~3384@))) (and (=> %%location_label%%55 tmp%44@) (=> tmp%44@ (=> %%location_label%%56 (= s1~3328@ s2~3384@)))))))))) (=> (= s1~3328@ s2~3384@) (=> %%location_label%%57 (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))))))))))))) (=> (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~1563@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))) (=> (= tmp%67@ (core!result.Result./Ok (Poly%tuple%2. res~1589@))) %%switch_label%%3))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (=> (not tmp%21@) (=> (= pt_res~3569@ (main!impl_u.l2_impl.PTDir./PTDir (%Poly%main!definitions_t.MemRegion. (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (%Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (vstd!seq.Seq.update.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~649@) (Poly%core!option.Option. (core!option.Option./Some (Poly%main!impl_u.l2_impl.PTDir. dir_pt_res~1081@))))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.difference.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1100@))))) (=> (= res~3595@ (tuple%2./tuple%2 (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1100@))) (=> (= tmp%45@ (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@))) (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (and (=> %%location_label%%58 tmp%45@) (=> tmp%45@ (=> (= tmp%46@ (forall ((i~3630$ Poly)) (! (=> (has_type i~3630$ NAT) (=> (and (< (%I i~3630$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~3630$) idx~649@))) (= (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) i~3630$) (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) i~3630$)))) :pattern ((vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) i~3630$)) :pattern ((vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) i~3630$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_316 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_316))) (and (=> %%location_label%%59 tmp%46@) (=> tmp%46@ (=> (= tmp%47@ (forall ((i~3707$ Poly)) (! (=> (has_type i~3707$ NAT) (=> (and (< (%I i~3707$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~3707$) idx~649@))) (= (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~3707$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)) (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~3707$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~3707$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~3707$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_317 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_317))) (and (=> %%location_label%%60 tmp%47@) (=> tmp%47@ (=> (= tmp%48@ (forall ((i~3797$ Poly)) (! (=> (has_type i~3797$ NAT) (=> (and (< (%I i~3797$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~3797$) idx~649@))) (= (main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~3797$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)) (main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~3797$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) :pattern ((main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~3797$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@))) :pattern ((main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~3797$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_318 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_318))) (and (=> %%location_label%%61 tmp%48@) (=> tmp%48@ (=> (= tmp%49@ (forall ((i~3887$ Poly) (r~3889$ Poly)) (! (=> (and (has_type i~3887$ NAT) (has_type r~3889$ TYPE%main!definitions_t.MemRegion.)) (=> (and (and (and (< (%I i~3887$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~3887$) idx~649@))) (%B (B ((_ is core!option.Option./Some) (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) i~3887$)))))) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) i~3887$)))))) r~3889$)) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (I idx~649@))))))) r~3889$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) i~3887$)))))) r~3889$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_319 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_319))) (and (=> %%location_label%%62 tmp%49@) (=> tmp%49@ (and (and (and (=> (has_type i~4049@ NAT) (=> (< (%I i~4049@) main!definitions_t.X86_NUM_ENTRIES.?) (=> (= entry~4176@ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~4049@ (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@))) (or (and (=> (= (%I i~4049@) idx~649@) %%switch_label%%8) (=> (not (= (%I i~4049@) idx~649@)) (or (and (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~4176@) (=> (= tmp%50@ (nClip (+ layer~4@ 1))) (=> (= tmp%51@ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~4176@)))) (=> (= tmp%52@ (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) i~4049@))))) (and (=> %%location_label%%63 (req%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@0 self~2@1 tmp%50@ tmp%51@ tmp%52@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@0 self~2@1 tmp%50@ tmp%51@ tmp%52@) %%switch_label%%9)))))) (=> (not ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~4176@)) %%switch_label%%9)) (and (not %%switch_label%%9) %%switch_label%%8)))) (and (not %%switch_label%%8) (=> %%location_label%%64 (let ((entry~4093$ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~4049@ (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~4093$) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~4093$)))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) i~4049@)))))))))))) (=> (forall ((i~4049$ Poly)) (! (=> (has_type i~4049$ NAT) (=> (< (%I i~4049$) main!definitions_t.X86_NUM_ENTRIES.?) (let ((entry~4093$ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~4049$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~4093$) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~4093$)))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) i~4049$)))))))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~4049$ (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@))) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_320 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_320)) (=> %%location_label%%65 (main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@))))) (=> (main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)) (=> %%location_label%%66 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@))))) (=> (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)) (=> (= s1~4281@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0)))))))) (=> (= s2~4300@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1)))))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1100@)))) (and (and (=> (has_type elem~4323@ TYPE%main!definitions_t.MemRegion.) (=> %%location_label%%67 (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4281@) elem~4323@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4300@) elem~4323@)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4300@) elem~4323@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4281@) elem~4323@))))) (=> (forall ((elem~4323$ Poly)) (! (=> (has_type elem~4323$ TYPE%main!definitions_t.MemRegion.) (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4281@) elem~4323$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4300@) elem~4323$)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4300@) elem~4323$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4281@) elem~4323$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4281@) elem~4323$)) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4300@) elem~4323$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_323 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_323)) (=> (= tmp%53@ (ext_eq false (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4281@) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4300@))) (and (=> %%location_label%%68 tmp%53@) (=> tmp%53@ (=> %%location_label%%69 (= s1~4281@ s2~4300@))))))) (=> (= s1~4281@ s2~4300@) (=> (= s1~4402@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) (=> (= s2~4421@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~1100@)))) (and (and (=> (has_type elem~4444@ TYPE%main!definitions_t.MemRegion.) (=> %%location_label%%70 (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4402@) elem~4444@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4421@) elem~4444@)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4421@) elem~4444@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4402@) elem~4444@))))) (=> (forall ((elem~4444$ Poly)) (! (=> (has_type elem~4444$ TYPE%main!definitions_t.MemRegion.) (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4402@) elem~4444$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4421@) elem~4444$)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4421@) elem~4444$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4402@) elem~4444$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4402@) elem~4444$)) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4421@) elem~4444$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_325 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_325)) (=> (= tmp%54@ (ext_eq false (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~4402@) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~4421@))) (and (=> %%location_label%%71 tmp%54@) (=> tmp%54@ (=> %%location_label%%72 (= s1~4402@ s2~4421@))))))) (=> (= s1~4402@ s2~4421@) (=> (= tmp%55@ (forall ((r~4523$ Poly)) (! (=> (has_type r~4523$ TYPE%main!definitions_t.MemRegion.) (=> (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) r~4523$)) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1)))) r~4523$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0)))) r~4523$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) r~4523$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_327 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_327))) (and (=> %%location_label%%73 tmp%55@) (=> tmp%55@ (=> (= tmp%56@ (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@))) (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (and (=> %%location_label%%74 tmp%56@) (=> tmp%56@ (=> (= tmp%57@ (= (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1))))) (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0))))))) (and (=> %%location_label%%75 tmp%57@) (=> tmp%57@ (and (=> (= tmp%58@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.empty.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry.))) (and (=> %%location_label%%76 (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@1 layer~4@ ptr~6@ base~8@ tmp%58@ pt_res~3569@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@1 layer~4@ ptr~6@ base~8@ tmp%58@ pt_res~3569@) (and (=> (has_type i~4745@ NAT) (=> (< (%I i~4745@) main!definitions_t.X86_NUM_ENTRIES.?) (or (and (=> (= (%I i~4745@) idx~649@) (=> (= tmp%59@ (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))))) (I idx~649@))) (main!impl_u.l1.NodeEntry./Directory (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I (nClip (+ layer~4@ 1))) (I dir_addr~900@) (I entry_base~822@) (Poly%main!impl_u.l2_impl.PTDir. dir_pt_res~1081@))))))) (and (=> %%location_label%%77 tmp%59@) (=> tmp%59@ (=> (= tmp%60@ (%B (B ((_ is core!result.Result./Ok) (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I (nClip (+ layer~4@ 1))) (I dir_addr~900@) (I entry_base~822@) (Poly%main!impl_u.l2_impl.PTDir. dir_pt~958@))) (I vaddr~10@)))))))) (and (=> %%location_label%%78 tmp%60@) (=> tmp%60@ (=> (= tmp%61@ (= (%Poly%main!impl_u.l1.NodeEntry. (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) (I idx~649@))) (main!impl_u.l2_impl.impl&%1.interp_at_entry.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (I idx~649@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (and (=> %%location_label%%79 tmp%61@) (=> tmp%61@ (=> (= tmp%62@ (nClip (+ layer~4@ 1))) (and (=> %%location_label%%80 (req%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_not_empty. self~2@1 tmp%62@ dir_addr~900@ entry_base~822@ dir_pt_res~1081@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_not_empty_at_implies_interp_at_not_empty. self~2@1 tmp%62@ dir_addr~900@ entry_base~822@ dir_pt_res~1081@) (=> (= tmp%63@ (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))))) (I idx~649@)) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) (I idx~649@)))) (and (=> %%location_label%%81 tmp%63@) (=> tmp%63@ %%switch_label%%7)))))))))))))))) (=> (not (= (%I i~4745@) idx~649@)) (and (=> %%location_label%%82 (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@0 self~2@1 layer~4@ ptr~6@ base~8@ (%I i~4745@) pt~12@ pt_res~3569@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@0 self~2@1 layer~4@ ptr~6@ base~8@ (%I i~4745@) pt~12@ pt_res~3569@) (=> (= tmp%64@ (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))))) i~4745@) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) i~4745@))) (and (=> %%location_label%%83 tmp%64@) (=> tmp%64@ %%switch_label%%7))))))) (and (not %%switch_label%%7) (=> %%location_label%%84 (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))))) i~4745@) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) i~4745@))))))) (=> (forall ((i~4745$ Poly)) (! (=> (has_type i~4745$ NAT) (=> (< (%I i~4745$) main!definitions_t.X86_NUM_ENTRIES.?) (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))))) i~4745$) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) i~4745$)))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))))) i~4745$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_328 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_328)) (=> (= s1~5500@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))))))) (=> (= s2~5556@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))))) (and (=> (= tmp%65@ (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~5500@)) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~5556@)))) (and (=> %%location_label%%85 tmp%65@) (=> tmp%65@ (and (=> (has_type idx~5594@ INT) (=> (and (<= 0 (%I idx~5594@)) (< (%I idx~5594@) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~5500@)))) (=> %%location_label%%86 (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~5500@) idx~5594@) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~5556@) idx~5594@))))) (=> (forall ((idx~5594$ Poly)) (! (=> (has_type idx~5594$ INT) (=> (and (<= 0 (%I idx~5594$)) (< (%I idx~5594$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~5500@)))) (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~5500@) idx~5594$) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~5556@) idx~5594$)))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~5500@) idx~5594$)) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~5556@) idx~5594$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_329 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_329)) (=> (= tmp%66@ (ext_eq false (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.) (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~5500@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~5556@))) (and (=> %%location_label%%87 tmp%66@) (=> tmp%66@ (=> %%location_label%%88 (= s1~5500@ s2~5556@)))))))))) (=> (= s1~5500@ s2~5556@) (=> %%location_label%%89 (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))))))))))))) (=> (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~3569@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))) (=> (= tmp%67@ (core!result.Result./Ok (Poly%tuple%2. res~3595@))) (=> (= self~2@3 self~2@1) %%switch_label%%3)))))))))))))))))))))))))))))))))))))))))) (and (not %%switch_label%%3) (=> (= tmp%70@ tmp%67@) %%switch_label%%2)))))))))))))))))))))))))))))))) (=> (not ((_ is core!result.Result./Ok) tmp%%1@)) (=> (= e~5685@ (%Poly%tuple%0. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. tmp%%1@))))) (=> (= tmp%68@ (= self~2@1 self~2@0)) (and (=> %%location_label%%90 tmp%68@) (=> tmp%68@ (=> (= tmp%69@ (= (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))) (and (=> %%location_label%%91 tmp%69@) (=> tmp%69@ (=> (= tmp%70@ (core!result.Result./Err (Poly%tuple%0. e~5685@))) (=> (= self~2@3 self~2@1) %%switch_label%%2))))))))))) (and (not %%switch_label%%2) (=> (= tmp%96@ tmp%70@) %%switch_label%%1)))))))))))))))))))))) (=> (not tmp%8@) (=> (ens%main!definitions_t.x86_arch_exec. 0 tmp%71@) (and (=> %%location_label%%92 (req%main!definitions_t.impl&%6.entry_size. tmp%71@ layer~4@)) (=> (ens%main!definitions_t.impl&%6.entry_size. tmp%71@ layer~4@ tmp%72@) (and (=> %%location_label%%93 (req%main!definitions_t.aligned_exec. vaddr~10@ tmp%72@)) (=> (ens%main!definitions_t.aligned_exec. vaddr~10@ tmp%72@ tmp%73@) (or (and (=> tmp%73@ (=> (= tmp%74@ (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (and (=> %%location_label%%94 (req%main!spec_t.mem.impl&%1.write. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0))) ptr~6@ idx~649@ tmp%74@ 0)) (=> (and (= (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt self~2@0) (main!impl_u.l2_impl.PageTable./PageTable/ghost_pt self~2@1))) (=> (has_type (Poly%main!impl_u.l2_impl.PageTable. self~2@1) TYPE%main!impl_u.l2_impl.PageTable.) (=> (ens%main!spec_t.mem.impl&%1.write. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0))) (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1))) ptr~6@ idx~649@ tmp%74@ 0) (=> (= removed_regions~5862@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.empty.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion.))) (=> (= res~5888@ (tuple%2./tuple%2 (Poly%main!impl_u.l2_impl.PTDir. pt~12@) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~5862@))) (=> (= tmp%75@ (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1)))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (%Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq.update.? (UINT 64) (UINT 64) (Poly%vstd!seq.Seq<u64.>. (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0)))) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) (I idx~649@) (I 0))))) (and (=> %%location_label%%95 tmp%75@) (=> tmp%75@ (=> (= tmp%76@ (= (main!spec_t.mem.impl&%1.spec_read.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1)))) (I idx~649@) (Poly%main!definitions_t.MemRegion. (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) 0)) (and (=> %%location_label%%96 tmp%76@) (=> tmp%76@ (=> (= new_entry~6011@ (main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I idx~649@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (and (=> %%location_label%%97 (req%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. new_entry~6011@)) (=> (ens%main!impl_u.l2_impl.impl&%0.lemma_zero_is_empty. new_entry~6011@) (=> (= tmp%77@ ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Empty) (main!impl_u.l2_impl.impl&%0.view.? (Poly%main!impl_u.l2_impl.PageDirectoryEntry. new_entry~6011@)))) (and (=> %%location_label%%98 tmp%77@) (=> tmp%77@ (=> (= tmp%78@ (forall ((i~6041$ Poly)) (! (=> (has_type i~6041$ NAT) (=> (and (< (%I i~6041$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~6041$) idx~649@))) (= (main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~6041$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@)) (main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~6041$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) :pattern ((main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~6041$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :pattern ((main!impl_u.l2_impl.impl&%1.entry_at_spec.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~6041$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_332 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_332))) (and (=> %%location_label%%99 tmp%78@) (=> tmp%78@ (=> (= tmp%79@ (forall ((i~6131$ Poly)) (! (=> (has_type i~6131$ NAT) (=> (and (< (%I i~6131$) main!definitions_t.X86_NUM_ENTRIES.?) (not (= (%I i~6131$) idx~649@))) (= (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~6131$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@)) (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~6131$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~6131$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) i~6131$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_333 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_333))) (and (=> %%location_label%%100 tmp%79@) (=> tmp%79@ (and (and (and (=> (has_type i~6271@ NAT) (=> (< (%I i~6271@) main!definitions_t.X86_NUM_ENTRIES.?) (=> (= entry~6398@ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~6271@ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (or (and (=> (= (%I i~6271@) idx~649@) %%switch_label%%12) (=> (not (= (%I i~6271@) idx~649@)) (or (and (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~6398@) (=> (= tmp%80@ (main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (and (=> %%location_label%%101 tmp%80@) (=> tmp%80@ (=> (= tmp%81@ (nClip (+ layer~4@ 1))) (=> (= tmp%82@ (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~6398@)))) (=> (= tmp%83@ (%Poly%main!impl_u.l2_impl.PTDir. (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) i~6271@))))) (and (=> %%location_label%%102 (req%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@0 self~2@1 tmp%81@ tmp%82@ tmp%83@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_inv_at_different_memory. self~2@0 self~2@1 tmp%81@ tmp%82@ tmp%83@) (=> (= tmp%84@ (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~6398@)))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) i~6271@))))) (and (=> %%location_label%%103 tmp%84@) (=> tmp%84@ %%switch_label%%13)))))))))))) (=> (not ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~6398@)) %%switch_label%%13)) (and (not %%switch_label%%13) %%switch_label%%12)))) (and (not %%switch_label%%12) (=> %%location_label%%104 (let ((entry~6315$ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~6271@ (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~6315$) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~6315$)))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) i~6271@)))))))))))) (=> (forall ((i~6271$ Poly)) (! (=> (has_type i~6271$ NAT) (=> (< (%I i~6271$) main!definitions_t.X86_NUM_ENTRIES.?) (let ((entry~6315$ (main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~6271$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (=> ((_ is main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory) entry~6315$) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I (nClip (+ layer~4@ 1))) (I (main!impl_u.l2_impl.GhostPageDirectoryEntry./Directory/addr (%Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. (Poly%main!impl_u.l2_impl.GhostPageDirectoryEntry. entry~6315$)))) (core!option.Option./Some/_0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (TYPE%core!option.Option. TYPE%main!impl_u.l2_impl.PTDir.) (Poly%vstd!seq.Seq<core!option.Option<main!impl_u.l2_impl.PTDir.>.>. (main!impl_u.l2_impl.PTDir./PTDir/entries (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) i~6271$)))))))) :pattern ((main!impl_u.l2_impl.impl&%1.view_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) i~6271$ (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_334 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_334)) (=> %%location_label%%105 (main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (=> (main!impl_u.l2_impl.impl&%1.directories_obey_invariant_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)) (=> %%location_label%%106 (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))) (=> (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)) (=> (= s1~6583@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0)))))))) (=> (= s2~6602@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@1)))))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~5862@)))) (and (and (=> (has_type elem~6625@ TYPE%main!definitions_t.MemRegion.) (=> %%location_label%%107 (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6583@) elem~6625@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6602@) elem~6625@)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6602@) elem~6625@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6583@) elem~6625@))))) (=> (forall ((elem~6625$ Poly)) (! (=> (has_type elem~6625$ TYPE%main!definitions_t.MemRegion.) (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6583@) elem~6625$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6602@) elem~6625$)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6602@) elem~6625$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6583@) elem~6625$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6583@) elem~6625$)) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6602@) elem~6625$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_337 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_337)) (=> (= tmp%85@ (ext_eq false (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6583@) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6602@))) (and (=> %%location_label%%108 tmp%85@) (=> tmp%85@ (=> %%location_label%%109 (= s1~6583@ s2~6602@))))))) (=> (= s1~6583@ s2~6602@) (=> (= s1~6704@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) (=> (= s2~6723@ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~5862@)))) (and (and (=> (has_type elem~6746@ TYPE%main!definitions_t.MemRegion.) (=> %%location_label%%110 (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6704@) elem~6746@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6723@) elem~6746@)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6723@) elem~6746@) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6704@) elem~6746@))))) (=> (forall ((elem~6746$ Poly)) (! (=> (has_type elem~6746$ TYPE%main!definitions_t.MemRegion.) (and (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6704@) elem~6746$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6723@) elem~6746$)) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6723@) elem~6746$) (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6704@) elem~6746$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6704@) elem~6746$)) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6723@) elem~6746$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_339 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_339)) (=> (= tmp%86@ (ext_eq false (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (TYPE%vstd!set.Set. TYPE%main!definitions_t.MemRegion.) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s1~6704@) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. s2~6723@))) (and (=> %%location_label%%111 tmp%86@) (=> tmp%86@ (=> %%location_label%%112 (= s1~6704@ s2~6723@))))))) (=> (= s1~6704@ s2~6723@) (and (=> (= tmp%87@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (vstd!seq.Seq.empty.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry.))) (and (=> %%location_label%%113 (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@1 layer~4@ ptr~6@ base~8@ tmp%87@ pt~12@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_aux_facts. self~2@1 layer~4@ ptr~6@ base~8@ tmp%87@ pt~12@) (=> (= tmp%88@ (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))))))) main!definitions_t.X86_NUM_ENTRIES.?)) (and (=> %%location_label%%114 tmp%88@) (=> tmp%88@ (=> (= tmp%89@ (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))))))))) main!definitions_t.X86_NUM_ENTRIES.?)) (and (=> %%location_label%%115 tmp%89@) (=> tmp%89@ (and (=> (has_type i~7058@ NAT) (=> (< (%I i~7058@) main!definitions_t.X86_NUM_ENTRIES.?) (or (and (=> (= (%I i~7058@) idx~649@) %%switch_label%%11) (=> (not (= (%I i~7058@) idx~649@)) (and (=> %%location_label%%116 (req%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@0 self~2@1 layer~4@ ptr~6@ base~8@ (%I i~7058@) pt~12@ pt~12@)) (=> (ens%main!impl_u.l2_impl.impl&%1.lemma_interp_at_entry_different_memory. self~2@0 self~2@1 layer~4@ ptr~6@ base~8@ (%I i~7058@) pt~12@ pt~12@) (=> (= tmp%90@ (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) i~7058@) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) i~7058@))) (and (=> %%location_label%%117 tmp%90@) (=> tmp%90@ %%switch_label%%11))))))) (and (not %%switch_label%%11) (=> %%location_label%%118 (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) i~7058@) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) i~7058@))))))) (=> (forall ((i~7058$ Poly)) (! (=> (has_type i~7058$ NAT) (=> (< (%I i~7058$) main!definitions_t.X86_NUM_ENTRIES.?) (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) i~7058$) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))) i~7058$)))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))) i~7058$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_341 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_341)) (=> (= s1~7402@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))))) (=> (= s2~7458@ (%Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. (main!impl_u.l1.Directory./Directory/entries (%Poly%main!impl_u.l1.Directory. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))))))) (and (=> (= tmp%91@ (= (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~7402@)) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~7458@)))) (and (=> %%location_label%%119 tmp%91@) (=> tmp%91@ (and (=> (has_type idx~7496@ INT) (=> (and (<= 0 (%I idx~7496@)) (< (%I idx~7496@) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~7402@)))) (=> %%location_label%%120 (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~7402@) idx~7496@) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~7458@) idx~7496@))))) (=> (forall ((idx~7496$ Poly)) (! (=> (has_type idx~7496$ INT) (=> (and (<= 0 (%I idx~7496$)) (< (%I idx~7496$) (vstd!seq.Seq.len.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~7402@)))) (= (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~7402@) idx~7496$) (vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~7458@) idx~7496$)))) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~7402@) idx~7496$)) :pattern ((vstd!seq.Seq.index.? TYPE%main!impl_u.l1.NodeEntry. TYPE%main!impl_u.l1.NodeEntry. (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~7458@) idx~7496$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_342 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_342)) (=> (= tmp%92@ (ext_eq false (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.) (TYPE%vstd!seq.Seq. TYPE%main!impl_u.l1.NodeEntry.) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s1~7402@) (Poly%vstd!seq.Seq<main!impl_u.l1.NodeEntry.>. s2~7458@))) (and (=> %%location_label%%121 tmp%92@) (=> tmp%92@ (=> %%location_label%%122 (= s1~7402@ s2~7458@)))))))))) (=> (= s1~7402@ s2~7458@) (=> %%location_label%%123 (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))))))))))))))))))) (=> (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@1) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@))) (=> (= tmp%95@ (core!result.Result./Ok (Poly%tuple%2. res~5888@))) %%switch_label%%10))))))))))))))))))))))))))))))))))))))) (=> (not tmp%73@) (=> (= tmp%93@ (= self~2@0 self~2@0)) (and (=> %%location_label%%124 tmp%93@) (=> tmp%93@ (=> (= tmp%94@ (= (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))) (and (=> %%location_label%%125 tmp%94@) (=> tmp%94@ (=> (= tmp%95@ (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0))) (=> (= self~2@1 self~2@0) %%switch_label%%10)))))))))) (and (not %%switch_label%%10) (=> (= tmp%96@ tmp%95@) (=> (= self~2@3 self~2@1) %%switch_label%%1))))))))))) (and (not %%switch_label%%1) (=> (= tmp%99@ tmp%96@) %%switch_label%%0)))))) (=> (not tmp%7@) (=> (= tmp%97@ (= self~2@0 self~2@0)) (and (=> %%location_label%%126 tmp%97@) (=> tmp%97@ (=> (= tmp%98@ (= (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))) (and (=> %%location_label%%127 tmp%98@) (=> tmp%98@ (=> (= tmp%99@ (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0))) (=> (= self~2@3 self~2@0) %%switch_label%%0)))))))))) (and (not %%switch_label%%0) (=> (= res~164@ tmp%99@) (and (=> %%location_label%%128 (ite ((_ is core!result.Result./Ok) res~164@) (let ((resv~170$ (%Poly%tuple%2. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~164@)))))) (let ((pt_res~180$ (%Poly%main!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/field%0 (%Poly%tuple%2. (Poly%tuple%2. resv~170$)))))) (let ((removed_regions~181$ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (tuple%2./tuple%2/field%1 (%Poly%tuple%2. (Poly%tuple%2. resv~170$)))))) (and (and (and (and (and (and (= (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0))))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3)))))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~181$)))) (= (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (vstd!set.impl&%0.union.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~181$))))) (forall ((r~235$ Poly)) (! (=> (has_type r~235$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~181$) r~235$) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3)))))) r~235$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!spec_t.mem.impl&%1.regions.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3)))))) r~235$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_294 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_294))) (forall ((r~266$ Poly)) (! (=> (has_type r~266$ TYPE%main!definitions_t.MemRegion.) (=> (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. removed_regions~181$) r~266$) (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) r~266$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) r~266$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_295 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_295))) (main!impl_u.l2_impl.impl&%1.inv_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$))) (forall ((r~313$ Poly)) (! (=> (has_type r~313$ TYPE%main!definitions_t.MemRegion.) (=> (not (vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) r~313$)) (= (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3)))) r~313$) (main!spec_t.mem.impl&%1.region_view.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0)))) r~313$)))) :pattern ((vstd!set.impl&%0.contains.? TYPE%main!definitions_t.MemRegion. TYPE%main!definitions_t.MemRegion. (Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (main!impl_u.l2_impl.PTDir./PTDir/used_regions (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$)))) r~313$)) :qid user_main__impl_u__l2_impl__PageTable__unmap_aux_296 :skolemid skolem_user_main__impl_u__l2_impl__PageTable__unmap_aux_296))) (= (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt_res~180$))) (main!impl_u.l2_impl.PTDir./PTDir/region (%Poly%main!impl_u.l2_impl.PTDir. (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))))))) (let ((e~366$ (%Poly%tuple%0. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~164@)))))) (= self~2@3 self~2@0)))) (and (=> %%location_label%%129 (ite ((_ is core!result.Result./Ok) res~164@) (let ((resv~387$ (%Poly%tuple%2. (core!result.Result./Ok/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~164@)))))) (let ((pt_res~397$ (%Poly%main!impl_u.l2_impl.PTDir. (tuple%2./tuple%2/field%0 (%Poly%tuple%2. (Poly%tuple%2. resv~387$)))))) (let ((removed_regions~398$ (%Poly%vstd!set.Set<main!definitions_t.MemRegion.>. (tuple%2./tuple%2/field%1 (%Poly%tuple%2. (Poly%tuple%2. resv~387$)))))) (= (core!result.Result./Ok (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt_res~397$)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))) (let ((e~483$ (%Poly%tuple%0. (core!result.Result./Err/_0 (%Poly%core!result.Result. (Poly%core!result.Result. res~164@)))))) (= (core!result.Result./Err (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@3) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@)))) (main!impl_u.l1.impl&%0.unmap.? (Poly%main!impl_u.l1.Directory. (main!impl_u.l2_impl.impl&%1.interp_at.? (Poly%main!impl_u.l2_impl.PageTable. self~2@0) (I layer~4@) (I ptr~6@) (I base~8@) (Poly%main!impl_u.l2_impl.PTDir. pt~12@))) (I vaddr~10@)))))) (=> %%location_label%%130 (= (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@3))))) (main!spec_t.mem.impl&%1.cr3_spec.? (Poly%main!spec_t.mem.PageTableMemory. (main!impl_u.l2_impl.PageTable./PageTable/memory (%Poly%main!impl_u.l2_impl.PageTable. (Poly%main!impl_u.l2_impl.PageTable. self~2@0))))))))))))))))))))))))))))))))))))))))))
(assert %%query%%)
(check-sat)
