{"payload":{"allShortcutsEnabled":false,"fileTree":{"docs":{"items":[{"name":"dafny","path":"docs/dafny","contentType":"directory"},{"name":"fstar","path":"docs/fstar","contentType":"directory"},{"name":"verus","path":"docs/verus","contentType":"directory"},{"name":"cvc5_help","path":"docs/cvc5_help","contentType":"file"},{"name":"vampire_help","path":"docs/vampire_help","contentType":"file"},{"name":"z3_help","path":"docs/z3_help","contentType":"file"}],"totalCount":6},"":{"items":[{"name":"data","path":"data","contentType":"directory"},{"name":"docs","path":"docs","contentType":"directory"},{"name":"fig","path":"fig","contentType":"directory"},{"name":"scripts","path":"scripts","contentType":"directory"},{"name":"smt2utils","path":"smt2utils","contentType":"directory"},{"name":"solvers","path":"solvers","contentType":"directory"},{"name":"src","path":"src","contentType":"directory"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"Cargo.lock","path":"Cargo.lock","contentType":"file"},{"name":"Cargo.toml","path":"Cargo.toml","contentType":"file"},{"name":"LICENSE","path":"LICENSE","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"configs.json","path":"configs.json","contentType":"file"},{"name":"requirements.txt","path":"requirements.txt","contentType":"file"}],"totalCount":14}},"fileTreeProcessingTime":2.630229,"foldersToFetch":[],"reducedMotionEnabled":null,"repo":{"id":563042580,"defaultBranch":"master","name":"mariposa","ownerLogin":"secure-foundations","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2022-11-07T19:39:40.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/32856639?v=4","public":true,"private":false,"isOrgOwned":true},"refInfo":{"name":"182b553066d35ccafad4f1b909499288e3a63777","listCacheKey":"v0:1691698888.0","canEdit":false,"refType":"tree","currentOid":"182b553066d35ccafad4f1b909499288e3a63777"},"path":"docs/vampire_help","currentUser":null,"blob":{"rawLines":["","************************************************************","*************************  Global  *************************","************************************************************","","--cores","\tWhen running in portfolio modes (including casc or smtcomp modes) specify ","\tthe number of cores, set to 0 to use maximum","\tdefault: 1","--instruction_limit (-i)","\tLimit the number (in millions) of executed instructions (excluding the ","\tkernel ones).","\tdefault: 0","--memory_limit (-m)","\tMemory limit in MB","\tdefault: 131072","--mode","\tSelect the mode of operation. Choices are:","\t  -vampire: the standard mode of operation for first-order theorem proving","\t  -portfolio: a portfolio mode running a specified schedule (see schedule)","\t  -casc, casc_sat, smtcomp - like portfolio mode, with competition specific","\t     presets for schedule, etc.","\t  -preprocess,axiom_selection,clausify: modes for producing output","\t      for other solvers.","\t  -tpreprocess,tclausify: output modes for theory input (clauses are quantified","\t      with sort information).","\t  -output,profile: output information about the problem","\tSome modes are not currently maintained (get in touch if interested):","\t  -bpa: perform bound propagation","\t  -consequence_elimination: perform consequence elimination","\t  -random_strategy: attempts to randomize the option values","\t","\tdefault: vampire","\tvalues: axiom_selection,casc,casc_hol,casc_sat,casc_ltb,clausify,consequence_elimination,","\t        model_check,output,portfolio,preprocess,preprocess2,profile,","\t        random_strategy,smtcomp,spider,tclausify,tpreprocess,vampire","--randomize_seed_for_portfolio_workers","\tIn portfolio mode, let each worker process start from its own independent ","\trandom seed.","\tdefault: on","--schedule (-sched)","\tSchedule to be run by the portfolio mode. casc and smtcomp usually point ","\tto the most recent schedule in that category. file loads the schedule from ","\ta file specified in --schedule_file. Note that some old schedules may contain ","\toption values that are no longer supported - see ignore_missing.","\tdefault: casc","\tvalues: casc,casc_2023,casc_2019,casc_sat,casc_hol_2023,casc_sat_2019,","\t        casc_hol_2020,file,induction,integer_induction,ltb_default_2017,","\t        ltb_hh4_2017,ltb_hll_2017,ltb_isa_2017,ltb_mzr_2017,smtcomp,","\t        smtcomp_2018,snake_tptp_uns,snake_tptp_sat,struct_induction","--schedule_file","\tPath to the input schedule file. Each line contains an encoded strategy. ","\tDisabled unless `--schedule file` is set.","\tdefault: <empty>","--slowness","\tThe factor by which is multiplied the time limit of each configuration ","\tin casc/casc_sat/smtcomp/portfolio mode","\tdefault: 1","--superposition (-sup)","\tControl superposition. Turning off this core inference leads to an incomplete ","\tcalculus on equational problems.","\tdefault: on","--time_limit (-t)","\tTime limit in wall clock seconds, you can use d,s,m,h,D suffixes also i.e. ","\t60s, 5m. Setting it to 0 effectively gives no time limit.","\tdefault: 600d","","************************************************************","**********************  Higher-order  **********************","************************************************************","","--add_comb_axioms (-aca)","\tAdd combinator axioms","\tdefault: off","--add_proxy_axioms (-apa)","\tAdd logical proxy axioms","\tdefault: off","--bool_eq_trick (-bet)","\tReplace an equality between boolean terms such as: t = s with a disequality ","\tt != vnot(s) The theory is that this can help with EqRes","\tdefault: off","--cases (-c)","\tAlternative to FOOL Paramodulation that replaces all Boolean subterms in ","\tone step","\tdefault: off","--cases_simp (-cs)","\tFOOL Paramodulation with two conclusion as a simplification","\tdefault: off","--choice_ax (-cha)","\tAdds the cnf form of the Hilbert choice axiom","\tdefault: off","--choice_reasoning (-chr)","\tReason about choice by adding relevant instances of the axiom","\tdefault: off","--cnf_on_the_fly (-cnfonf)","\tVarious options linked to clausification on the fly","\tdefault: eager","\tvalues: eager,lazy_gen,lazy_simp,lazy_not_gen,lazy_not_gen_be_off,","\t        lazy_not_be_gen,off","--combinatory_sup (-csup)","\tSwitches on a specific ordering and that orients combinator axioms left-right. ","\tAlso turns on a number of special inference rules","\tdefault: off","--complex_bool_reasoning (-cbe)","\tSwitches on primitive instantiation and elimination of Leibniz equality","\tdefault: on","--complex_var_cond (-cvc)","\tUse the more complex variable condition provided in the SKIKBO paper.","\tMore terms are comparable with this ordering, but it has worst caseexponential ","\tcomplexity","\tdefault: off","--equality_to_equiv (-e2e)","\tEquality between boolean terms changed to equivalence ","\tt1 : $o = t2 : $o is changed to t1 <=> t2","\tdefault: off","--func_ext (-fe)","\tDeal with extensionality using abstraction, axiom or neither","\tdefault: abstraction","\tvalues: off,axiom,abstraction","--injectivity (-inj)","\tAttempts to identify injective functions and postulates a left-inverse","\tdefault: off","--lam_free_hol (-lfh)","\tReason about lambda-free hol. See paper by Vukmirovic et al.","\tdefault: off","--max_XX_narrows (-mXXn)","\tMaximum number of BXX', CXX' and SXX' narrows thatcan be carried out 0 ","\tmeans that there is no limit. ","\tdefault: 0","--narrow (-narr)","\tControls the set of combinator equations to use in narrowing","\tdefault: all","\tvalues: all,sk,ski,off","--new_taut_del (-ntd)","\tDelete clauses with literals of the form false != true or t = true \\/ t ","\t= false","\tdefault: off","--pragmatic (-prag)","\tModifies various parameters to help Vampire solve 'hard' higher-order","\tdefault: off","--prim_inst_set (-piset)","\tControls the set of equations to use in primitive instantiation","\tdefault: all_but_not_eq","\tvalues: all,all_but_not_eq,false_true_not,small_set","--priority_to_long_reducts (-ptlr)","\tgive priority to clauses produced by lengthy reductions","\tdefault: off","","************************************************************","**************************  Help  **************************","************************************************************","","--bad_option","\tWhat should be done if a bad option value (wrt hard and soft constraints) ","\tis encountered:","\t - hard: will cause a user error","\t - soft: will only report the error (unless it is unsafe)","\t - forced: <under development> ","\t - off: will ignore safe errors","\tNote that unsafe errors will always lead to a user error","\tdefault: soft","\tvalues: hard,forced,off,soft","--explain_option (-explain)","\tUse to explain a single option i.e. -explain explain","\tdefault: <empty>","--help (-h)","\tDisplay the help message","\tdefault: off","--show_options","\tList all available options","\tdefault: off","","*************************************************************","**************************  Input  **************************","*************************************************************","","--forbidden_options","\tIf some of the specified options are set to a forbidden state, vampire ","\twill fail to start, or in portfolio modes it will skip such strategies. ","\tThe expected syntax is <opt1>=<val1>:<opt2>:<val2>:...:<optn>=<valN>","\tdefault: <empty>","--forced_options","\tOptions in the format <opt1>=<val1>:<opt2>=<val2>:...:<optn>=<valN> that ","\toverride the option values set by other means (also inside portfolio mode ","\tstrategies)","\tdefault: <empty>","--guess_the_goal (-gtg)","\tUse heuristics to guess formulas that correspond to the goal. Doesn't really ","\tmake sense if there is already a goal but it will still do something. This ","\tis really designed for use with SMTLIB problems that don't have goals","\tdefault: off","\tvalues: off,all,exists_top,exists_all,exists_sym,position","--guess_the_goal_limit (-gtgl)","\tThe maximum number of input units a symbol appears for it to be considered ","\tin a goal","\tdefault: 1","--ignore_unrecognized_logic (-iul)","\tTry proof search anyways, if vampire would throw an \"unrecognized logic\" ","\terror otherwise.","\tdefault: off","--include","\tPath prefix for the 'include' TPTP directive","\tdefault: <empty>","--input_syntax","\tInput syntax. Historic input syntaxes have been removed as they are not ","\tactively maintained. Contact developers for help with these.","\tdefault: auto","\tvalues: smtlib2,tptp,auto","--random_seed","\tSome parts of vampire use random numbers. This seed allows for reproducibility ","\tof results. By default the seed is not changed.","\tdefault: 1","--random_strategy_seed","\tSets the seed for generating random strategies. This option necessary because ","\t--random_seed <value> will be included as fixed value in the generated ","\trandom strategy, hence won't have any effect on the random strategy generation. ","\tThe default value is derived from the current time.","\tdefault: 1691163110","","*************************************************************","**********************  Preprocessing  **********************","*************************************************************","","--blocked_clause_elimination (-bce)","\tEliminate blocked clauses after clausification.","\tdefault: off","--equality_proxy (-ep)","\tApplies the equality proxy transformation to the problem. It works as follows:","\t - All literals s=t are replaced by E(s,t)","\t - All literals s!=t are replaced by ~E(s,t)","\t - If S the symmetry clause ~E(x,y) \\/ E(y,x) is added","\t - If T the transitivity clause ~E(x,y) \\/ ~E(y,z) \\/ E(x,z) is added","\t - If C the congruence clauses are added as follows:","\t    for predicates p that are not E or equality add","\t     ~E(x1,y1) \\/ ... \\/ ~E(xN,yN) \\/ ~p(x1,...,xN) \\/ p(y1,...,yN)","\t    for non-constant functions f add","\t     ~E(x1,y1) \\/ ... \\/ ~E(xN,yN) \\/ E(f(x1,...,xN),f(y1,...,yN))","\t R stands for reflexivity","\tdefault: off","\tvalues: R,RS,RST,RSTC,off","--equality_resolution_with_deletion (-erd)","\tPerform equality resolution with deletion.","\tdefault: on","--function_definition_elimination (-fde)","\tAttempts to eliminate function definitions. A function definition is a ","\tunit clause of the form f(x1,..,xn) = t where x1,..,xn are the pairwise ","\tdistinct free variables of t and f does not appear in t. If 'all', definitions ","\tare eliminated by replacing every occurrence of f(s1,..,sn) by t{x1 -> ","\ts1, .., xn -> sn}. If 'unused' only unused definitions are removed.","\tdefault: all","\tvalues: all,none,unused","--general_splitting (-gsp)","\tSplits clauses in order to reduce number of different variables in each ","\tclause. A clause C[X] \\/ D[Y] with subclauses C and D over non-equal sets ","\tof variables X and Y can be split into S(Z) \\/ C[X] and ~S(Z) \\/ D[Y] where ","\tZ is the intersection of X and Y.","\tdefault: off","--ignore_conjecture_in_preprocessing (-icip)","\tMake sure we do not delete the conjecture in preprocessing even if it can ","\tbe deleted.","\tdefault: off","--inequality_splitting (-ins)","\tWhen greater than zero, ins defines a weight threshold w such that any ","\tclause C \\/ s!=t where s (or conversely t) is ground and has weight greater ","\tor equal than w is replaced by C \\/ p(s) with the additional unit clause ","\t~p(t) being added for fresh predicate p.","\tdefault: 0","--inline_let (-ile)","\tAlways inline let-expressions.","\tdefault: off","--mono_ep (-mep)","\tUse the monomorphic version of equality proxy transformation.","\tdefault: on","--naming (-nm)","\tIntroduce names for subformulas. Given a subformula F(x1,..,xk) of formula ","\tG a new predicate symbol is introduced as a name for F(x1,..,xk) by adding ","\tthe axiom n(x1,..,xk) <=> F(x1,..,xk) and replacing F(x1,..,xk) with n(x1,..,xk) ","\tin G. The value indicates how many times a subformula must be used before ","\tit is named.","\tdefault: 8","--newcnf (-newcnf)","\tUse NewCNF algorithm to do naming, preprocessing and clausification.","\tdefault: off","--normalize (-norm)","\tNormalize the problem so that the ordering of clauses etc does not effect ","\tproof search.","\tdefault: off","--random_polarities (-rp)","\tAs part of preprocessing, randomly (though consistently) flip polarities ","\tof non-equality predicates in the whole CNF.","\tdefault: off","--shuffle_input (-si)","\tRandomly shuffle the input problem. (Runs after and thus destroys normalize.)","\tdefault: off","--sine_depth (-sd)","\tLimit number of iterations of the transitive closure algorithm that selects ","\tformulas based on SInE's D-relation (see SInE description). 0 means no ","\tlimit, 1 is a maximal limit (least selected axioms), 2 allows two iterations, ","\tetc...","\tdefault: 0","--sine_generality_threshold (-sgt)","\tGenerality of a symbol is the number of input formulas in which a symbol ","\tappears. If the generality of a symbol is smaller than the threshold, it ","\tis always added into the D-relation with formulas in which it appears.","\tdefault: 0","--sine_selection (-ss)","\tIf 'axioms', all formulas that are not annotated as 'axiom' (i.e. conjectures ","\tand hypotheses) are initially selected, and the SInE selection is performed ","\ton those annotated as 'axiom'. If 'included', all formulas that are directly ","\tin the problem file are initially selected, and the SInE selection is performed ","\ton formulas from included files. The 'included' value corresponds to the ","\tbehaviour of the original SInE implementation.","\tdefault: off","\tvalues: axioms,included,off","--sine_tolerance (-st)","\tSInE tolerance parameter (sometimes referred to as 'benevolence')","\tdefault: 1","--sos (-sos)","\tSet of support strategy. All formulas annotated as axioms are put directly ","\tamong active clauses, without performing any inferences between them. If ","\tall, select all literals of set-of-support clauses, otherwise use the default ","\tliteral selector. If theory then only apply to theory axioms introduced ","\tby vampire (all literals are selected).","\tdefault: off","\tvalues: all,off,on,theory","--sos_theory_limit (-sstl)","\tWhen sos=theory, limit the depth of descendants a theory axiom can have.","\tdefault: 0","--theory_axioms (-tha)","\tInclude theory axioms for detected interpreted symbols","\tdefault: on","\tvalues: on,off,some","--theory_flattening (-thf)","\tFlatten clauses to separate theory and non-theory parts in the input. This ","\tis often quickly undone in proof search.","\tdefault: off","--unused_predicate_definition_removal (-updr)","\tAttempt to remove predicate definitions. A predicate definition is a formula ","\tof the form ![X1,..,Xn] : (p(X1,..,XN) <=> F) where p is not equality and ","\tdoes not occur in F and X1,..,XN are the free variables of F. If p has ","\tonly positive (negative) occurrences then <=> in the definition can be ","\treplaced by => (<=). If p does not occur in the rest of the problem the ","\tdefinition can be removed.","\tdefault: on","","************************************************************","***********************  Saturation  ***********************","************************************************************","","--activation_limit (-al)","\tTerminate saturation after this many iterations of the main loop. 0 means ","\tno limit.","\tdefault: 0","--age_weight_ratio (-awr)","\tRatio in which clauses are being selected for activation i.e. a:w means ","\tthat for every a clauses selected based on age there will be w selected ","\tbased on weight.","\tdefault left: 1","\tdefault right: 1","--age_weight_ratio_shape (-awrs)","\tHow to change the age/weight ratio during proof search.","\tdefault: constant","\tvalues: constant,decay,converge","--age_weight_ratio_shape_frequency (-awrsf)","\tHow frequently the age/weight ratio shape is to change: i.e. if set to ","\t'decay' at a frequency of 100, the age/weight ratio will change every 100 ","\tage/weight choices.","\tdefault: 100","--increased_numeral_weight (-inw)","\tThis option only applies if the problem has interpreted numbers. The weight ","\tof integer constants depends on the logarithm of their absolute value (instead ","\tof being 1)","\tdefault: off","--introduced_symbol_precedence (-isp)","\tDecides where to place symbols introduced during proof search in the symbol ","\tprecedence","\tdefault: top","\tvalues: top,bottom","--literal_comparison_mode (-lcm)","\tVampire uses term orderings which use an ordering of predicates. Standard ","\tplaces equality (and certain other special predicates) first and all others ","\tsecond. Predicate depends on symbol precedence (see symbol_precedence). ","\tReverse reverses the order.","\tdefault: standard","\tvalues: predicate,reverse,standard","--literal_maximality_aftercheck (-lma)","\tFor efficiency we perform maximality checks before applying substitutions. ","\tSometimes this can lead to generating more clauses than needed for completeness. ","\tSet this on to add the checks afterwards as well.","\tdefault: off","--lookahaed_delay (-lsd)","\tDelay the use of lookahead selection by this many selections the idea is ","\tthat lookahead selection may behave erratically at the start","\tdefault: 0","--lrs_estimate_correction_coef (-lecc)","\tMake lrs more (<1.0) or less (>1.0) agressive by multiplying by this coef ","\tits estimate of how many clauses are still reachable.","\tdefault: 1","--nongoal_weight_coefficient (-nwc)","\tcoefficient that will multiply the weight of theory clauses (those marked ","\tas 'axiom' in TPTP)","\tdefault: 1","--positive_literal_split_queue (-plsq)","\tTurn on experiments: clause selection with multiple queues containing different ","\tclauses (split by number of positive literals in clause)","\tdefault: off","--positive_literal_split_queue_cutoffs (-plsqc)","\tThe cutoff-values for the positive-literal-split-queues (the cutoff value ","\tfor the last queue is omitted, since it has to be infinity).","\tdefault: 0","--positive_literal_split_queue_layered_arrangement (-plsql)","\tIf turned on, use a layered arrangement to split clauses into queues. Otherwise ","\tuse a tammet-style-arrangement.","\tdefault: off","--positive_literal_split_queue_ratios (-plsqr)","\tThe ratios for picking clauses from the positive-literal-split-queues using ","\tweighted round robin. If a queue is empty, the clause will be picked from ","\tthe next non-empty queue to the right. Note that this option implicitly ","\talso sets the number of queues.","\tdefault: 1,4","--restrict_nwc_to_goal_constants (-rnwc)","\trestrict nongoal_weight_coefficient to those containing goal constants","\tdefault: off","--saturation_algorithm (-sa)","\tSelect the saturation algorithm:","\t - discount:","\t - otter:","\t - limited resource:","\t - instance generation: a simple implementation of instantiation calculus","\t    (global_subsumption, unit_resulting_resolution and age_weight_ratio)","\t - fmb : finite model building for satisfiable problems.","\t - z3 : pass the preprocessed problem to z3, will terminate if the resulting ","\tproblem is not ground.","\tinst_gen, z3 and fmb aren't influenced by options for the saturation algorithm, ","\tapart from those under the relevant heading","\tdefault: lrs","\tvalues: discount,fmb,inst_gen,lrs,otter,z3","--selection (-s)","\tSelection methods 2,3,4,10,11 are complete by virtue of extending Maximal ","\ti.e. they select the best among maximal. Methods 1002,1003,1004,1010,1011 ","\trelax this restriction and are therefore not complete.","\t 0     - Total (select everything)","\t 1     - Maximal","\t 2     - ColoredFirst, MaximalSize then Lexicographical","\t 3     - ColoredFirst, NoPositiveEquality, LeastTopLevelVariables,","\t          LeastDistinctVariables then Lexicographical","\t 4     - ColoredFirst, NoPositiveEquality, LeastTopLevelVariables,","\t          LeastVariables, MaximalSize then Lexicographical","\t 10    - ColoredFirst, NegativeEquality, MaximalSize, Negative then Lexicographical","\t 11    - Lookahead","\t 666   - Random","\t 1002  - Incomplete version of 2","\t 1003  - Incomplete version of 3","\t 1004  - Incomplete version of 4","\t 1010  - Incomplete version of 10","\t 1011  - Incomplete version of 11","\t 1666  - Incomplete version of 666","\tOr negated, which means that reversePolarity is true i.e. for selection ","\twe treat all negative non-equality literals as positive and vice versa ","\t(can only apply to non-equality literals).","\t","\tdefault: 10","--sine_level_split_queue (-slsq)","\tTurn on experiments: clause selection with multiple queues containing different ","\tclauses (split by sine-level of clause)","\tdefault: off","--sine_level_split_queue_cutoffs (-slsqc)","\tThe cutoff-values for the sine-level-split-queues (the cutoff value for ","\tthe last queue is omitted, since it has to be infinity).","\tdefault: 0","--sine_level_split_queue_layered_arrangement (-slsql)","\tIf turned on, use a layered arrangement to split clauses into queues. Otherwise ","\tuse a tammet-style-arrangement.","\tdefault: on","--sine_level_split_queue_ratios (-slsqr)","\tThe ratios for picking clauses from the sine-level-split-queues using weighted ","\tround robin. If a queue is empty, the clause will be picked from the next ","\tnon-empty queue to the right. Note that this option implicitly also sets ","\tthe number of queues.","\tdefault: 1,1","--sine_to_age (-s2a)","\tUse SInE levels to postpone introducing clauses more distant from the conjecture ","\tto proof search by artificially making them younger (age := sine_level).","\tdefault: off","--sine_to_age_generality_threshold (-s2agt)","\tLike sine_generality_threshold but influences sine_to_age, sine_to_pred_levels, ","\tand sine_level_split_queue rather than sine_selection.","\tdefault: 0","--sine_to_age_tolerance (-s2at)","\tLike sine_tolerance but influences sine_to_age, sine_to_pred_levels, and ","\tsine_level_split_queue rather than sine_selection.","\tdefault: 1","--sine_to_pred_levels (-s2pl)","\tAssign levels to predicate symbols as they are used to trigger axioms during ","\tSInE computation. Then use them as predicateLevels determining the ordering. ","\t'on' means conjecture symbols are larger, 'no' means the opposite. (equality ","\tkeeps its standard lowest level).","\tdefault: off","\tvalues: no,off,on","--symbol_precedence (-sp)","\tVampire uses term orderings which require a precedence relation between ","\tsymbols.","\tArity orders symbols by their arity (and reverse_arity takes the reverse ","\tof this) and occurence orders symbols by the order they appear in the problem. ","\tThen we have a few precedence generating schemes adopted from E: frequency ","\t- sort by frequency making rare symbols large, reverse does the opposite, ","\t(For the weighted versions, each symbol occurence counts as many times ","\tas is the length of the clause in which it occurs.) unary_first is like ","\tarity, except that unary symbols are maximal (and ties are broken by frequency), ","\tunary_frequency is like frequency, except that unary symbols are maximal, ","\tconst_max makes constants the largest, then falls back to arity, const_min ","\tmakes constants the smallest, then falls back to reverse_arity, const_frequency ","\tmakes constants the smallest, then falls back to frequency.","\tdefault: arity","\tvalues: arity,occurrence,reverse_arity,unary_first,const_max,const_min,scramble,","\t        frequency,unary_frequency,const_frequency,reverse_frequency,","\t        weighted_frequency,reverse_weighted_frequency","--symbol_precedence_boost (-spb)","\tBoost the symbol precedence of symbols occurring in certain kinds of clauses ","\tin the input.","\tAdditionally, non_intro/intro suppress/boost the precedence of symbols ","\tintroduced during preprocessing (i.e., mainly, the naming predicates and ","\tthe skolems).","\tdefault: none","\tvalues: none,goal,units,goal_then_units,non_intro,intro","--term_ordering (-to)","\tThe term ordering used by Vampire to orient equations and order literals","\tdefault: kbo","\tvalues: kbo,lpo","--theory_split_queue (-thsq)","\tTurn on clause selection using multiple queues containing different clauses ","\t(split by amount of theory reasoning)","\tdefault: off","--theory_split_queue_cutoffs (-thsqc)","\tThe cutoff-values for the split-queues (the cutoff value for the last queue ","\thas to be omitted, as it is always infinity). Any split-queue contains ","\tall clauses which are assigned a feature-value less or equal to the cutoff-value ","\tof the queue. If no custom value for this option is set, the implementation ","\twill use cutoffs 0,4*d,10*d,infinity (where d denotes the theory split ","\tqueue expected ratio denominator).","\tdefault: 0","--theory_split_queue_expected_ratio_denom (-thsqd)","\tThe denominator n such that we expect the final proof to have a ratio of ","\ttheory-axioms to all-axioms of 1/n.","\tdefault: 8","--theory_split_queue_layered_arrangement (-thsql)","\tIf turned on, use a layered arrangement to split clauses into queues. Otherwise ","\tuse a tammet-style-arrangement.","\tdefault: on","--theory_split_queue_ratios (-thsqr)","\tThe ratios for picking clauses from the split-queues using weighted round ","\trobin. If a queue is empty, the clause will be picked from the next non-empty ","\tqueue to the right. Note that this option implicitly also sets the number ","\tof queues.","\tdefault: 1,1","","************************************************************","**********************  LRS Specific  **********************","************************************************************","","--lrs_first_time_check","\tPercentage of time limit at which the LRS algorithm will for the first ","\ttime estimate the number of reachable clauses.","\tdefault: 5","--lrs_weight_limit_only (-lwlo)","\tIf off, the lrs sets both age and weight limit according to clause reachability, ","\totherwise it sets the age limit to 0 and only the weight limit reflects ","\treachable clauses","\tdefault: off","--simulated_instruction_limit (-sil)","\tInstruction limit (in millions) of executed instructions for the purpose ","\tof reachability estimations of the LRS saturation algorithm (if 0, the ","\tactual instruction limit is used)","\tdefault: 0","--simulated_time_limit (-stl)","\tTime limit in seconds for the purpose of reachability estimations of the ","\tLRS saturation algorithm (if 0, the actual time limit is used)","\tdefault: 0d","","************************************************************","***********************  Inferences  ***********************","************************************************************","","--arithmetic_subterm_generalizations (-asg)","\t          Enables various generalization rules for arithmetic terms as ","\tdescribed in the paper Making Theory Reasoning Simpler ( https://easychair.org/publications/preprint/K2hb ","\t).           In some rare cases the conclusion may be not strictly simpler ","\tthan the hypothesis. With `force` we ignore these cases, violating the ","\tordering and just simplifying           anyways. With `cautious` we will ","\tgenerate a new clause instead of simplifying in these cases.","\tdefault: off","\tvalues: force,cautious,off","--backward_demodulation (-bd)","\tOriented rewriting of kept clauses by newly derived unit equalities","\ts = t     L[sθ] \\/ C","\t---------------------   where sθ > tθ (replaces RHS)","\t L[tθ] \\/ C","\t","\tdefault: all","\tvalues: all,off,preordered","--backward_subsumption (-bs)","\tPerform subsumption deletion of kept clauses by newly derived clauses. ","\tUnit_only means that the subsumption will be performed only by unit clauses","\tdefault: off","\tvalues: off,on,unit_only","--backward_subsumption_demodulation (-bsd)","\tPerform backward subsumption demodulation.","\tdefault: off","--backward_subsumption_demodulation_max_matches (-bsdmm)","\tMaximum number of multi-literal matches to consider in backward subsumption ","\tdemodulation. 0 means to try all matches (until first success).","\tdefault: 0","--backward_subsumption_resolution (-bsr)","\tPerform subsumption resolution on kept clauses using newly derived clauses. ","\tUnit_only means that the subsumption resolution will be performed only ","\tby unit clauses","\tdefault: off","\tvalues: off,on,unit_only","--binary_resolution (-br)","\tStandard binary resolution i.e.","\tC \\/ t     D \\/ s","\t---------------------","\t(C \\/ D)θ","\twhere θ = mgu(t,-s) and t selected","\tdefault: on","--cancellation (-canc)","\tEnables the rule cancellation around additions as described in the paper ","\tMaking Theory Reasoning Simpler ( https://easychair.org/publications/preprint/K2hb ","\t).                                 In some rare cases the conclusion may ","\tbe not strictly simpler than the hypothesis. With `force` we ignore these ","\tcases, violating the ordering and just simplifying                     ","\t            anyways. With `cautious` we will generate a new clause instead ","\tof simplifying in these cases.","\tdefault: off","\tvalues: force,cautious,off","--condensation (-cond)","\tPerform condensation. If 'fast' is specified, we only perform condensations ","\tthat are easy to check for.","\tdefault: off","\tvalues: fast,off,on","--demodulation_redundancy_check (-drc)","\tThe following cases of backward and forward demodulation do not preserve ","\tcompleteness:","\ts = t     s = t1 \\/ C \t s = t     s != t1 \\/ C","\t--------------------- \t ---------------------","\tt = t1 \\/ C \t\t t != t1 \\/ C","\twhere t > t1 and s = t > C (RHS replaced)","\tWith `on`, we check this condition and don't demodulate if we could violate ","\tcompleteness.","\tWith `encompass`, we treat demodulations (both forward and backward) as ","\tencompassment demodulations (as defined by Duarte and Korovin in 2022's ","\tIJCAR paper).","\tWith `off`, we skip the checks, save time, but become incomplete.","\tdefault: on","\tvalues: off,encompass,on","--equational_tautology_removal (-etr)","\tA reduction which uses congruence closure to remove logically valid clauses.","\tdefault: off","--extensionality_allow_pos_eq","\tIf extensionality resolution equals filter, this dictates whether we allow ","\tother positive equalities when recognising extensionality clauses","\tdefault: off","--extensionality_max_length","\tSets the maximum length (number of literals) an extensionality clause can ","\thave when doing recognition for extensionality resolution. If zero there ","\tis no maximum.","\tdefault: 0","--extensionality_resolution (-er)","\tTurns on the following inference rule:","\t  x=y \\/ C    s != t \\/ D","\t  -----------------------","\t  C{x → s, y → t} \\/ D","\tWhere s!=t is selected in s!=t \\/D and x=y \\/ C is a recognised as an extensionality ","\tclause - how clauses are recognised depends on the value of this option.","\tIf filter we attempt to recognise all extensionality clauses i.e. those ","\tthat have exactly one X=Y, no inequality of the same sort as X-Y (and optionally ","\tno equality except X=Y, see extensionality_allow_pos_eq).","\tIf known we only recognise a known set of extensionality clauses. At the ","\tmoment this includes the standard and subset-based formulations of the ","\tset extensionality axiom, as well as the array extensionality axiom.","\tIf tagged we only use formulas tagged as extensionality clauses.","\tdefault: off","\tvalues: filter,known,tagged,off","--fool_paramodulation (-foolp)","\tTurns on the following inference rule:","\t        C[s]","\t--------------------,","\tC[true] \\/ s = false","\twhere s is a boolean term that is not a variable, true or false, C[true] ","\tis the C clause with s substituted by true. This rule is needed for efficient ","\ttreatment of boolean terms.","\tdefault: off","--forward_demodulation (-fd)","\tOriented rewriting of newly derived clauses by kept unit equalities","\ts = t     L[sθ] \\/ C","\t---------------------  where sθ > tθ","\t L[tθ] \\/ C","\tIf 'preordered' is set, only equalities s = t where s > t are used for ","\trewriting.","\tdefault: all","\tvalues: all,off,preordered","--forward_literal_rewriting (-flr)","\tPerform forward literal rewriting.","\tdefault: off","--forward_subsumption (-fs)","\tPerform forward subsumption deletion.","\tdefault: on","--forward_subsumption_demodulation (-fsd)","\tPerform forward subsumption demodulation.","\tdefault: off","--forward_subsumption_demodulation_max_matches (-fsdmm)","\tMaximum number of multi-literal matches to consider in forward subsumption ","\tdemodulation. 0 means to try all matches (until first success).","\tdefault: 0","--forward_subsumption_resolution (-fsr)","\tPerform forward subsumption resolution.","\tdefault: on","--function_definition_introduction (-fdi)","\tIf non-zero, introduces function definitions with generalisation for repeated ","\tcompound terms in the active set. For example, if f(a, g(a)) and f(b, g(b)) ","\toccur frequently, we might define d(X) = f(X, g(X)). The parameter value ","\t'n' is a threshold: terms that occur more than n times have a definition ","\tcreated.","\tdefault: 0","--gaussian_variable_elimination (-gve)","\tEnable the immediate simplification \"Gaussian Variable Elimination\":","\t","\ts != t \\/ C[X] ","\t--------------  if s != t can be rewritten to X != r ","\t    C[r] ","\t","\tExample:","\t","\t6 * X0 != 2 * X1 | p(X0, X1)","\t-------------------------------","\t  p(2 * X1 / 6, X1)","\t","\t","\tFor a more detailed description see the paper Making Theory Reasoning Simpler ","\t( https://easychair.org/publications/preprint/K2hb ).           In some ","\trare cases the conclusion may be not strictly simpler than the hypothesis. ","\tWith `force` we ignore these cases, violating the ordering and just simplifying ","\t          anyways. With `cautious` we will generate a new clause instead ","\tof simplifying in these cases.","\tdefault: off","\tvalues: force,cautious,off","--global_subsumption (-gs)","\tPerform global subsumption. Use a set of groundings of generated clauses ","\tG to replace C \\/ L by C if the grounding of C is implied by G. A SAT solver ","\tis used for ground reasoning.","\tdefault: off","--global_subsumption_avatar_assumptions (-gsaa)","\tWhen running global subsumption and AVATAR at the same time we need to ","\tinclude information about the current AVATAR model. When this is off we ","\tignore clauses with AVATAR assumptions for GS. When it is from_current ","\twe assume the assumptions in the current clause. When it is full_model ","\twe assume the full model from AVATAR. See paper Global Subsumption Revisited ","\t(Briefly).","\tdefault: off","\tvalues: off,from_current,full_model","--global_subsumption_explicit_minim (-gsem)","\tno description provided!","\tdefault: randomized","\tvalues: off,on,randomized","--global_subsumption_sat_solver_power (-gsssp)","\tExplicitly minimize the result of global subsumption reduction.","\tdefault: propagation_only","\tvalues: propagation_only,full","--high_school (-hsm)","\tEnables high school education for vampire. (i.e.: sets -gve cautious, -asg ","\tcautious, -ev cautious, -canc cautious, -pum on )","\tdefault: off","--hyper_superposition","\tSimplifying inference that attempts to do several rewritings at once if ","\tit will eliminate literals of the original clause (now we aim just for ","\telimination by equality resolution)","\tdefault: off","--induction (-ind)","\tApply structural and/or integer induction on datatypes and integers.","\tdefault: none","\tvalues: none,struct,int,both","--induction_choice (-indc)","\tWhere to apply induction. Goal only applies to constants in goal, goal_plus ","\textends this with skolem constants introduced by induction. Consider using ","\tguess_the_goal for problems in SMTLIB as they do not come with a conjecture","\tdefault: all","\tvalues: all,goal,goal_plus","--induction_gen (-indgen)","\tApply induction with generalization (on both all & selected occurrences)","\tdefault: off","--induction_max_depth (-indmd)","\tSet maximum depth of induction where 0 means no max.","\tdefault: 0","--induction_neg_only (-indn)","\tOnly apply induction to negative literals","\tdefault: on","--induction_on_complex_terms (-indoct)","\tApply induction on complex (ground) terms vs. only on constants","\tdefault: off","--induction_strengthen_hypothesis (-indstrhyp)","\tStrengthen induction formulas with the remaining skolem constants replaced ","\twith universally quantified variables in hypotheses","\tdefault: off","--induction_unit_only (-indu)","\tOnly apply induction to unit clauses","\tdefault: on","--inner_rewriting (-irw)","\tC[t_1] | t1 != t2 ==> C[t_2] | t1 != t2 when t1>t2","\tdefault: off","--instantiation (-inst)","\tHeuristically instantiate variables. Often wastes a lot of effort. Consider ","\tusing thi instead.","\tdefault: off","\tvalues: off,on","--int_induction_default_bound (-intinddb)","\tAlways apply integer induction with bound 0","\tdefault: off","--int_induction_interval (-intindint)","\tWhether integer induction is applied over infinite or finite intervals, ","\tor both","\tdefault: both","\tvalues: infinite,finite,both","--int_induction_kind (-iik)","\tThe kind of integer induction applied","\tdefault: one","\tvalues: one,two,all","--int_induction_strictness_comp (-intindstcomp)","\tExclude induction term t/literal l combinations from integer induction.","\tInduction is not applied to _comparison_ literals l:","\t  - none: no exclusion","\t  - toplevel_not_in_other: t is a top-level argument of l,","\t    but it does not occur in the other argument of l","\t  - only_one_occurrence: t has only one occurrence in l","\t  - not_in_both: t does not occur in both arguments of l","\t  - always: induction on l is not allowed at all","\t","\tdefault: toplevel_not_in_other","\tvalues: none,toplevel_not_in_other,only_one_occurrence,not_in_both,always","--int_induction_strictness_eq (-intindsteq)","\tExclude induction term t/literal l combinations from integer induction.","\tInduction is not applied to _equality_ literals l:","\t  - none: no exclusion","\t  - toplevel_not_in_other: t is a top-level argument of l,","\t    but it does not occur in the other argument of l","\t  - only_one_occurrence: t has only one occurrence in l","\t  - not_in_both: t does not occur in both arguments of l","\t  - always: induction on l is not allowed at all","\t","\tdefault: none","\tvalues: none,toplevel_not_in_other,only_one_occurrence,not_in_both,always","--int_induction_strictness_term (-intindstterm)","\tExclude induction term t/literal l combinations from integer induction.","\tInduction is not applied to the induction term t:","\t  - none: no exclusion","\t  - interpreted_constant: t is an interpreted constant","\t  - no_skolems: t does not contain a skolem function","\tdefault: interpreted_constant","\tvalues: none,interpreted_constant,no_skolems","--max_induction_gen_subset_size (-indgenss)","\tSet maximum number of occurrences of the induction term to be generalized, ","\twhere 0 means no max. (Regular induction will be applied without this restriction.)","\tdefault: 3","--non_unit_induction (-nui)","\tInduction on certain clauses or clause sets instead of just unit clauses","\tdefault: off","--normalize_inequalities (-norm_ineq)","\tEnable normalizing of inequalities like s < t ==> 0 < t - s.","\tdefault: off","--push_unary_minus (-pum)","\tEnable the immediate simplifications:","\t -(t + s) ==> -t + -s","\t -(-t) ==> t","\t","\tdefault: off","--simultaneous_superposition (-sims)","\tRewrite the whole RHS clause during superposition, not just the target ","\tliteral.","\tdefault: on","--structural_induction_kind (-sik)","\tThe kind of structural induction applied","\tdefault: one","\tvalues: one,two,three,all","--superposition_from_variables (-sfv)","\tPerform superposition from variables.","\tdefault: on","--term_algebra_acyclicity (-tac)","\tActivates the cyclicity rule for term algebras (such as algebraic datatypes ","\tin SMT-LIB):","\t- off : the cyclicity rule is not enforced (this is sound but incomplete)","\t- axiom : the cyclicity rule is axiomatized with a transitive predicate ","\tdescribing the subterm relation over terms","\t- rule : the cyclicity rule is enforced by a specific hyper-resolution ","\trule","\t- light : the cyclicity rule is enforced by rule generating disequality ","\tbetween a term and its known subterms","\tdefault: off","\tvalues: off,axiom,rule,light","--term_algebra_rules (-tar)","\tActivates some rules that improve reasoning with term algebras (such as ","\talgebraic datatypes in SMT-LIB):","\tIf the problem does not contain any term algebra symbols, activating this ","\toptions has no effect","\t- distinctness rule:","\tf(...) = g(...) \\/ A","\t--------------------","\t          A         ","\twhere f and g are distinct term algebra constructors","\t- distinctness tautology deletion: clauses of the form f(...) ~= g(...) ","\t\\/ A are deleted","\t- injectivity rule:","\tf(s1 ... sn) = f(t1 ... tn) \\/ A","\t--------------------------------","\t         s1 = t1 \\/ A","\t               ...","\t         sn = tn \\/ A","\tdefault: on","--theory_instantiation (-thi)","\t","\tEnables theory instantiation rule: ","\tT[x_1, ..., x_n] \\/ C[x_1, ..., x_n]","\t-------------------------------------","\t           C[t_1, ..., t_n]          ","\twhere  ","\t -  T[x_1, ..., x_n] is a pure theory clause  ","\t - ~T[t_1, ...., t_n] is valid ","\t","\tThe rule uses an smt solver (i.e. z3 atm) to find t_1...t_n that satisfy ","\tthe requirement for the rule.","\t","\tThe different option values define the behaviour of which theory literals ","\tto select.","\t- all    : hmmm.. what could that mean?!","\t- neg_eq : only negative equalities","\t- strong : interpreted predicates, but no positive equalities","\t- overlap: all literals that contain variables that are also contained ","\tin a strong literal","\t- new    : deprecated","\t- full   : deprecated","\tdefault: off","\tvalues: off,all,strong,neg_eq,overlap,full,new","--unification_with_abstraction (-uwa)","\tDuring unification, if two terms s and t fail to unify we will introduce ","\ta constraint s!=t and carry on. For example, resolving p(1) \\/ C with ~p(a+2) ","\twould produce C \\/ 1 !=a+2. This is controlled by a check on the terms. ","\tThe expected use case is in theory reasoning. The possible values are:- ","\toff: do not introduce a constraint","\t- interpreted_only: only if s and t have interpreted top symbols","\t- one_side_interpreted: only if one of s or t have interpreted top symbols","\t- one_side_constant: only if one of s or t is an interpreted constant (e.g. ","\ta number)","\t- all: always apply","\t- ground: only if both s and t are ground","\tSee Unification with Abstraction and Theory Instantiation in Saturation-Based ","\tReasoning for further details.","\tdefault: off","\tvalues: off,interpreted_only,one_side_interpreted,one_side_constant,all,","\t        ground","--unit_resulting_resolution (-urr)","\tUses unit resulting resolution only to derive empty clauses (may be useful ","\tfor splitting)","\tdefault: off","\tvalues: ec_only,off,on","--use_ac_eval (-uace)","\tEvaluate associative and commutative operators e.g. + and *.","\tdefault: on","","************************************************************","*************************  AVATAR  *************************","************************************************************","","--avatar (-av)","\tUse AVATAR splitting.","\tdefault: on","--avatar_add_complementary (-aac)","\tno description provided!","\tdefault: ground","\tvalues: ground,none","--avatar_buffered_solver (-abs)","\tAdded buffering functionality to the SAT solver used in AVATAR.","\tdefault: off","--avatar_congruence_closure (-acc)","\tUse a congruence closure decision procedure on top of the AVATAR SAT solver. ","\tThis ensures that models produced by AVATAR satisfy the theory of uninterpreted ","\tfunctions.","\tdefault: off","\tvalues: model,off,on","--avatar_delete_deactivated (-add)","\tno description provided!","\tdefault: on","\tvalues: on,large,off","--avatar_eager_removal (-aer)","\tIf a component was in the model and then becomes 'don't care' eagerly remove ","\tthat component from the first-order solver. Note: only has any impact when ","\tamm is used.","\tdefault: on","--avatar_fast_restart (-afr)","\tno description provided!","\tdefault: off","--avatar_flush_period (-afp)","\tafter given number of generated clauses without deriving an empty clause, ","\tthe splitting component selection is shuffled. If equal to zero, shuffling ","\tis never performed.","\tdefault: 0","--avatar_flush_quotient (-afq)","\tafter each flush, the avatar_flush_period is multiplied by the quotient","\tdefault: 1.5","--avatar_literal_polarity_advice (-alpa)","\tOverride SAT-solver's default polarity/phase setting for variables abstracting ","\tclause components.","\tdefault: none","\tvalues: false,true,none,random","--avatar_minimize_model (-amm)","\tMinimize the SAT-solver model by replacing concrete values with don't-cares ","\tprovided <all> the sat clauses (or only the split clauses with <sco>) remain ","\tprovably satisfied by the partial model.","\tdefault: all","\tvalues: off,sco,all","--avatar_nonsplittable_components (-anc)","\tDecide what to do with a nonsplittable component:","\t  -known: SAT clauses will be learnt from non-splittable clauses that have ","\tcorresponding components (if there is a component C with name SAT l, clause ","\tC | {l1,..ln} will give SAT clause ~l1 \\/ … \\/ ~ln \\/ l). When we add ","\tthe sat clause, we discard the original FO clause C | {l1,..ln} and let ","\tthe component selection update model, possibly adding the component clause ","\tC | {l}.","\t  -all: like known, except when we see a non-splittable clause that doesn't ","\thave a name, we introduce the name for it.","\t  -all_dependent: like all, but we don't introduce names for non-splittable ","\tclauses that don't depend on any components","\tdefault: known","\tvalues: all,all_dependent,known,none","--avatar_split_queue (-avsq)","\tTurn on experiments: clause selection with multiple queues containing different ","\tclauses (split by amount of avatar-split-set-size)","\tdefault: off","--avatar_split_queue_cutoffs (-avsqc)","\tThe cutoff-values for the avatar-split-queues (the cutoff value for the ","\tlast queue is omitted, since it has to be infinity).","\tdefault: 0","--avatar_split_queue_layered_arrangement (-avsql)","\tIf turned on, use a layered arrangement to split clauses into queues. Otherwise ","\tuse a tammet-style-arrangement.","\tdefault: off","--avatar_split_queue_ratios (-avsqr)","\tThe ratios for picking clauses from the split-queues using weighted round ","\trobin. If a queue is empty, the clause will be picked from the next non-empty ","\tqueue to the right. Note that this option implicitly also sets the number ","\tof queues.","\tdefault: 1,1","--avatar_turn_off_time_frac (-atotf)","\tStop splitting after the specified fraction of the overall time has passed ","\t(the default 1.0 means AVATAR runs until the end).","\t(the remaining time AVATAR is still switching branches and communicating ","\twith the SAT solver,","\tbut not introducing new splits anymore. This fights the theoretical possibility ","\tof AVATAR's dynamic incompleteness.)","\tdefault: 1","--cc_unsat_cores (-ccuc)","\tno description provided!","\tdefault: all","\tvalues: first,small_ones,all","--nonliterals_in_clause_weight (-nicw)","\tNon-literal parts of clauses (such as its split history) will also contribute ","\tto the weight","\tdefault: off","--split_at_activation (-sac)","\tSplit a clause when it is activated, default is to split when it is processed","\tdefault: off","","*************************************************************","***********************  SAT Solving  ***********************","*************************************************************","","--sat_fallback_for_smt (-sffsmt)","\tIf using z3 run a sat solver alongside to use if the smt solver returns ","\tunknown at any point","\tdefault: off","--sat_solver (-sas)","\tSelect the SAT solver to be used throughout the solver. This will be used ","\tin AVATAR (for splitting) when the saturation algorithm is discount,lrs ","\tor otter and in instance generation for selection and global subsumption.","\tdefault: minisat","\tvalues: minisat,z3","","*************************************************************","******************  Finite Model Building  ******************","*************************************************************","","--fmb_adjust_sorts (-fmbas)","\tDetect monotonic sorts. If <expand> then expand monotonic subsorts into ","\tproper sorts. If <group> then collapse monotonic sorts into a single sort. ","\tIf <predicate> then introduce sort predicates for non-monotonic sorts and ","\tcollapse all sorts into one. If <function> then introduce sort functions ","\tfor non-monotonic sorts and collapse all sorts into one","\tdefault: group","\tvalues: off,expand,group,predicate,function","--fmb_detect_sort_bounds (-fmbdsb)","\tUse a saturation loop to detect sort bounds introduced by (for example) ","\tinjective functions","\tdefault: off","--fmb_detect_sort_bounds_time_limit (-fmbdsbt)","\tThe time limit (in seconds) for performing sort bound detection","\tdefault: 1","--fmb_enumeration_strategy (-fmbes)","\tHow model sizes assignments are enumerated in the multi-sorted setting. ","\t(Only smt and contour are known to be finite model complete and can therefore ","\treturn UNSAT.)","\tdefault: sbeam","\tvalues: sbeam,smt,contour","--fmb_keep_sbeam_generators (-fmbksg)","\tA modification of the sbeam enumeration strategy which (for a performance ","\tprice) makes it more enumeration-complete.","\tdefault: off","--fmb_size_weight_ratio (-fmbswr)","\tControls the priority the next sort size vector is given based on a ratio. ","\t0 is size only, 1 means 1:1, 2 means 1:2, etc.","\tdefault: 1","--fmb_start_size (-fmbss)","\tSet the initial model size for finite model building","\tdefault: 1","--fmb_symmetry_ratio (-fmbsr)","\tUsually we use at most n principal terms for symmetry avoidance where n ","\tis the current model size. This option allows us to supply a multiplier ","\tfor that n. See Symmetry Avoidance in MACE-Style Finite Model Finding.","\tdefault: 1","--fmb_symmetry_symbol_order (-fmbsso)","\tThe order of symbols considered for symmetry avoidance. See Symmetry Avoidance ","\tin MACE-Style Finite Model Finding.","\tdefault: occurence","\tvalues: occurence,input_usage,preprocessed_usage","","*************************************************************","*******************  Instance Generation  *******************","*************************************************************","","--inst_gen_big_restart_ratio (-igbrr)","\tDetermines how often a big restart (instance generation starts from input ","\tclauses) will be performed. Small restart means all clauses generated so ","\tfar are processed again.","\tdefault: 0","--inst_gen_passive_reactivation (-igpr)","\tWhen the model describing the selection function changes some active clauses ","\tmay become lazily deselected. If passive reaction is selected these clauses ","\tare added into the passive set before recomputing the next model, otherwise ","\tthey are added back to active.","\tdefault: off","--inst_gen_resolution_ratio (-igrr)","\tRatio of resolution and instantiation steps (applies only if inst_gen_with_resolution ","\tis on)","\tdefault left: 1","\tdefault right: 1","--inst_gen_restart_period (-igrp)","\tHow many clauses are processed before restart. The size of the restart ","\tdepends on inst_gen_big_restart_ratio.","\tdefault: 1000","--inst_gen_restart_period_quotient (-igrpq)","\tRestart period is multiplied by this number after each restart.","\tdefault: 1","--inst_gen_selection (-igs)","\tSelection function for InstGen. This is applied *after* model-based selection ","\tis applied. For consistency the value 1011 is used to denote look-ahead ","\tselection.","\tdefault: 0","--inst_gen_with_resolution (-igwr)","\tPerforms instantiation together with resolution (global subsumption index ","\tis shared, also clauses generated by the resolution are added to the instance ","\tSAT problem)","\tdefault: off","","************************************************************","*************************  Output  *************************","************************************************************","","--ignore_missing_inputs_in_unsat_core","\tWhen running in unsat core output mode we will complain if there is an ","\tinput formula that has no label. Set this on if you don't want this behaviour ","\t(which is default in smt-comp).","\tdefault: off","--latex_output","\tFile that will contain proof in the LaTeX format.","\tdefault: off","--latex_use_default_symbols","\tInterpreted symbols such as product have default LaTeX symbols that can ","\tbe used. They can be overriden in the normal way. This option can turn ","\tthem off","\tdefault: on","--minimize_sat_proofs (-msp)","\tPerform unsat core minimization when a sat solver finds a clause set UNSAT","\t(such as with AVATAR proofs or with global subsumption).","\tdefault: on","--output_axiom_names","\tPreserve names of axioms from the problem file in the proof output","\tdefault: off","--output_mode (-om)","\tChange how Vampire prints the final result. SZS uses TPTP's SZS ontology. ","\tsmtcomp mode suppresses all output and just prints sat/unsat. vampire is ","\tthe same as SZS just without the SZS. Spider prints out some profile information ","\tand extra error reports. ucore uses the smt-lib ucore output.","\tdefault: szs","\tvalues: smtcomp,spider,szs,vampire,ucore","--print_clausifier_premises","\tOutput how the clausified problem was derived.","\tdefault: off","--print_proofs_to_file (-pptf)","\tIf Vampire finds a proof, it is printed to the here specified file instead ","\tof to stdout.","\tCurrently, this option only works in portfolio mode.","\tdefault: <empty>","--proof (-p)","\tSpecifies whether proof (or similar e.g. model/saturation) will be output ","\tand in which format:","\t- off gives no proof output","\t- on gives native Vampire proof output","\t- proofcheck will output proof as a sequence of TPTP problems to allow ","\tfor proof-checking by external solvers","\t- tptp gives TPTP output","\t- property is a developmental option. It allows developers to output statistics ","\tabout the proof using a ProofPrinter object (see Kernel/InferenceStore::ProofPropertyPrinter","\t","\tdefault: on","\tvalues: off,on,proofcheck,tptp,property","--proof_extra","\tAdd extra detail to proofs:","\t - free uses known information only","\t- full may perform expensive operations to achieve this so may significantly ","\timpact on performance.","\t The option is still under development and the format of extra information ","\t(mainly from full) may change between minor releases","\tdefault: off","\tvalues: off,free,full","--show_fmb_sort_info","\tPrint information about sorts in FMB","\tdefault: off","--show_fool","\tReveal the internal representation of FOOL terms","\tdefault: off","--show_induction","\tPrint information about induction","\tdefault: off","--show_ordering","\tDisplay the used simplification ordering's parameters.","\tdefault: off","--statistics (-stat)","\tThe level of statistics to report at the end of the run.","\tdefault: brief","\tvalues: brief,full,none","--time_statistics (-tstat)","\tShow how much running time was spent in each part of Vampire","\tdefault: off","","*************************************************************","***********************  Development  ***********************","*************************************************************","","--arity_check","\tEnforce the condition that the same symbol name cannot be used with multiple ","\tarities.This also ensures a symbol is not used as a function and predicate.","\tdefault: off","--decode","\tDecodes an encoded strategy. Can be used to replay a strategy. To make ","\tVampire output an encoded version of the strategy use the encode option.","\tdefault: ","--encode","\tOutput an encoding of the strategy to be used with the decode option","\tdefault: off","--export_avatar","\tExport the avatar problems to solve in smtlib syntax.","\tdefault: <empty>","--export_thi","\tExport the theory instantiation problems to solve in smtlib syntax.","\tdefault: <empty>","--ignore_missing","\tIgnore any options that have been removed (useful in portfolio modes where ","\tthis can cause strategies to be skipped). If set to warn this will print ","\ta warning when ignoring. This is set to warn in CASC mode.","\tdefault: off","\tvalues: on,off,warn","--manual_cs","\tRun Vampire interactively by manually picking the clauses to be selected","\tdefault: off","--parsing_does_not_count","\tExtend the instruction limit by the amount of instructions it took to parse ","\tthe input problem.","\tdefault: off","--random_strategy","\tCreate a random strategy. Randomisation will occur after all other options ","\thave been set, whatever order they have been given in. A random number ","\tof options will be selected  and set with a safe (possibly default) value.","\tdefault: off","\tvalues: on,off,sat,nocheck","--show_active","\tPrint activated clauses.","\tdefault: off","--show_blocked","\tShow generating inferences blocked due to coloring of symbols","\tdefault: off","--show_definitions","\tShow definition introductions.","\tdefault: off","--show_everything","\tTurn (almost) all of the showX commands on","\tdefault: off","--show_new","\tShow new (generated) clauses","\tdefault: off","--show_nonconstant_skolem_function_trace","\tShow introduction of non-constant skolem functions.","\tdefault: off","--show_passive","\tShow clauses added to the passive set.","\tdefault: off","--show_preprocessing","\tShow preprocessing.","\tdefault: off","--show_reductions","\tShow reductions.","\tdefault: off","--show_skolemisations","\tShow Skolemisations.","\tdefault: off","--show_splitting","\tShow updates within AVATAR","\tdefault: off","--show_symbol_elimination","\tShow symbol elimination.","\tdefault: off","--show_theory_axioms","\tShow the added theory axioms.","\tdefault: off","--show_z3","\tPrint the clauses being added to Z3","\tdefault: off","","*************************************************************","**************************  Other  **************************","*************************************************************","","--question_answering (-qa)","\tDetermines whether (and how) we attempt to answer questions","\tdefault: off","\tvalues: answer_literal,from_proof,off","--use_hashing_clause_variant_index (-uhcvi)","\tUse clause variant index based on hashing for clause variant detection ","\t(affects inst_gen and avatar).","\tdefault: off"],"stylingDirectivescsv":null,"csvError":null,"dependabotInfo":{"showConfigurationBanner":false,"configFilePath":null,"networkDependabotPath":"/secure-foundations/mariposa/network/updates","dismissConfigurationNoticePath":"/settings/dismiss-notice/dependabot_configuration_notice","configurationNoticeDismissed":null,"repoAlertsPath":"/secure-foundations/mariposa/security/dependabot","repoSecurityAndAnalysisPath":"/secure-foundations/mariposa/settings/security_analysis","repoOwnerIsOrg":true,"currentUserCanAdminRepo":false},"displayName":"vampire_help","displayUrl":"https://github.com/secure-foundations/mariposa/blob/182b553066d35ccafad4f1b909499288e3a63777/docs/vampire_help?raw=true","headerInfo":{"blobSize":"54 KB","deleteInfo":{"deleteTooltip":"You must be signed in to make or propose changes"},"editInfo":{"editTooltip":"You must be signed in to make or propose changes"},"ghDesktopPath":null,"gitLfsPath":null,"onBranch":false,"shortPath":"4a94144","siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fsecure-foundations%2Fmariposa%2Fblob%2F182b553066d35ccafad4f1b909499288e3a63777%2Fdocs%2Fvampire_help","isCSV":false,"isRichtext":false,"toc":null,"lineInfo":{"truncatedLoc":"1345","truncatedSloc":"1300"},"mode":"file"},"image":false,"isCodeownersFile":null,"isValidLegacyIssueTemplate":false,"issueTemplateHelpUrl":"https://docs.github.com/articles/about-issue-and-pull-request-templates","issueTemplate":null,"discussionTemplate":null,"language":null,"languageID":null,"large":false,"loggedIn":false,"newDiscussionPath":"/secure-foundations/mariposa/discussions/new","newIssuePath":"/secure-foundations/mariposa/issues/new","planSupportInfo":{"repoIsFork":null,"repoOwnedByCurrentUser":null,"requestFullPath":"/secure-foundations/mariposa/blob/182b553066d35ccafad4f1b909499288e3a63777/docs/vampire_help","showFreeOrgGatedFeatureMessage":null,"showPlanSupportBanner":null,"upgradeDataAttributes":null,"upgradePath":null},"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_dockerfile","dismissStackNoticePath":"/settings/dismiss-notice/publish_stack_from_file","releasePath":"/secure-foundations/mariposa/releases/new?marketplace=true","showPublishActionBanner":false,"showPublishStackBanner":false},"renderImageOrRaw":false,"richText":null,"renderedFileInfo":null,"tabSize":8,"topBannersInfo":{"overridingGlobalFundingFile":false,"globalPreferredFundingPath":null,"repoOwner":"secure-foundations","repoName":"mariposa","showInvalidCitationWarning":false,"citationHelpUrl":"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files","showDependabotConfigurationBanner":false,"actionsOnboardingTip":null},"truncated":false,"viewable":true,"workflowRedirectUrl":null,"symbols":{"timedOut":false,"notAnalyzed":true,"symbols":[]}},"copilotInfo":null,"csrf_tokens":{"/secure-foundations/mariposa/branches":{"post":"8wTo_lv5htNhv1gXI9aHGVC6836hNIp8FKrENhXmeqza8yOwI9gHWmRo0vbRxWnWw-kjNdhBIcjDboz4YhGKEg"}}},"title":"mariposa/docs/vampire_help at 182b553066d35ccafad4f1b909499288e3a63777 · secure-foundations/mariposa"}